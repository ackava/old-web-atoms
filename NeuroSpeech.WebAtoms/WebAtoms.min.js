/*
* This file has been commented to support Visual Studio Intellisense.
* You should not use this file at runtime inside the browser--it is only
* intended to be used only for design-time IntelliSense.  Please use the
* standard jQuery library for all production use.
*
* Comment version: 1.5.1
*/
/*!
* Note: While Microsoft is not the author of this file, Microsoft is
* offering you a license subject to the terms of the Microsoft Software
* License Terms for Microsoft ASP.NET Model View Controller 3.
* Microsoft reserves all other rights. The notices below are provided
* for informational purposes only and are not the license terms under
* which Microsoft distributed this file.
*
* jQuery JavaScript Library v1.5.1
* http://jquery.com/
*
* Copyright 2010, John Resig
*
* Includes Sizzle.js
* http://sizzlejs.com/
* Copyright 2010, The Dojo Foundation
*
*/
(function( window, undefined ) {
var document = window.document;
var jQuery = (function() {
var jQuery = function( selector, context ) {
return new jQuery.fn.init( selector, context );
},
_jQuery = window.jQuery,
_$ = window.$,
rootjQuery,
quickExpr = /^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/,
isSimple = /^.[^:#\[\.,]*$/,
rnotwhite = /\S/,
rwhite = /\s/,
trimLeft = /^\s+/,
trimRight = /\s+$/,
rnonword = /\W/,
rdigit = /\d/,
rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
rvalidchars = /^[\],:{}\s]*$/,
rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
rwebkit = /(webkit)[ \/]([\w.]+)/,
ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
rmsie = /(msie) ([\w.]+)/,
rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
userAgent = navigator.userAgent,
browserMatch,
readyBound = false,
readyList = [],
DOMContentLoaded,
toString = Object.prototype.toString,
hasOwn = Object.prototype.hasOwnProperty,
push = Array.prototype.push,
slice = Array.prototype.slice,
trim = String.prototype.trim,
indexOf = Array.prototype.indexOf,
class2type = {};
jQuery.fn = jQuery.prototype = {
init: function( selector, context ) {
var match, elem, ret, doc;
if ( !selector ) {
return this;
}
if ( selector.nodeType ) {
this.context = this[0] = selector;
this.length = 1;
return this;
}
if ( selector === "body" && !context && document.body ) {
this.context = document;
this[0] = document.body;
this.selector = "body";
this.length = 1;
return this;
}
if ( typeof selector === "string" ) {
match = quickExpr.exec( selector );
if ( match && (match[1] || !context) ) {
if ( match[1] ) {
doc = (context ? context.ownerDocument || context : document);
ret = rsingleTag.exec( selector );
if ( ret ) {
if ( jQuery.isPlainObject( context ) ) {
selector = [ document.createElement( ret[1] ) ];
jQuery.fn.attr.call( selector, context, true );
} else {
selector = [ doc.createElement( ret[1] ) ];
}
} else {
ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
selector = (ret.cacheable ? ret.fragment.cloneNode(true) : ret.fragment).childNodes;
}
return jQuery.merge( this, selector );
} else {
elem = document.getElementById( match[2] );
if ( elem && elem.parentNode ) {
if ( elem.id !== match[2] ) {
return rootjQuery.find( selector );
}
this.length = 1;
this[0] = elem;
}
this.context = document;
this.selector = selector;
return this;
}
} else if ( !context && !rnonword.test( selector ) ) {
this.selector = selector;
this.context = document;
selector = document.getElementsByTagName( selector );
return jQuery.merge( this, selector );
} else if ( !context || context.jquery ) {
return (context || rootjQuery).find( selector );
} else {
return jQuery( context ).find( selector );
}
} else if ( jQuery.isFunction( selector ) ) {
return rootjQuery.ready( selector );
}
if (selector.selector !== undefined) {
this.selector = selector.selector;
this.context = selector.context;
}
return jQuery.makeArray( selector, this );
},
selector: "",
jquery: "1.4.4",
length: 0,
size: function() {
return this.length;
},
toArray: function() {
return slice.call( this, 0 );
},
get: function( num ) {
return num == null ?
this.toArray() :
( num < 0 ? this.slice(num)[ 0 ] : this[ num ] );
},
pushStack: function( elems, name, selector ) {
var ret = jQuery();
if ( jQuery.isArray( elems ) ) {
push.apply( ret, elems );
} else {
jQuery.merge( ret, elems );
}
ret.prevObject = this;
ret.context = this.context;
if ( name === "find" ) {
ret.selector = this.selector + (this.selector ? " " : "") + selector;
} else if ( name ) {
ret.selector = this.selector + "." + name + "(" + selector + ")";
}
return ret;
},
each: function( callback, args ) {
return jQuery.each( this, callback, args );
},
ready: function( fn ) {
jQuery.bindReady();
if ( jQuery.isReady ) {
fn.call( document, jQuery );
} else if ( readyList ) {
readyList.push( fn );
}
return this;
},
eq: function( i ) {
return i === -1 ?
this.slice( i ) :
this.slice( i, +i + 1 );
},
first: function() {
return this.eq( 0 );
},
last: function() {
return this.eq( -1 );
},
slice: function() {
return this.pushStack( slice.apply( this, arguments ),
"slice", slice.call(arguments).join(",") );
},
map: function( callback ) {
return this.pushStack( jQuery.map(this, function( elem, i ) {
return callback.call( elem, i, elem );
}));
},
end: function() {
return this.prevObject || jQuery(null);
},
push: push,
sort: [].sort,
splice: [].splice
};
jQuery.fn.init.prototype = jQuery.fn;
jQuery.extend = jQuery.fn.extend = function() {
var options, name, src, copy, copyIsArray, clone,
target = arguments[0] || {},
i = 1,
length = arguments.length,
deep = false;
if ( typeof target === "boolean" ) {
deep = target;
target = arguments[1] || {};
i = 2;
}
if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
target = {};
}
if ( length === i ) {
target = this;
--i;
}
for ( ; i < length; i++ ) {
if ( (options = arguments[ i ]) != null ) {
for ( name in options ) {
src = target[ name ];
copy = options[ name ];
if ( target === copy ) {
continue;
}
if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
if ( copyIsArray ) {
copyIsArray = false;
clone = src && jQuery.isArray(src) ? src : [];
} else {
clone = src && jQuery.isPlainObject(src) ? src : {};
}
target[ name ] = jQuery.extend( deep, clone, copy );
} else if ( copy !== undefined ) {
target[ name ] = copy;
}
}
}
}
return target;
};
jQuery.extend({
noConflict: function( deep ) {
window.$ = _$;
if ( deep ) {
window.jQuery = _jQuery;
}
return jQuery;
},
isReady: false,
readyWait: 1,
ready: function( wait ) {
if ( wait === true ) {
jQuery.readyWait--;
}
if ( !jQuery.readyWait || (wait !== true && !jQuery.isReady) ) {
if ( !document.body ) {
return setTimeout( jQuery.ready, 1 );
}
jQuery.isReady = true;
if ( wait !== true && --jQuery.readyWait > 0 ) {
return;
}
if ( readyList ) {
var fn,
i = 0,
ready = readyList;
readyList = null;
while ( (fn = ready[ i++ ]) ) {
fn.call( document, jQuery );
}
if ( jQuery.fn.trigger ) {
jQuery( document ).trigger( "ready" ).unbind( "ready" );
}
}
}
},
bindReady: function() {
if ( readyBound ) {
return;
}
readyBound = true;
if ( document.readyState === "complete" ) {
return setTimeout( jQuery.ready, 1 );
}
if ( document.addEventListener ) {
document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );
window.addEventListener( "load", jQuery.ready, false );
} else if ( document.attachEvent ) {
document.attachEvent("onreadystatechange", DOMContentLoaded);
window.attachEvent( "onload", jQuery.ready );
var toplevel = false;
try {
toplevel = window.frameElement == null;
} catch(e) {}
if ( document.documentElement.doScroll && toplevel ) {
doScrollCheck();
}
}
},
isFunction: function( obj ) {
return jQuery.type(obj) === "function";
},
isArray: Array.isArray || function( obj ) {
return jQuery.type(obj) === "array";
},
isWindow: function( obj ) {
return obj && typeof obj === "object" && "setInterval" in obj;
},
isNaN: function( obj ) {
return obj == null || !rdigit.test( obj ) || isNaN( obj );
},
type: function( obj ) {
return obj == null ?
String( obj ) :
class2type[ toString.call(obj) ] || "object";
},
isPlainObject: function( obj ) {
if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
return false;
}
if ( obj.constructor &&
!hasOwn.call(obj, "constructor") &&
!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
return false;
}
var key;
for ( key in obj ) {}
return key === undefined || hasOwn.call( obj, key );
},
isEmptyObject: function( obj ) {
for ( var name in obj ) {
return false;
}
return true;
},
error: function( msg ) {
throw msg;
},
parseJSON: function( data ) {
if ( typeof data !== "string" || !data ) {
return null;
}
data = jQuery.trim( data );
if ( rvalidchars.test(data.replace(rvalidescape, "@")
.replace(rvalidtokens, "]")
.replace(rvalidbraces, "")) ) {
return window.JSON && window.JSON.parse ?
window.JSON.parse( data ) :
(new Function("return " + data))();
} else {
jQuery.error( "Invalid JSON: " + data );
}
},
noop: function() {
},
globalEval: function( data ) {
if ( data && rnotwhite.test(data) ) {
var head = document.getElementsByTagName("head")[0] || document.documentElement,
script = document.createElement("script");
script.type = "text/javascript";
if ( jQuery.support.scriptEval ) {
script.appendChild( document.createTextNode( data ) );
} else {
script.text = data;
}
head.insertBefore( script, head.firstChild );
head.removeChild( script );
}
},
nodeName: function( elem, name ) {
return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
},
each: function( object, callback, args ) {
var name, i = 0,
length = object.length,
isObj = length === undefined || jQuery.isFunction(object);
if ( args ) {
if ( isObj ) {
for ( name in object ) {
if ( callback.apply( object[ name ], args ) === false ) {
break;
}
}
} else {
for ( ; i < length; ) {
if ( callback.apply( object[ i++ ], args ) === false ) {
break;
}
}
}
} else {
if ( isObj ) {
for ( name in object ) {
if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
break;
}
}
} else {
for ( var value = object[0];
i < length && callback.call( value, i, value ) !== false; value = object[++i] ) {}
}
}
return object;
},
trim: trim ?
function( text ) {
return text == null ?
"" :
trim.call( text );
} :
function( text ) {
return text == null ?
"" :
text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
},
makeArray: function( array, results ) {
var ret = results || [];
if ( array != null ) {
var type = jQuery.type(array);
if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
push.call( ret, array );
} else {
jQuery.merge( ret, array );
}
}
return ret;
},
inArray: function( elem, array ) {
if ( array.indexOf ) {
return array.indexOf( elem );
}
for ( var i = 0, length = array.length; i < length; i++ ) {
if ( array[ i ] === elem ) {
return i;
}
}
return -1;
},
merge: function( first, second ) {
var i = first.length,
j = 0;
if ( typeof second.length === "number" ) {
for ( var l = second.length; j < l; j++ ) {
first[ i++ ] = second[ j ];
}
} else {
while ( second[j] !== undefined ) {
first[ i++ ] = second[ j++ ];
}
}
first.length = i;
return first;
},
grep: function( elems, callback, inv ) {
var ret = [], retVal;
inv = !!inv;
for ( var i = 0, length = elems.length; i < length; i++ ) {
retVal = !!callback( elems[ i ], i );
if ( inv !== retVal ) {
ret.push( elems[ i ] );
}
}
return ret;
},
map: function( elems, callback, arg ) {
var ret = [], value;
for ( var i = 0, length = elems.length; i < length; i++ ) {
value = callback( elems[ i ], i, arg );
if ( value != null ) {
ret[ ret.length ] = value;
}
}
return ret.concat.apply( [], ret );
},
guid: 1,
proxy: function( fn, proxy, thisObject ) {
if ( arguments.length === 2 ) {
if ( typeof proxy === "string" ) {
thisObject = fn;
fn = thisObject[ proxy ];
proxy = undefined;
} else if ( proxy && !jQuery.isFunction( proxy ) ) {
thisObject = proxy;
proxy = undefined;
}
}
if ( !proxy && fn ) {
proxy = function() {
return fn.apply( thisObject || this, arguments );
};
}
if ( fn ) {
proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
}
return proxy;
},
access: function( elems, key, value, exec, fn, pass ) {
var length = elems.length;
if ( typeof key === "object" ) {
for ( var k in key ) {
jQuery.access( elems, k, key[k], exec, fn, value );
}
return elems;
}
if ( value !== undefined ) {
exec = !pass && exec && jQuery.isFunction(value);
for ( var i = 0; i < length; i++ ) {
fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
}
return elems;
}
return length ? fn( elems[0], key ) : undefined;
},
now: function() {
return (new Date()).getTime();
},
uaMatch: function( ua ) {
ua = ua.toLowerCase();
var match = rwebkit.exec( ua ) ||
ropera.exec( ua ) ||
rmsie.exec( ua ) ||
ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
[];
return { browser: match[1] || "", version: match[2] || "0" };
},
browser: {}
});
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
class2type[ "[object " + name + "]" ] = name.toLowerCase();
});
browserMatch = jQuery.uaMatch( userAgent );
if ( browserMatch.browser ) {
jQuery.browser[ browserMatch.browser ] = true;
jQuery.browser.version = browserMatch.version;
}
if ( jQuery.browser.webkit ) {
jQuery.browser.safari = true;
}
if ( indexOf ) {
jQuery.inArray = function( elem, array ) {
return indexOf.call( array, elem );
};
}
if ( !rwhite.test( "\xA0" ) ) {
trimLeft = /^[\s\xA0]+/;
trimRight = /[\s\xA0]+$/;
}
rootjQuery = jQuery(document);
if ( document.addEventListener ) {
DOMContentLoaded = function() {
document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
jQuery.ready();
};
} else if ( document.attachEvent ) {
DOMContentLoaded = function() {
if ( document.readyState === "complete" ) {
document.detachEvent( "onreadystatechange", DOMContentLoaded );
jQuery.ready();
}
};
}
function doScrollCheck() {
if ( jQuery.isReady ) {
return;
}
try {
document.documentElement.doScroll("left");
} catch(e) {
setTimeout( doScrollCheck, 1 );
return;
}
jQuery.ready();
}
return (window.jQuery = window.$ = jQuery);
})();
(function() {
jQuery.support = {};
jQuery.support = {
leadingWhitespace: false,
tbody: false,
htmlSerialize: false,
style: false,
hrefNormalized: false,
opacity: false,
cssFloat: false,
checkOn: false,
optSelected: false,
deleteExpando: false,
optDisabled: false,
checkClone: false,
scriptEval: false,
noCloneEvent: false,
boxModel: false,
inlineBlockNeedsLayout: false,
shrinkWrapBlocks: false,
reliableHiddenOffsets: true
};
jQuery.support.submitBubbles = false;
jQuery.support.changeBubbles = false;
})();
var windowData = {},
rbrace = /^(?:\{.*\}|\[.*\])$/;
jQuery.extend({
cache: {},
uuid: 0,
expando: "jQuery" + jQuery.now(),
noData: {
"embed": true,
"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
"applet": true
},
data: function( elem, name, data ) {
if ( !jQuery.acceptData( elem ) ) {
return;
}
elem = elem == window ?
windowData :
elem;
var isNode = elem.nodeType,
id = isNode ? elem[ jQuery.expando ] : null,
cache = jQuery.cache, thisCache;
if ( isNode && !id && typeof name === "string" && data === undefined ) {
return;
}
if ( !isNode ) {
cache = elem;
} else if ( !id ) {
elem[ jQuery.expando ] = id = ++jQuery.uuid;
}
if ( typeof name === "object" ) {
if ( isNode ) {
cache[ id ] = jQuery.extend(cache[ id ], name);
} else {
jQuery.extend( cache, name );
}
} else if ( isNode && !cache[ id ] ) {
cache[ id ] = {};
}
thisCache = isNode ? cache[ id ] : cache;
if ( data !== undefined ) {
thisCache[ name ] = data;
}
return typeof name === "string" ? thisCache[ name ] : thisCache;
},
removeData: function( elem, name ) {
if ( !jQuery.acceptData( elem ) ) {
return;
}
elem = elem == window ?
windowData :
elem;
var isNode = elem.nodeType,
id = isNode ? elem[ jQuery.expando ] : elem,
cache = jQuery.cache,
thisCache = isNode ? cache[ id ] : id;
if ( name ) {
if ( thisCache ) {
delete thisCache[ name ];
if ( isNode && jQuery.isEmptyObject(thisCache) ) {
jQuery.removeData( elem );
}
}
} else {
if ( isNode && jQuery.support.deleteExpando ) {
delete elem[ jQuery.expando ];
} else if ( elem.removeAttribute ) {
elem.removeAttribute( jQuery.expando );
} else if ( isNode ) {
delete cache[ id ];
} else {
for ( var n in elem ) {
delete elem[ n ];
}
}
}
},
acceptData: function( elem ) {
if ( elem.nodeName ) {
var match = jQuery.noData[ elem.nodeName.toLowerCase() ];
if ( match ) {
return !(match === true || elem.getAttribute("classid") !== match);
}
}
return true;
}
});
jQuery.fn.extend({
data: function( key, value ) {
var data = null;
if ( typeof key === "undefined" ) {
if ( this.length ) {
var attr = this[0].attributes, name;
data = jQuery.data( this[0] );
for ( var i = 0, l = attr.length; i < l; i++ ) {
name = attr[i].name;
if ( name.indexOf( "data-" ) === 0 ) {
name = name.substr( 5 );
dataAttr( this[0], name, data[ name ] );
}
}
}
return data;
} else if ( typeof key === "object" ) {
return this.each(function() {
jQuery.data( this, key );
});
}
var parts = key.split(".");
parts[1] = parts[1] ? "." + parts[1] : "";
if ( value === undefined ) {
data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);
if ( data === undefined && this.length ) {
data = jQuery.data( this[0], key );
data = dataAttr( this[0], key, data );
}
return data === undefined && parts[1] ?
this.data( parts[0] ) :
data;
} else {
return this.each(function() {
var $this = jQuery( this ),
args = [ parts[0], value ];
$this.triggerHandler( "setData" + parts[1] + "!", args );
jQuery.data( this, key, value );
$this.triggerHandler( "changeData" + parts[1] + "!", args );
});
}
},
removeData: function( key ) {
return this.each(function() {
jQuery.removeData( this, key );
});
}
});
function dataAttr( elem, key, data ) {
if ( data === undefined && elem.nodeType === 1 ) {
data = elem.getAttribute( "data-" + key );
if ( typeof data === "string" ) {
try {
data = data === "true" ? true :
data === "false" ? false :
data === "null" ? null :
!jQuery.isNaN( data ) ? parseFloat( data ) :
rbrace.test( data ) ? jQuery.parseJSON( data ) :
data;
} catch( e ) {}
jQuery.data( elem, key, data );
} else {
data = undefined;
}
}
return data;
}
jQuery.extend({
queue: function( elem, type, data ) {
if ( !elem ) {
return;
}
type = (type || "fx") + "queue";
var q = jQuery.data( elem, type );
if ( !data ) {
return q || [];
}
if ( !q || jQuery.isArray(data) ) {
q = jQuery.data( elem, type, jQuery.makeArray(data) );
} else {
q.push( data );
}
return q;
},
dequeue: function( elem, type ) {
type = type || "fx";
var queue = jQuery.queue( elem, type ),
fn = queue.shift();
if ( fn === "inprogress" ) {
fn = queue.shift();
}
if ( fn ) {
if ( type === "fx" ) {
queue.unshift("inprogress");
}
fn.call(elem, function() {
jQuery.dequeue(elem, type);
});
}
}
});
jQuery.fn.extend({
queue: function( type, data ) {
if ( typeof type !== "string" ) {
data = type;
type = "fx";
}
if ( data === undefined ) {
return jQuery.queue( this[0], type );
}
return this.each(function( i ) {
var queue = jQuery.queue( this, type, data );
if ( type === "fx" && queue[0] !== "inprogress" ) {
jQuery.dequeue( this, type );
}
});
},
dequeue: function( type ) {
return this.each(function() {
jQuery.dequeue( this, type );
});
},
delay: function( time, type ) {
time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
type = type || "fx";
return this.queue( type, function() {
var elem = this;
setTimeout(function() {
jQuery.dequeue( elem, type );
}, time );
});
},
clearQueue: function( type ) {
return this.queue( type || "fx", [] );
}
});
var rclass = /[\n\t]/g,
rspaces = /\s+/,
rreturn = /\r/g,
rspecialurl = /^(?:href|src|style)$/,
rtype = /^(?:button|input)$/i,
rfocusable = /^(?:button|input|object|select|textarea)$/i,
rclickable = /^a(?:rea)?$/i,
rradiocheck = /^(?:radio|checkbox)$/i;
jQuery.props = {
"for": "htmlFor",
"class": "className",
readonly: "readOnly",
maxlength: "maxLength",
cellspacing: "cellSpacing",
rowspan: "rowSpan",
colspan: "colSpan",
tabindex: "tabIndex",
usemap: "useMap",
frameborder: "frameBorder"
};
jQuery.fn.extend({
attr: function( name, value ) {
return jQuery.access( this, name, value, true, jQuery.attr );
},
removeAttr: function( name, fn ) {
return this.each(function(){
jQuery.attr( this, name, "" );
if ( this.nodeType === 1 ) {
this.removeAttribute( name );
}
});
},
addClass: function( value ) {
if ( jQuery.isFunction(value) ) {
return this.each(function(i) {
var self = jQuery(this);
self.addClass( value.call(this, i, self.attr("class")) );
});
}
if ( value && typeof value === "string" ) {
var classNames = (value || "").split( rspaces );
for ( var i = 0, l = this.length; i < l; i++ ) {
var elem = this[i];
if ( elem.nodeType === 1 ) {
if ( !elem.className ) {
elem.className = value;
} else {
var className = " " + elem.className + " ",
setClass = elem.className;
for ( var c = 0, cl = classNames.length; c < cl; c++ ) {
if ( className.indexOf( " " + classNames[c] + " " ) < 0 ) {
setClass += " " + classNames[c];
}
}
elem.className = jQuery.trim( setClass );
}
}
}
}
return this;
},
removeClass: function( value ) {
if ( jQuery.isFunction(value) ) {
return this.each(function(i) {
var self = jQuery(this);
self.removeClass( value.call(this, i, self.attr("class")) );
});
}
if ( (value && typeof value === "string") || value === undefined ) {
var classNames = (value || "").split( rspaces );
for ( var i = 0, l = this.length; i < l; i++ ) {
var elem = this[i];
if ( elem.nodeType === 1 && elem.className ) {
if ( value ) {
var className = (" " + elem.className + " ").replace(rclass, " ");
for ( var c = 0, cl = classNames.length; c < cl; c++ ) {
className = className.replace(" " + classNames[c] + " ", " ");
}
elem.className = jQuery.trim( className );
} else {
elem.className = "";
}
}
}
}
return this;
},
toggleClass: function( value, stateVal ) {
var type = typeof value,
isBool = typeof stateVal === "boolean";
if ( jQuery.isFunction( value ) ) {
return this.each(function(i) {
var self = jQuery(this);
self.toggleClass( value.call(this, i, self.attr("class"), stateVal), stateVal );
});
}
return this.each(function() {
if ( type === "string" ) {
var className,
i = 0,
self = jQuery( this ),
state = stateVal,
classNames = value.split( rspaces );
while ( (className = classNames[ i++ ]) ) {
state = isBool ? state : !self.hasClass( className );
self[ state ? "addClass" : "removeClass" ]( className );
}
} else if ( type === "undefined" || type === "boolean" ) {
if ( this.className ) {
jQuery.data( this, "__className__", this.className );
}
this.className = this.className || value === false ? "" : jQuery.data( this, "__className__" ) || "";
}
});
},
hasClass: function( selector ) {
var className = " " + selector + " ";
for ( var i = 0, l = this.length; i < l; i++ ) {
if ( (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
return true;
}
}
return false;
},
val: function( value ) {
if ( !arguments.length ) {
var elem = this[0];
if ( elem ) {
if ( jQuery.nodeName( elem, "option" ) ) {
var val = elem.attributes.value;
return !val || val.specified ? elem.value : elem.text;
}
if ( jQuery.nodeName( elem, "select" ) ) {
var index = elem.selectedIndex,
values = [],
options = elem.options,
one = elem.type === "select-one";
if ( index < 0 ) {
return null;
}
for ( var i = one ? index : 0, max = one ? index + 1 : options.length; i < max; i++ ) {
var option = options[ i ];
if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {
value = jQuery(option).val();
if ( one ) {
return value;
}
values.push( value );
}
}
return values;
}
if ( rradiocheck.test( elem.type ) && !jQuery.support.checkOn ) {
return elem.getAttribute("value") === null ? "on" : elem.value;
}
return (elem.value || "").replace(rreturn, "");
}
return undefined;
}
var isFunction = jQuery.isFunction(value);
return this.each(function(i) {
var self = jQuery(this), val = value;
if ( this.nodeType !== 1 ) {
return;
}
if ( isFunction ) {
val = value.call(this, i, self.val());
}
if ( val == null ) {
val = "";
} else if ( typeof val === "number" ) {
val += "";
} else if ( jQuery.isArray(val) ) {
val = jQuery.map(val, function (value) {
return value == null ? "" : value + "";
});
}
if ( jQuery.isArray(val) && rradiocheck.test( this.type ) ) {
this.checked = jQuery.inArray( self.val(), val ) >= 0;
} else if ( jQuery.nodeName( this, "select" ) ) {
var values = jQuery.makeArray(val);
jQuery( "option", this ).each(function() {
this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
});
if ( !values.length ) {
this.selectedIndex = -1;
}
} else {
this.value = val;
}
});
}
});
jQuery.extend({
attrFn: {
val: true,
css: true,
html: true,
text: true,
data: true,
width: true,
height: true,
offset: true
},
attr: function( elem, name, value, pass ) {
if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 ) {
return undefined;
}
if ( pass && name in jQuery.attrFn ) {
return jQuery(elem)[name](value);
}
var notxml = elem.nodeType !== 1 || !jQuery.isXMLDoc( elem ),
set = value !== undefined;
name = notxml && jQuery.props[ name ] || name;
var special = rspecialurl.test( name );
if ( name === "selected" && !jQuery.support.optSelected ) {
var parent = elem.parentNode;
if ( parent ) {
parent.selectedIndex;
if ( parent.parentNode ) {
parent.parentNode.selectedIndex;
}
}
}
if ( (name in elem || elem[ name ] !== undefined) && notxml && !special ) {
if ( set ) {
if ( name === "type" && rtype.test( elem.nodeName ) && elem.parentNode ) {
jQuery.error( "type property can't be changed" );
}
if ( value === null ) {
if ( elem.nodeType === 1 ) {
elem.removeAttribute( name );
}
} else {
elem[ name ] = value;
}
}
if ( jQuery.nodeName( elem, "form" ) && elem.getAttributeNode(name) ) {
return elem.getAttributeNode( name ).nodeValue;
}
if ( name === "tabIndex" ) {
var attributeNode = elem.getAttributeNode( "tabIndex" );
return attributeNode && attributeNode.specified ?
attributeNode.value :
rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
0 :
undefined;
}
return elem[ name ];
}
if ( !jQuery.support.style && notxml && name === "style" ) {
if ( set ) {
elem.style.cssText = "" + value;
}
return elem.style.cssText;
}
if ( set ) {
elem.setAttribute( name, "" + value );
}
if ( !elem.attributes[ name ] && (elem.hasAttribute && !elem.hasAttribute( name )) ) {
return undefined;
}
var attr = !jQuery.support.hrefNormalized && notxml && special ?
elem.getAttribute( name, 2 ) :
elem.getAttribute( name );
return attr === null ? undefined : attr;
}
});
var rnamespaces = /\.(.*)$/,
rformElems = /^(?:textarea|input|select)$/i,
rperiod = /\./g,
rspace = / /g,
rescape = /[^\w\s.|`]/g,
fcleanup = function( nm ) {
return nm.replace(rescape, "\\$&");
},
focusCounts = { focusin: 0, focusout: 0 };
/*
* A number of helper functions used for managing events.
* Many of the ideas behind this code originated from
* Dean Edwards' addEvent library.
*/
jQuery.event = {
add: function( elem, types, handler, data ) {
if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
return;
}
if ( jQuery.isWindow( elem ) && ( elem !== window && !elem.frameElement ) ) {
elem = window;
}
if ( handler === false ) {
handler = returnFalse;
} else if ( !handler ) {
return;
}
var handleObjIn, handleObj;
if ( handler.handler ) {
handleObjIn = handler;
handler = handleObjIn.handler;
}
if ( !handler.guid ) {
handler.guid = jQuery.guid++;
}
var elemData = jQuery.data( elem );
if ( !elemData ) {
return;
}
var eventKey = elem.nodeType ? "events" : "__events__",
events = elemData[ eventKey ],
eventHandle = elemData.handle;
if ( typeof events === "function" ) {
eventHandle = events.handle;
events = events.events;
} else if ( !events ) {
if ( !elem.nodeType ) {
elemData[ eventKey ] = elemData = function(){};
}
elemData.events = events = {};
}
if ( !eventHandle ) {
elemData.handle = eventHandle = function() {
return typeof jQuery !== "undefined" && !jQuery.event.triggered ?
jQuery.event.handle.apply( eventHandle.elem, arguments ) :
undefined;
};
}
eventHandle.elem = elem;
types = types.split(" ");
var type, i = 0, namespaces;
while ( (type = types[ i++ ]) ) {
handleObj = handleObjIn ?
jQuery.extend({}, handleObjIn) :
{ handler: handler, data: data };
if ( type.indexOf(".") > -1 ) {
namespaces = type.split(".");
type = namespaces.shift();
handleObj.namespace = namespaces.slice(0).sort().join(".");
} else {
namespaces = [];
handleObj.namespace = "";
}
handleObj.type = type;
if ( !handleObj.guid ) {
handleObj.guid = handler.guid;
}
var handlers = events[ type ],
special = jQuery.event.special[ type ] || {};
if ( !handlers ) {
handlers = events[ type ] = [];
if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
if ( elem.addEventListener ) {
elem.addEventListener( type, eventHandle, false );
} else if ( elem.attachEvent ) {
elem.attachEvent( "on" + type, eventHandle );
}
}
}
if ( special.add ) {
special.add.call( elem, handleObj );
if ( !handleObj.handler.guid ) {
handleObj.handler.guid = handler.guid;
}
}
handlers.push( handleObj );
jQuery.event.global[ type ] = true;
}
elem = null;
},
global: {},
remove: function( elem, types, handler ) {
if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
return;
}
if ( handler === false ) {
handler = returnFalse;
}
var ret, type, fn, j, i = 0, all, namespaces, namespace, special, eventType, handleObj, origType,
eventKey = elem.nodeType ? "events" : "__events__",
elemData = jQuery.data( elem ),
events = elemData && elemData[ eventKey ];
if ( !elemData || !events ) {
return;
}
if ( typeof events === "function" ) {
elemData = events;
events = events.events;
}
if ( types && types.type ) {
handler = types.handler;
types = types.type;
}
if ( !types || typeof types === "string" && types.charAt(0) === "." ) {
types = types || "";
for ( type in events ) {
jQuery.event.remove( elem, type + types );
}
return;
}
types = types.split(" ");
while ( (type = types[ i++ ]) ) {
origType = type;
handleObj = null;
all = type.indexOf(".") < 0;
namespaces = [];
if ( !all ) {
namespaces = type.split(".");
type = namespaces.shift();
namespace = new RegExp("(^|\\.)" +
jQuery.map( namespaces.slice(0).sort(), fcleanup ).join("\\.(?:.*\\.)?") + "(\\.|$)");
}
eventType = events[ type ];
if ( !eventType ) {
continue;
}
if ( !handler ) {
for ( j = 0; j < eventType.length; j++ ) {
handleObj = eventType[ j ];
if ( all || namespace.test( handleObj.namespace ) ) {
jQuery.event.remove( elem, origType, handleObj.handler, j );
eventType.splice( j--, 1 );
}
}
continue;
}
special = jQuery.event.special[ type ] || {};
for ( j = pos || 0; j < eventType.length; j++ ) {
handleObj = eventType[ j ];
if ( handler.guid === handleObj.guid ) {
if ( all || namespace.test( handleObj.namespace ) ) {
if ( pos == null ) {
eventType.splice( j--, 1 );
}
if ( special.remove ) {
special.remove.call( elem, handleObj );
}
}
if ( pos != null ) {
break;
}
}
}
if ( eventType.length === 0 || pos != null && eventType.length === 1 ) {
if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
jQuery.removeEvent( elem, type, elemData.handle );
}
ret = null;
delete events[ type ];
}
}
if ( jQuery.isEmptyObject( events ) ) {
var handle = elemData.handle;
if ( handle ) {
handle.elem = null;
}
delete elemData.events;
delete elemData.handle;
if ( typeof elemData === "function" ) {
jQuery.removeData( elem, eventKey );
} else if ( jQuery.isEmptyObject( elemData ) ) {
jQuery.removeData( elem );
}
}
},
trigger: function( event, data, elem /*, bubbling */ ) {
var type = event.type || event,
bubbling = arguments[3];
if ( !bubbling ) {
event = typeof event === "object" ?
event[ jQuery.expando ] ? event :
jQuery.extend( jQuery.Event(type), event ) :
jQuery.Event(type);
if ( type.indexOf("!") >= 0 ) {
event.type = type = type.slice(0, -1);
event.exclusive = true;
}
if ( !elem ) {
event.stopPropagation();
if ( jQuery.event.global[ type ] ) {
jQuery.each( jQuery.cache, function() {
if ( this.events && this.events[type] ) {
jQuery.event.trigger( event, data, this.handle.elem );
}
});
}
}
if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 ) {
return undefined;
}
event.result = undefined;
event.target = elem;
data = jQuery.makeArray( data );
data.unshift( event );
}
event.currentTarget = elem;
var handle = elem.nodeType ?
jQuery.data( elem, "handle" ) :
(jQuery.data( elem, "__events__" ) || {}).handle;
if ( handle ) {
handle.apply( elem, data );
}
var parent = elem.parentNode || elem.ownerDocument;
try {
if ( !(elem && elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) ) {
if ( elem[ "on" + type ] && elem[ "on" + type ].apply( elem, data ) === false ) {
event.result = false;
event.preventDefault();
}
}
} catch (inlineError) {}
if ( !event.isPropagationStopped() && parent ) {
jQuery.event.trigger( event, data, parent, true );
} else if ( !event.isDefaultPrevented() ) {
var old,
target = event.target,
targetType = type.replace( rnamespaces, "" ),
isClick = jQuery.nodeName( target, "a" ) && targetType === "click",
special = jQuery.event.special[ targetType ] || {};
if ( (!special._default || special._default.call( elem, event ) === false) &&
!isClick && !(target && target.nodeName && jQuery.noData[target.nodeName.toLowerCase()]) ) {
try {
if ( target[ targetType ] ) {
old = target[ "on" + targetType ];
if ( old ) {
target[ "on" + targetType ] = null;
}
jQuery.event.triggered = true;
target[ targetType ]();
}
} catch (triggerError) {}
if ( old ) {
target[ "on" + targetType ] = old;
}
jQuery.event.triggered = false;
}
}
},
handle: function( event ) {
var all, handlers, namespaces, namespace_re, events,
namespace_sort = [],
args = jQuery.makeArray( arguments );
event = args[0] = jQuery.event.fix( event || window.event );
event.currentTarget = this;
all = event.type.indexOf(".") < 0 && !event.exclusive;
if ( !all ) {
namespaces = event.type.split(".");
event.type = namespaces.shift();
namespace_sort = namespaces.slice(0).sort();
namespace_re = new RegExp("(^|\\.)" + namespace_sort.join("\\.(?:.*\\.)?") + "(\\.|$)");
}
event.namespace = event.namespace || namespace_sort.join(".");
events = jQuery.data(this, this.nodeType ? "events" : "__events__");
if ( typeof events === "function" ) {
events = events.events;
}
handlers = (events || {})[ event.type ];
if ( events && handlers ) {
handlers = handlers.slice(0);
for ( var j = 0, l = handlers.length; j < l; j++ ) {
var handleObj = handlers[ j ];
if ( all || namespace_re.test( handleObj.namespace ) ) {
event.handler = handleObj.handler;
event.data = handleObj.data;
event.handleObj = handleObj;
var ret = handleObj.handler.apply( this, args );
if ( ret !== undefined ) {
event.result = ret;
if ( ret === false ) {
event.preventDefault();
event.stopPropagation();
}
}
if ( event.isImmediatePropagationStopped() ) {
break;
}
}
}
}
return event.result;
},
props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
fix: function( event ) {
if ( event[ jQuery.expando ] ) {
return event;
}
var originalEvent = event;
event = jQuery.Event( originalEvent );
for ( var i = this.props.length, prop; i; ) {
prop = this.props[ --i ];
event[ prop ] = originalEvent[ prop ];
}
if ( !event.target ) {
event.target = event.srcElement || document;
}
if ( event.target.nodeType === 3 ) {
event.target = event.target.parentNode;
}
if ( !event.relatedTarget && event.fromElement ) {
event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
}
if ( event.pageX == null && event.clientX != null ) {
var doc = document.documentElement,
body = document.body;
event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
event.pageY = event.clientY + (doc && doc.scrollTop  || body && body.scrollTop  || 0) - (doc && doc.clientTop  || body && body.clientTop  || 0);
}
if ( event.which == null && (event.charCode != null || event.keyCode != null) ) {
event.which = event.charCode != null ? event.charCode : event.keyCode;
}
if ( !event.metaKey && event.ctrlKey ) {
event.metaKey = event.ctrlKey;
}
if ( !event.which && event.button !== undefined ) {
event.which = (event.button & 1 ? 1 : ( event.button & 2 ? 3 : ( event.button & 4 ? 2 : 0 ) ));
}
return event;
},
guid: 1E8,
proxy: jQuery.proxy,
special: {
ready: {
setup: jQuery.bindReady,
teardown: jQuery.noop
},
live: {
add: function( handleObj ) {
jQuery.event.add( this,
liveConvert( handleObj.origType, handleObj.selector ),
jQuery.extend({}, handleObj, {handler: liveHandler, guid: handleObj.handler.guid}) );
},
remove: function( handleObj ) {
jQuery.event.remove( this, liveConvert( handleObj.origType, handleObj.selector ), handleObj );
}
},
beforeunload: {
setup: function( data, namespaces, eventHandle ) {
if ( jQuery.isWindow( this ) ) {
this.onbeforeunload = eventHandle;
}
},
teardown: function( namespaces, eventHandle ) {
if ( this.onbeforeunload === eventHandle ) {
this.onbeforeunload = null;
}
}
}
}
};
jQuery.removeEvent = document.removeEventListener ?
function( elem, type, handle ) {
if ( elem.removeEventListener ) {
elem.removeEventListener( type, handle, false );
}
} :
function( elem, type, handle ) {
if ( elem.detachEvent ) {
elem.detachEvent( "on" + type, handle );
}
};
jQuery.Event = function( src ) {
if ( !this.preventDefault ) {
return new jQuery.Event( src );
}
if ( src && src.type ) {
this.originalEvent = src;
this.type = src.type;
} else {
this.type = src;
}
this.timeStamp = jQuery.now();
this[ jQuery.expando ] = true;
};
function returnFalse() {
return false;
}
function returnTrue() {
return true;
}
jQuery.Event.prototype = {
preventDefault: function() {
this.isDefaultPrevented = returnTrue;
var e = this.originalEvent;
if ( !e ) {
return;
}
if ( e.preventDefault ) {
e.preventDefault();
} else {
e.returnValue = false;
}
},
stopPropagation: function() {
this.isPropagationStopped = returnTrue;
var e = this.originalEvent;
if ( !e ) {
return;
}
if ( e.stopPropagation ) {
e.stopPropagation();
}
e.cancelBubble = true;
},
stopImmediatePropagation: function() {
this.isImmediatePropagationStopped = returnTrue;
this.stopPropagation();
},
isDefaultPrevented: returnFalse,
isPropagationStopped: returnFalse,
isImmediatePropagationStopped: returnFalse
};
var withinElement = function( event ) {
var parent = event.relatedTarget;
try {
while ( parent && parent !== this ) {
parent = parent.parentNode;
}
if ( parent !== this ) {
event.type = event.data;
jQuery.event.handle.apply( this, arguments );
}
} catch(e) { }
},
delegate = function( event ) {
event.type = event.data;
jQuery.event.handle.apply( this, arguments );
};
jQuery.each({
mouseenter: "mouseover",
mouseleave: "mouseout"
}, function( orig, fix ) {
jQuery.event.special[ orig ] = {
setup: function( data ) {
jQuery.event.add( this, fix, data && data.selector ? delegate : withinElement, orig );
},
teardown: function( data ) {
jQuery.event.remove( this, fix, data && data.selector ? delegate : withinElement );
}
};
});
if ( !jQuery.support.submitBubbles ) {
jQuery.event.special.submit = {
setup: function( data, namespaces ) {
if ( this.nodeName.toLowerCase() !== "form" ) {
jQuery.event.add(this, "click.specialSubmit", function( e ) {
var elem = e.target,
type = elem.type;
if ( (type === "submit" || type === "image") && jQuery( elem ).closest("form").length ) {
e.liveFired = undefined;
return trigger( "submit", this, arguments );
}
});
jQuery.event.add(this, "keypress.specialSubmit", function( e ) {
var elem = e.target,
type = elem.type;
if ( (type === "text" || type === "password") && jQuery( elem ).closest("form").length && e.keyCode === 13 ) {
e.liveFired = undefined;
return trigger( "submit", this, arguments );
}
});
} else {
return false;
}
},
teardown: function( namespaces ) {
jQuery.event.remove( this, ".specialSubmit" );
}
};
}
if ( !jQuery.support.changeBubbles ) {
var changeFilters,
getVal = function( elem ) {
var type = elem.type, val = elem.value;
if ( type === "radio" || type === "checkbox" ) {
val = elem.checked;
} else if ( type === "select-multiple" ) {
val = elem.selectedIndex > -1 ?
jQuery.map( elem.options, function( elem ) {
return elem.selected;
}).join("-") :
"";
} else if ( elem.nodeName.toLowerCase() === "select" ) {
val = elem.selectedIndex;
}
return val;
},
testChange = function testChange( e ) {
var elem = e.target, data, val;
if ( !rformElems.test( elem.nodeName ) || elem.readOnly ) {
return;
}
data = jQuery.data( elem, "_change_data" );
val = getVal(elem);
if ( e.type !== "focusout" || elem.type !== "radio" ) {
jQuery.data( elem, "_change_data", val );
}
if ( data === undefined || val === data ) {
return;
}
if ( data != null || val ) {
e.type = "change";
e.liveFired = undefined;
return jQuery.event.trigger( e, arguments[1], elem );
}
};
jQuery.event.special.change = {
filters: {
focusout: testChange,
beforedeactivate: testChange,
click: function( e ) {
var elem = e.target, type = elem.type;
if ( type === "radio" || type === "checkbox" || elem.nodeName.toLowerCase() === "select" ) {
return testChange.call( this, e );
}
},
keydown: function( e ) {
var elem = e.target, type = elem.type;
if ( (e.keyCode === 13 && elem.nodeName.toLowerCase() !== "textarea") ||
(e.keyCode === 32 && (type === "checkbox" || type === "radio")) ||
type === "select-multiple" ) {
return testChange.call( this, e );
}
},
beforeactivate: function( e ) {
var elem = e.target;
jQuery.data( elem, "_change_data", getVal(elem) );
}
},
setup: function( data, namespaces ) {
if ( this.type === "file" ) {
return false;
}
for ( var type in changeFilters ) {
jQuery.event.add( this, type + ".specialChange", changeFilters[type] );
}
return rformElems.test( this.nodeName );
},
teardown: function( namespaces ) {
jQuery.event.remove( this, ".specialChange" );
return rformElems.test( this.nodeName );
}
};
changeFilters = jQuery.event.special.change.filters;
changeFilters.focus = changeFilters.beforeactivate;
}
function trigger( type, elem, args ) {
args[0].type = type;
return jQuery.event.handle.apply( elem, args );
}
if ( document.addEventListener ) {
jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {
jQuery.event.special[ fix ] = {
setup: function() {
if ( focusCounts[fix]++ === 0 ) {
document.addEventListener( orig, handler, true );
}
},
teardown: function() {
if ( --focusCounts[fix] === 0 ) {
document.removeEventListener( orig, handler, true );
}
}
};
function handler( e ) {
e = jQuery.event.fix( e );
e.type = fix;
return jQuery.event.trigger( e, null, e.target );
}
});
}
jQuery.fn[ "bind" ] = function( type, data, fn ) {
if ( typeof type === "object" ) {
for ( var key in type ) {
this[ "bind" ](key, data, type[key], fn);
}
return this;
}
if ( jQuery.isFunction( data ) ) {
fn = data;
data = undefined;
}
var handler = "bind" === "one" ? jQuery.proxy( fn, function( event ) {
jQuery( this ).unbind( event, handler );
return fn.apply( this, arguments );
}) : fn;
return type === "unload" && "bind" !== "one" ?
this.one( type, data, fn ) :
this.each(function() {
jQuery.event.add( this, type, handler, data );
});
};
jQuery.fn[ "one" ] = function( type, data, fn ) {
if ( typeof type === "object" ) {
for ( var key in type ) {
this[ "one" ](key, data, type[key], fn);
}
return this;
}
if ( jQuery.isFunction( data ) ) {
fn = data;
data = undefined;
}
var handler = "one" === "one" ? jQuery.proxy( fn, function( event ) {
jQuery( this ).unbind( event, handler );
return fn.apply( this, arguments );
}) : fn;
return type === "unload" && "one" !== "one" ?
this.one( type, data, fn ) :
this.each(function() {
jQuery.event.add( this, type, handler, data );
});
};
jQuery.fn.extend({
unbind: function( type, fn ) {
if ( typeof type === "object" && !type.preventDefault ) {
for ( var key in type ) {
this.unbind(key, type[key]);
}
} else {
for ( var i = 0, l = this.length; i < l; i++ ) {
jQuery.event.remove( this[i], type, fn );
}
}
return this;
},
delegate: function( selector, types, data, fn ) {
return this.live( types, data, fn, selector );
},
undelegate: function( selector, types, fn ) {
if ( arguments.length === 0 ) {
return this.unbind( "live" );
} else {
return this.die( types, null, fn, selector );
}
},
trigger: function( type, data ) {
return this.each(function() {
jQuery.event.trigger( type, data, this );
});
},
triggerHandler: function( type, data ) {
if ( this[0] ) {
var event = jQuery.Event( type );
event.preventDefault();
event.stopPropagation();
jQuery.event.trigger( event, data, this[0] );
return event.result;
}
},
toggle: function( fn ) {
var args = arguments,
i = 1;
while ( i < args.length ) {
jQuery.proxy( fn, args[ i++ ] );
}
return this.click( jQuery.proxy( fn, function( event ) {
var lastToggle = ( jQuery.data( this, "lastToggle" + fn.guid ) || 0 ) % i;
jQuery.data( this, "lastToggle" + fn.guid, lastToggle + 1 );
event.preventDefault();
return args[ lastToggle ].apply( this, arguments ) || false;
}));
},
hover: function( fnOver, fnOut ) {
return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
}
});
var liveMap = {
focus: "focusin",
blur: "focusout",
mouseenter: "mouseover",
mouseleave: "mouseout"
};
jQuery.fn[ "live" ] = function( types, data, fn ) {
var type, i = 0;
if ( jQuery.isFunction( data ) ) {
fn = data;
data = undefined;
}
types = (types || "").split( /\s+/ );
while ( (type = types[ i++ ]) != null ) {
type = type === "focus" ? "focusin" : // focus --> focusin
type === "blur" ? "focusout" : // blur --> focusout
type === "hover" ? types.push("mouseleave") && "mouseenter" : // hover support
type;
if ( "live" === "live" ) {
jQuery( this.context ).bind( liveConvert( type, this.selector ), {
data: data, selector: this.selector, live: type
}, fn );
} else {
jQuery( this.context ).unbind( liveConvert( type, this.selector ), fn ? { guid: fn.guid + this.selector + type } : null );
}
}
return this;
}
jQuery.fn[ "die" ] = function( types, data, fn ) {
var type, i = 0;
if ( jQuery.isFunction( data ) ) {
fn = data;
data = undefined;
}
types = (types || "").split( /\s+/ );
while ( (type = types[ i++ ]) != null ) {
type = type === "focus" ? "focusin" : // focus --> focusin
type === "blur" ? "focusout" : // blur --> focusout
type === "hover" ? types.push("mouseleave") && "mouseenter" : // hover support
type;
if ( "die" === "live" ) {
jQuery( this.context ).bind( liveConvert( type, this.selector ), {
data: data, selector: this.selector, live: type
}, fn );
} else {
jQuery( this.context ).unbind( liveConvert( type, this.selector ), fn ? { guid: fn.guid + this.selector + type } : null );
}
}
return this;
}
function liveHandler( event ) {
var stop, maxLevel, related, match, handleObj, elem, j, i, l, data, close, namespace, ret,
elems = [],
selectors = [],
events = jQuery.data( this, this.nodeType ? "events" : "__events__" );
if ( typeof events === "function" ) {
events = events.events;
}
if ( event.liveFired === this || !events || !events.live || event.button && event.type === "click" ) {
return;
}
if ( event.namespace ) {
namespace = new RegExp("(^|\\.)" + event.namespace.split(".").join("\\.(?:.*\\.)?") + "(\\.|$)");
}
event.liveFired = this;
var live = events.live.slice(0);
for ( j = 0; j < live.length; j++ ) {
handleObj = live[j];
if ( handleObj.origType.replace( rnamespaces, "" ) === event.type ) {
selectors.push( handleObj.selector );
} else {
live.splice( j--, 1 );
}
}
match = jQuery( event.target ).closest( selectors, event.currentTarget );
for ( i = 0, l = match.length; i < l; i++ ) {
close = match[i];
for ( j = 0; j < live.length; j++ ) {
handleObj = live[j];
if ( close.selector === handleObj.selector && (!namespace || namespace.test( handleObj.namespace )) ) {
elem = close.elem;
related = null;
if ( handleObj.preType === "mouseenter" || handleObj.preType === "mouseleave" ) {
event.type = handleObj.preType;
related = jQuery( event.relatedTarget ).closest( handleObj.selector )[0];
}
if ( !related || related !== elem ) {
elems.push({ elem: elem, handleObj: handleObj, level: close.level });
}
}
}
}
for ( i = 0, l = elems.length; i < l; i++ ) {
match = elems[i];
if ( maxLevel && match.level > maxLevel ) {
break;
}
event.currentTarget = match.elem;
event.data = match.handleObj.data;
event.handleObj = match.handleObj;
ret = match.handleObj.origHandler.apply( match.elem, arguments );
if ( ret === false || event.isPropagationStopped() ) {
maxLevel = match.level;
if ( ret === false ) {
stop = false;
}
if ( event.isImmediatePropagationStopped() ) {
break;
}
}
}
return stop;
}
function liveConvert( type, selector ) {
return (type && type !== "*" ? type + "." : "") + selector.replace(rperiod, "`").replace(rspace, "&");
}
jQuery.fn[ "blur" ] = function( fn ) {
return fn ? this.bind( "blur", fn ) : this.trigger( "blur" );
};
jQuery.fn[ "focus" ] = function( fn ) {
return fn ? this.bind( "focus", fn ) : this.trigger( "focus" );
};
jQuery.fn[ "focusin" ] = function( fn ) {
return fn ? this.bind( "focusin", fn ) : this.trigger( "focusin" );
};
jQuery.fn[ "focusout" ] = function( fn ) {
return fn ? this.bind( "focusout", fn ) : this.trigger( "focusout" );
};
jQuery.fn[ "load" ] = function( fn ) {
return fn ? this.bind( "load", fn ) : this.trigger( "load" );
};
jQuery.fn[ "resize" ] = function( fn ) {
return fn ? this.bind( "resize", fn ) : this.trigger( "resize" );
};
jQuery.fn[ "scroll" ] = function( fn ) {
return fn ? this.bind( "scroll", fn ) : this.trigger( "scroll" );
};
jQuery.fn[ "unload" ] = function( fn ) {
return fn ? this.bind( "unload", fn ) : this.trigger( "unload" );
};
jQuery.fn[ "click" ] = function( fn ) {
return fn ? this.bind( "click", fn ) : this.trigger( "click" );
};
jQuery.fn[ "dblclick" ] = function( fn ) {
return fn ? this.bind( "dblclick", fn ) : this.trigger( "dblclick" );
};
jQuery.fn[ "mousedown" ] = function( fn ) {
return fn ? this.bind( "mousedown", fn ) : this.trigger( "mousedown" );
};
jQuery.fn[ "mouseup" ] = function( fn ) {
return fn ? this.bind( "mouseup", fn ) : this.trigger( "mouseup" );
};
jQuery.fn[ "mousemove" ] = function( fn ) {
return fn ? this.bind( "mousemove", fn ) : this.trigger( "mousemove" );
};
jQuery.fn[ "mouseover" ] = function( fn ) {
return fn ? this.bind( "mouseover", fn ) : this.trigger( "mouseover" );
};
jQuery.fn[ "mouseout" ] = function( fn ) {
return fn ? this.bind( "mouseout", fn ) : this.trigger( "mouseout" );
};
jQuery.fn[ "mouseenter" ] = function( fn ) {
return fn ? this.bind( "mouseenter", fn ) : this.trigger( "mouseenter" );
};
jQuery.fn[ "mouseleave" ] = function( fn ) {
return fn ? this.bind( "mouseleave", fn ) : this.trigger( "mouseleave" );
};
jQuery.fn[ "change" ] = function( fn ) {
return fn ? this.bind( "change", fn ) : this.trigger( "change" );
};
jQuery.fn[ "select" ] = function( fn ) {
return fn ? this.bind( "select", fn ) : this.trigger( "select" );
};
jQuery.fn[ "submit" ] = function( fn ) {
return fn ? this.bind( "submit", fn ) : this.trigger( "submit" );
};
jQuery.fn[ "keydown" ] = function( fn ) {
return fn ? this.bind( "keydown", fn ) : this.trigger( "keydown" );
};
jQuery.fn[ "keypress" ] = function( fn ) {
return fn ? this.bind( "keypress", fn ) : this.trigger( "keypress" );
};
jQuery.fn[ "keyup" ] = function( fn ) {
return fn ? this.bind( "keyup", fn ) : this.trigger( "keyup" );
};
jQuery.fn[ "error" ] = function( fn ) {
return fn ? this.bind( "error", fn ) : this.trigger( "error" );
};
if ( window.attachEvent && !window.addEventListener ) {
jQuery(window).bind("unload", function() {
for ( var id in jQuery.cache ) {
if ( jQuery.cache[ id ].handle ) {
try {
jQuery.event.remove( jQuery.cache[ id ].handle.elem );
} catch(e) {}
}
}
});
}
(function(){
var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
done = 0,
toString = Object.prototype.toString,
hasDuplicate = false,
baseHasDuplicate = true;
[0, 0].sort(function() {
baseHasDuplicate = false;
return 0;
});
var Sizzle = function( selector, context, results, seed ) {
results = results || [];
context = context || document;
var origContext = context;
if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
return [];
}
if ( !selector || typeof selector !== "string" ) {
return results;
}
var m, set, checkSet, extra, ret, cur, pop, i,
prune = true,
contextXML = Sizzle.isXML( context ),
parts = [],
soFar = selector;
do {
chunker.exec( "" );
m = chunker.exec( soFar );
if ( m ) {
soFar = m[3];
parts.push( m[1] );
if ( m[2] ) {
extra = m[3];
break;
}
}
} while ( m );
if ( parts.length > 1 && origPOS.exec( selector ) ) {
if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
set = posProcess( parts[0] + parts[1], context );
} else {
set = Expr.relative[ parts[0] ] ?
[ context ] :
Sizzle( parts.shift(), context );
while ( parts.length ) {
selector = parts.shift();
if ( Expr.relative[ selector ] ) {
selector += parts.shift();
}
set = posProcess( selector, set );
}
}
} else {
if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {
ret = Sizzle.find( parts.shift(), context, contextXML );
context = ret.expr ?
Sizzle.filter( ret.expr, ret.set )[0] :
ret.set[0];
}
if ( context ) {
ret = seed ?
{ expr: parts.pop(), set: makeArray(seed) } :
Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );
set = ret.expr ?
Sizzle.filter( ret.expr, ret.set ) :
ret.set;
if ( parts.length > 0 ) {
checkSet = makeArray( set );
} else {
prune = false;
}
while ( parts.length ) {
cur = parts.pop();
pop = cur;
if ( !Expr.relative[ cur ] ) {
cur = "";
} else {
pop = parts.pop();
}
if ( pop == null ) {
pop = context;
}
Expr.relative[ cur ]( checkSet, pop, contextXML );
}
} else {
checkSet = parts = [];
}
}
if ( !checkSet ) {
checkSet = set;
}
if ( !checkSet ) {
Sizzle.error( cur || selector );
}
if ( toString.call(checkSet) === "[object Array]" ) {
if ( !prune ) {
results.push.apply( results, checkSet );
} else if ( context && context.nodeType === 1 ) {
for ( i = 0; checkSet[i] != null; i++ ) {
if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
results.push( set[i] );
}
}
} else {
for ( i = 0; checkSet[i] != null; i++ ) {
if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
results.push( set[i] );
}
}
}
} else {
makeArray( checkSet, results );
}
if ( extra ) {
Sizzle( extra, origContext, results, seed );
Sizzle.uniqueSort( results );
}
return results;
};
Sizzle.uniqueSort = function( results ) {
if ( sortOrder ) {
hasDuplicate = baseHasDuplicate;
results.sort( sortOrder );
if ( hasDuplicate ) {
for ( var i = 1; i < results.length; i++ ) {
if ( results[i] === results[ i - 1 ] ) {
results.splice( i--, 1 );
}
}
}
}
return results;
};
Sizzle.matches = function( expr, set ) {
return Sizzle( expr, null, null, set );
};
Sizzle.matchesSelector = function( node, expr ) {
return Sizzle( expr, null, null, [node] ).length > 0;
};
Sizzle.find = function( expr, context, isXML ) {
var set;
if ( !expr ) {
return [];
}
for ( var i = 0, l = Expr.order.length; i < l; i++ ) {
var match,
type = Expr.order[i];
if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
var left = match[1];
match.splice( 1, 1 );
if ( left.substr( left.length - 1 ) !== "\\" ) {
match[1] = (match[1] || "").replace(/\\/g, "");
set = Expr.find[ type ]( match, context, isXML );
if ( set != null ) {
expr = expr.replace( Expr.match[ type ], "" );
break;
}
}
}
}
if ( !set ) {
set = context.getElementsByTagName( "*" );
}
return { set: set, expr: expr };
};
Sizzle.filter = function( expr, set, inplace, not ) {
var match, anyFound,
old = expr,
result = [],
curLoop = set,
isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );
while ( expr && set.length ) {
for ( var type in Expr.filter ) {
if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
var found, item,
filter = Expr.filter[ type ],
left = match[1];
anyFound = false;
match.splice(1,1);
if ( left.substr( left.length - 1 ) === "\\" ) {
continue;
}
if ( curLoop === result ) {
result = [];
}
if ( Expr.preFilter[ type ] ) {
match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );
if ( !match ) {
anyFound = found = true;
} else if ( match === true ) {
continue;
}
}
if ( match ) {
for ( var i = 0; (item = curLoop[i]) != null; i++ ) {
if ( item ) {
found = filter( item, match, i, curLoop );
var pass = not ^ !!found;
if ( inplace && found != null ) {
if ( pass ) {
anyFound = true;
} else {
curLoop[i] = false;
}
} else if ( pass ) {
result.push( item );
anyFound = true;
}
}
}
}
if ( found !== undefined ) {
if ( !inplace ) {
curLoop = result;
}
expr = expr.replace( Expr.match[ type ], "" );
if ( !anyFound ) {
return [];
}
break;
}
}
}
if ( expr === old ) {
if ( anyFound == null ) {
Sizzle.error( expr );
} else {
break;
}
}
old = expr;
}
return curLoop;
};
Sizzle.error = function( msg ) {
throw "Syntax error, unrecognized expression: " + msg;
};
var Expr = Sizzle.selectors = {
order: [ "ID", "NAME", "TAG" ],
match: {
ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+\-]*)\))?/,
POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
},
leftMatch: {},
attrMap: {
"class": "className",
"for": "htmlFor"
},
attrHandle: {
href: function( elem ) {
return elem.getAttribute( "href" );
}
},
relative: {
"+": function(checkSet, part){
var isPartStr = typeof part === "string",
isTag = isPartStr && !/\W/.test( part ),
isPartStrNotTag = isPartStr && !isTag;
if ( isTag ) {
part = part.toLowerCase();
}
for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
if ( (elem = checkSet[i]) ) {
while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}
checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
elem || false :
elem === part;
}
}
if ( isPartStrNotTag ) {
Sizzle.filter( part, checkSet, true );
}
},
">": function( checkSet, part ) {
var elem,
isPartStr = typeof part === "string",
i = 0,
l = checkSet.length;
if ( isPartStr && !/\W/.test( part ) ) {
part = part.toLowerCase();
for ( ; i < l; i++ ) {
elem = checkSet[i];
if ( elem ) {
var parent = elem.parentNode;
checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
}
}
} else {
for ( ; i < l; i++ ) {
elem = checkSet[i];
if ( elem ) {
checkSet[i] = isPartStr ?
elem.parentNode :
elem.parentNode === part;
}
}
if ( isPartStr ) {
Sizzle.filter( part, checkSet, true );
}
}
},
"": function(checkSet, part, isXML){
var nodeCheck,
doneName = done++,
checkFn = dirCheck;
if ( typeof part === "string" && !/\W/.test(part) ) {
part = part.toLowerCase();
nodeCheck = part;
checkFn = dirNodeCheck;
}
checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
},
"~": function( checkSet, part, isXML ) {
var nodeCheck,
doneName = done++,
checkFn = dirCheck;
if ( typeof part === "string" && !/\W/.test( part ) ) {
part = part.toLowerCase();
nodeCheck = part;
checkFn = dirNodeCheck;
}
checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
}
},
find: {
ID: function( match, context, isXML ) {
if ( typeof context.getElementById !== "undefined" && !isXML ) {
var m = context.getElementById(match[1]);
return m && m.parentNode ? [m] : [];
}
},
NAME: function( match, context ) {
if ( typeof context.getElementsByName !== "undefined" ) {
var ret = [],
results = context.getElementsByName( match[1] );
for ( var i = 0, l = results.length; i < l; i++ ) {
if ( results[i].getAttribute("name") === match[1] ) {
ret.push( results[i] );
}
}
return ret.length === 0 ? null : ret;
}
},
TAG: function( match, context ) {
return context.getElementsByTagName( match[1] );
}
},
preFilter: {
CLASS: function( match, curLoop, inplace, result, not, isXML ) {
match = " " + match[1].replace(/\\/g, "") + " ";
if ( isXML ) {
return match;
}
for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
if ( elem ) {
if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n]/g, " ").indexOf(match) >= 0) ) {
if ( !inplace ) {
result.push( elem );
}
} else if ( inplace ) {
curLoop[i] = false;
}
}
}
return false;
},
ID: function( match ) {
return match[1].replace(/\\/g, "");
},
TAG: function( match, curLoop ) {
return match[1].toLowerCase();
},
CHILD: function( match ) {
if ( match[1] === "nth" ) {
var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(
match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);
match[2] = (test[1] + (test[2] || 1)) - 0;
match[3] = test[3] - 0;
}
match[0] = done++;
return match;
},
ATTR: function( match, curLoop, inplace, result, not, isXML ) {
var name = match[1].replace(/\\/g, "");
if ( !isXML && Expr.attrMap[name] ) {
match[1] = Expr.attrMap[name];
}
if ( match[2] === "~=" ) {
match[4] = " " + match[4] + " ";
}
return match;
},
PSEUDO: function( match, curLoop, inplace, result, not ) {
if ( match[1] === "not" ) {
if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
match[3] = Sizzle(match[3], null, null, curLoop);
} else {
var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
if ( !inplace ) {
result.push.apply( result, ret );
}
return false;
}
} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
return true;
}
return match;
},
POS: function( match ) {
match.unshift( true );
return match;
}
},
filters: {
enabled: function( elem ) {
return elem.disabled === false && elem.type !== "hidden";
},
disabled: function( elem ) {
return elem.disabled === true;
},
checked: function( elem ) {
return elem.checked === true;
},
selected: function( elem ) {
elem.parentNode.selectedIndex;
return elem.selected === true;
},
parent: function( elem ) {
return !!elem.firstChild;
},
empty: function( elem ) {
return !elem.firstChild;
},
has: function( elem, i, match ) {
return !!Sizzle( match[3], elem ).length;
},
header: function( elem ) {
return (/h\d/i).test( elem.nodeName );
},
text: function( elem ) {
return "text" === elem.type;
},
radio: function( elem ) {
return "radio" === elem.type;
},
checkbox: function( elem ) {
return "checkbox" === elem.type;
},
file: function( elem ) {
return "file" === elem.type;
},
password: function( elem ) {
return "password" === elem.type;
},
submit: function( elem ) {
return "submit" === elem.type;
},
image: function( elem ) {
return "image" === elem.type;
},
reset: function( elem ) {
return "reset" === elem.type;
},
button: function( elem ) {
return "button" === elem.type || elem.nodeName.toLowerCase() === "button";
},
input: function( elem ) {
return (/input|select|textarea|button/i).test( elem.nodeName );
}
},
setFilters: {
first: function( elem, i ) {
return i === 0;
},
last: function( elem, i, match, array ) {
return i === array.length - 1;
},
even: function( elem, i ) {
return i % 2 === 0;
},
odd: function( elem, i ) {
return i % 2 === 1;
},
lt: function( elem, i, match ) {
return i < match[3] - 0;
},
gt: function( elem, i, match ) {
return i > match[3] - 0;
},
nth: function( elem, i, match ) {
return match[3] - 0 === i;
},
eq: function( elem, i, match ) {
return match[3] - 0 === i;
}
},
filter: {
PSEUDO: function( elem, match, i, array ) {
var name = match[1],
filter = Expr.filters[ name ];
if ( filter ) {
return filter( elem, i, match, array );
} else if ( name === "contains" ) {
return (elem.textContent || elem.innerText || Sizzle.getText([ elem ]) || "").indexOf(match[3]) >= 0;
} else if ( name === "not" ) {
var not = match[3];
for ( var j = 0, l = not.length; j < l; j++ ) {
if ( not[j] === elem ) {
return false;
}
}
return true;
} else {
Sizzle.error( "Syntax error, unrecognized expression: " + name );
}
},
CHILD: function( elem, match ) {
var type = match[1],
node = elem;
switch ( type ) {
case "only":
case "first":
while ( (node = node.previousSibling) )	 {
if ( node.nodeType === 1 ) {
return false;
}
}
if ( type === "first" ) {
return true;
}
node = elem;
case "last":
while ( (node = node.nextSibling) )	 {
if ( node.nodeType === 1 ) {
return false;
}
}
return true;
case "nth":
var first = match[2],
last = match[3];
if ( first === 1 && last === 0 ) {
return true;
}
var doneName = match[0],
parent = elem.parentNode;
if ( parent && (parent.sizcache !== doneName || !elem.nodeIndex) ) {
var count = 0;
for ( node = parent.firstChild; node; node = node.nextSibling ) {
if ( node.nodeType === 1 ) {
node.nodeIndex = ++count;
}
}
parent.sizcache = doneName;
}
var diff = elem.nodeIndex - last;
if ( first === 0 ) {
return diff === 0;
} else {
return ( diff % first === 0 && diff / first >= 0 );
}
}
},
ID: function( elem, match ) {
return elem.nodeType === 1 && elem.getAttribute("id") === match;
},
TAG: function( elem, match ) {
return (match === "*" && elem.nodeType === 1) || elem.nodeName.toLowerCase() === match;
},
CLASS: function( elem, match ) {
return (" " + (elem.className || elem.getAttribute("class")) + " ")
.indexOf( match ) > -1;
},
ATTR: function( elem, match ) {
var name = match[1],
result = Expr.attrHandle[ name ] ?
Expr.attrHandle[ name ]( elem ) :
elem[ name ] != null ?
elem[ name ] :
elem.getAttribute( name ),
value = result + "",
type = match[2],
check = match[4];
return result == null ?
type === "!=" :
type === "=" ?
value === check :
type === "*=" ?
value.indexOf(check) >= 0 :
type === "~=" ?
(" " + value + " ").indexOf(check) >= 0 :
!check ?
value && result !== false :
type === "!=" ?
value !== check :
type === "^=" ?
value.indexOf(check) === 0 :
type === "$=" ?
value.substr(value.length - check.length) === check :
type === "|=" ?
value === check || value.substr(0, check.length + 1) === check + "-" :
false;
},
POS: function( elem, match, i, array ) {
var name = match[2],
filter = Expr.setFilters[ name ];
if ( filter ) {
return filter( elem, i, match, array );
}
}
}
};
var origPOS = Expr.match.POS,
fescape = function(all, num){
return "\\" + (num - 0 + 1);
};
for ( var type in Expr.match ) {
Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}
var makeArray = function( array, results ) {
array = Array.prototype.slice.call( array, 0 );
if ( results ) {
results.push.apply( results, array );
return results;
}
return array;
};
try {
Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;
} catch( e ) {
makeArray = function( array, results ) {
var i = 0,
ret = results || [];
if ( toString.call(array) === "[object Array]" ) {
Array.prototype.push.apply( ret, array );
} else {
if ( typeof array.length === "number" ) {
for ( var l = array.length; i < l; i++ ) {
ret.push( array[i] );
}
} else {
for ( ; array[i]; i++ ) {
ret.push( array[i] );
}
}
}
return ret;
};
}
var sortOrder, siblingCheck;
if ( document.documentElement.compareDocumentPosition ) {
sortOrder = function( a, b ) {
if ( a === b ) {
hasDuplicate = true;
return 0;
}
if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
return a.compareDocumentPosition ? -1 : 1;
}
return a.compareDocumentPosition(b) & 4 ? -1 : 1;
};
} else {
sortOrder = function( a, b ) {
var al, bl,
ap = [],
bp = [],
aup = a.parentNode,
bup = b.parentNode,
cur = aup;
if ( a === b ) {
hasDuplicate = true;
return 0;
} else if ( aup === bup ) {
return siblingCheck( a, b );
} else if ( !aup ) {
return -1;
} else if ( !bup ) {
return 1;
}
while ( cur ) {
ap.unshift( cur );
cur = cur.parentNode;
}
cur = bup;
while ( cur ) {
bp.unshift( cur );
cur = cur.parentNode;
}
al = ap.length;
bl = bp.length;
for ( var i = 0; i < al && i < bl; i++ ) {
if ( ap[i] !== bp[i] ) {
return siblingCheck( ap[i], bp[i] );
}
}
return i === al ?
siblingCheck( a, bp[i], -1 ) :
siblingCheck( ap[i], b, 1 );
};
siblingCheck = function( a, b, ret ) {
if ( a === b ) {
return ret;
}
var cur = a.nextSibling;
while ( cur ) {
if ( cur === b ) {
return -1;
}
cur = cur.nextSibling;
}
return 1;
};
}
Sizzle.getText = function( elems ) {
var ret = "", elem;
for ( var i = 0; elems[i]; i++ ) {
elem = elems[i];
if ( elem.nodeType === 3 || elem.nodeType === 4 ) {
ret += elem.nodeValue;
} else if ( elem.nodeType !== 8 ) {
ret += Sizzle.getText( elem.childNodes );
}
}
return ret;
};
(function(){
Expr.find.ID = function( match, context, isXML ) {
if ( typeof context.getElementById !== "undefined" && !isXML ) {
var m = context.getElementById(match[1]);
return m ?
m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
[m] :
undefined :
[];
}
};
Expr.filter.ID = function( elem, match ) {
var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
return elem.nodeType === 1 && node && node.nodeValue === match;
};
root = form = null;
})();
(function(){
Expr.find.TAG = function( match, context ) {
var results = context.getElementsByTagName( match[1] );
if ( match[1] === "*" ) {
var tmp = [];
for ( var i = 0; results[i]; i++ ) {
if ( results[i].nodeType === 1 ) {
tmp.push( results[i] );
}
}
results = tmp;
}
return results;
};
div = null;
})();
if ( document.querySelectorAll ) {
(function(){
var oldSizzle = Sizzle,
div = document.createElement("div"),
id = "__sizzle__";
div.innerHTML = "<p class='TEST'></p>";
if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
return;
}
Sizzle = function( query, context, extra, seed ) {
context = context || document;
query = query.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
if ( !seed && !Sizzle.isXML(context) ) {
if ( context.nodeType === 9 ) {
try {
return makeArray( context.querySelectorAll(query), extra );
} catch(qsaError) {}
} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
var old = context.getAttribute( "id" ),
nid = old || id;
if ( !old ) {
context.setAttribute( "id", nid );
}
try {
return makeArray( context.querySelectorAll( "#" + nid + " " + query ), extra );
} catch(pseudoError) {
} finally {
if ( !old ) {
context.removeAttribute( "id" );
}
}
}
}
return oldSizzle(query, context, extra, seed);
};
for ( var prop in oldSizzle ) {
Sizzle[ prop ] = oldSizzle[ prop ];
}
div = null;
})();
}
(function(){
var html = document.documentElement,
matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector,
pseudoWorks = false;
try {
matches.call( document.documentElement, "[test!='']:sizzle" );
} catch( pseudoError ) {
pseudoWorks = true;
}
if ( matches ) {
Sizzle.matchesSelector = function( node, expr ) {
expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
if ( !Sizzle.isXML( node ) ) {
try {
if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
return matches.call( node, expr );
}
} catch(e) {}
}
return Sizzle(expr, null, null, [node]).length > 0;
};
}
})();
(function(){
var div = document.createElement("div");
div.innerHTML = "<div class='test e'></div><div class='test'></div>";
if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
return;
}
div.lastChild.className = "e";
if ( div.getElementsByClassName("e").length === 1 ) {
return;
}
Expr.order.splice(1, 0, "CLASS");
Expr.find.CLASS = function( match, context, isXML ) {
if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
return context.getElementsByClassName(match[1]);
}
};
div = null;
})();
function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
for ( var i = 0, l = checkSet.length; i < l; i++ ) {
var elem = checkSet[i];
if ( elem ) {
var match = false;
elem = elem[dir];
while ( elem ) {
if ( elem.sizcache === doneName ) {
match = checkSet[elem.sizset];
break;
}
if ( elem.nodeType === 1 && !isXML ){
elem.sizcache = doneName;
elem.sizset = i;
}
if ( elem.nodeName.toLowerCase() === cur ) {
match = elem;
break;
}
elem = elem[dir];
}
checkSet[i] = match;
}
}
}
function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
for ( var i = 0, l = checkSet.length; i < l; i++ ) {
var elem = checkSet[i];
if ( elem ) {
var match = false;
elem = elem[dir];
while ( elem ) {
if ( elem.sizcache === doneName ) {
match = checkSet[elem.sizset];
break;
}
if ( elem.nodeType === 1 ) {
if ( !isXML ) {
elem.sizcache = doneName;
elem.sizset = i;
}
if ( typeof cur !== "string" ) {
if ( elem === cur ) {
match = true;
break;
}
} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
match = elem;
break;
}
}
elem = elem[dir];
}
checkSet[i] = match;
}
}
}
if ( document.documentElement.contains ) {
Sizzle.contains = function( a, b ) {
return a !== b && (a.contains ? a.contains(b) : true);
};
} else if ( document.documentElement.compareDocumentPosition ) {
Sizzle.contains = function( a, b ) {
return !!(a.compareDocumentPosition(b) & 16);
};
} else {
Sizzle.contains = function() {
return false;
};
}
Sizzle.isXML = function( elem ) {
var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
return documentElement ? documentElement.nodeName !== "HTML" : false;
};
var posProcess = function( selector, context ) {
var match,
tmpSet = [],
later = "",
root = context.nodeType ? [context] : context;
while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
later += match[0];
selector = selector.replace( Expr.match.PSEUDO, "" );
}
selector = Expr.relative[selector] ? selector + "*" : selector;
for ( var i = 0, l = root.length; i < l; i++ ) {
Sizzle( selector, root[i], tmpSet );
}
return Sizzle.filter( later, tmpSet );
};
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.filters;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
})();
var runtil = /Until$/,
rparentsprev = /^(?:parents|prevUntil|prevAll)/,
rmultiselector = /,/,
isSimple = /^.[^:#\[\.,]*$/,
slice = Array.prototype.slice,
POS = jQuery.expr.match.POS;
jQuery.fn.extend({
find: function( selector ) {
var ret = this.pushStack( "", "find", selector ),
length = 0;
for ( var i = 0, l = this.length; i < l; i++ ) {
length = ret.length;
jQuery.find( selector, this[i], ret );
if ( i > 0 ) {
for ( var n = length; n < ret.length; n++ ) {
for ( var r = 0; r < length; r++ ) {
if ( ret[r] === ret[n] ) {
ret.splice(n--, 1);
break;
}
}
}
}
}
return ret;
},
has: function( target ) {
var targets = jQuery( target );
return this.filter(function() {
for ( var i = 0, l = targets.length; i < l; i++ ) {
if ( jQuery.contains( this, targets[i] ) ) {
return true;
}
}
});
},
not: function( selector ) {
return this.pushStack( winnow(this, selector, false), "not", selector);
},
filter: function( selector ) {
return this.pushStack( winnow(this, selector, true), "filter", selector );
},
is: function( selector ) {
return !!selector && jQuery.filter( selector, this ).length > 0;
},
closest: function( selectors, context ) {
var ret = [], i, l, cur = this[0];
if ( jQuery.isArray( selectors ) ) {
var match, selector,
matches = {},
level = 1;
if ( cur && selectors.length ) {
for ( i = 0, l = selectors.length; i < l; i++ ) {
selector = selectors[i];
if ( !matches[selector] ) {
matches[selector] = jQuery.expr.match.POS.test( selector ) ?
jQuery( selector, context || this.context ) :
selector;
}
}
while ( cur && cur.ownerDocument && cur !== context ) {
for ( selector in matches ) {
match = matches[selector];
if ( match.jquery ? match.index(cur) > -1 : jQuery(cur).is(match) ) {
ret.push({ selector: selector, elem: cur, level: level });
}
}
cur = cur.parentNode;
level++;
}
}
return ret;
}
var pos = POS.test( selectors ) ?
jQuery( selectors, context || this.context ) : null;
for ( i = 0, l = this.length; i < l; i++ ) {
cur = this[i];
while ( cur ) {
if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
ret.push( cur );
break;
} else {
cur = cur.parentNode;
if ( !cur || !cur.ownerDocument || cur === context ) {
break;
}
}
}
}
ret = ret.length > 1 ? jQuery.unique(ret) : ret;
return this.pushStack( ret, "closest", selectors );
},
index: function( elem ) {
if ( !elem || typeof elem === "string" ) {
return jQuery.inArray( this[0],
elem ? jQuery( elem ) : this.parent().children() );
}
return jQuery.inArray(
elem.jquery ? elem[0] : elem, this );
},
add: function( selector, context ) {
var set = typeof selector === "string" ?
jQuery( selector, context || this.context ) :
jQuery.makeArray( selector ),
all = jQuery.merge( this.get(), set );
return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
all :
jQuery.unique( all ) );
},
andSelf: function() {
return this.add( this.prevObject );
}
});
function isDisconnected( node ) {
return !node || !node.parentNode || node.parentNode.nodeType === 11;
}
jQuery.fn.parents = function (until, selector) {
return jQuery.dir(elem, "parentNode");
};
jQuery.fn.parentsUntil = function (until, selector) {
return jQuery.dir(elem, "parentNode", until);
};
jQuery.each({
parent: function( elem ) {
var parent = elem.parentNode;
return parent && parent.nodeType !== 11 ? parent : null;
},
next: function( elem ) {
return jQuery.nth( elem, 2, "nextSibling" );
},
prev: function( elem ) {
return jQuery.nth( elem, 2, "previousSibling" );
},
nextAll: function( elem ) {
return jQuery.dir( elem, "nextSibling" );
},
prevAll: function( elem ) {
return jQuery.dir( elem, "previousSibling" );
},
nextUntil: function( elem, i, until ) {
return jQuery.dir( elem, "nextSibling", until );
},
prevUntil: function( elem, i, until ) {
return jQuery.dir( elem, "previousSibling", until );
},
siblings: function( elem ) {
return jQuery.sibling( elem.parentNode.firstChild, elem );
},
children: function( elem ) {
return jQuery.sibling( elem.firstChild );
},
contents: function( elem ) {
return jQuery.nodeName( elem, "iframe" ) ?
elem.contentDocument || elem.contentWindow.document :
jQuery.makeArray( elem.childNodes );
}
}, function( name, fn ) {
jQuery.fn[ name ] = function( until, selector ) {
var ret = jQuery.map( this, fn, until );
if ( !runtil.test( name ) ) {
selector = until;
}
if ( selector && typeof selector === "string" ) {
ret = jQuery.filter( selector, ret );
}
ret = this.length > 1 ? jQuery.unique( ret ) : ret;
if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
ret = ret.reverse();
}
return this.pushStack( ret, name, slice.call(arguments).join(",") );
};
});
jQuery.extend({
filter: function( expr, elems, not ) {
if ( not ) {
expr = ":not(" + expr + ")";
}
return elems.length === 1 ?
jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
jQuery.find.matches(expr, elems);
},
dir: function( elem, dir, until ) {
var matched = [],
cur = elem[ dir ];
while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
if ( cur.nodeType === 1 ) {
matched.push( cur );
}
cur = cur[dir];
}
return matched;
},
nth: function( cur, result, dir, elem ) {
result = result || 1;
var num = 0;
for ( ; cur; cur = cur[dir] ) {
if ( cur.nodeType === 1 && ++num === result ) {
break;
}
}
return cur;
},
sibling: function( n, elem ) {
var r = [];
for ( ; n; n = n.nextSibling ) {
if ( n.nodeType === 1 && n !== elem ) {
r.push( n );
}
}
return r;
}
});
function winnow( elements, qualifier, keep ) {
if ( jQuery.isFunction( qualifier ) ) {
return jQuery.grep(elements, function( elem, i ) {
var retVal = !!qualifier.call( elem, i, elem );
return retVal === keep;
});
} else if ( qualifier.nodeType ) {
return jQuery.grep(elements, function( elem, i ) {
return (elem === qualifier) === keep;
});
} else if ( typeof qualifier === "string" ) {
var filtered = jQuery.grep(elements, function( elem ) {
return elem.nodeType === 1;
});
if ( isSimple.test( qualifier ) ) {
return jQuery.filter(qualifier, filtered, !keep);
} else {
qualifier = jQuery.filter( qualifier, filtered );
}
}
return jQuery.grep(elements, function( elem, i ) {
return (jQuery.inArray( elem, qualifier ) >= 0) === keep;
});
}
var rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
rleadingWhitespace = /^\s+/,
rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
rtagName = /<([\w:]+)/,
rtbody = /<tbody/i,
rhtml = /<|&#?\w+;/,
rnocache = /<(?:script|object|embed|option|style)/i,
rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
raction = /\=([^="'>\s]+\/)>/g,
wrapMap = {
option: [ 1, "<select multiple='multiple'>", "</select>" ],
legend: [ 1, "<fieldset>", "</fieldset>" ],
thead: [ 1, "<table>", "</table>" ],
tr: [ 2, "<table><tbody>", "</tbody></table>" ],
td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
area: [ 1, "<map>", "</map>" ],
_default: [ 0, "", "" ]
};
wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;
if ( !jQuery.support.htmlSerialize ) {
wrapMap._default = [ 1, "div<div>", "</div>" ];
}
jQuery.fn.extend({
text: function( text ) {
if ( jQuery.isFunction(text) ) {
return this.each(function(i) {
var self = jQuery( this );
self.text( text.call(this, i, self.text()) );
});
}
if ( typeof text !== "object" && text !== undefined ) {
return this.empty().append( (this[0] && this[0].ownerDocument || document).createTextNode( text ) );
}
return jQuery.text( this );
},
wrapAll: function( html ) {
if ( jQuery.isFunction( html ) ) {
return this.each(function(i) {
jQuery(this).wrapAll( html.call(this, i) );
});
}
if ( this[0] ) {
var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);
if ( this[0].parentNode ) {
wrap.insertBefore( this[0] );
}
wrap.map(function() {
var elem = this;
while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
elem = elem.firstChild;
}
return elem;
}).append(this);
}
return this;
},
wrapInner: function( html ) {
if ( jQuery.isFunction( html ) ) {
return this.each(function(i) {
jQuery(this).wrapInner( html.call(this, i) );
});
}
return this.each(function() {
var self = jQuery( this ),
contents = self.contents();
if ( contents.length ) {
contents.wrapAll( html );
} else {
self.append( html );
}
});
},
wrap: function( html ) {
return this.each(function() {
jQuery( this ).wrapAll( html );
});
},
unwrap: function() {
return this.parent().each(function() {
if ( !jQuery.nodeName( this, "body" ) ) {
jQuery( this ).replaceWith( this.childNodes );
}
}).end();
},
append: function() {
return this.domManip(arguments, true, function( elem ) {
if ( this.nodeType === 1 ) {
this.appendChild( elem );
}
});
},
prepend: function() {
return this.domManip(arguments, true, function( elem ) {
if ( this.nodeType === 1 ) {
this.insertBefore( elem, this.firstChild );
}
});
},
before: function() {
if ( this[0] && this[0].parentNode ) {
return this.domManip(arguments, false, function( elem ) {
this.parentNode.insertBefore( elem, this );
});
} else if ( arguments.length ) {
var set = jQuery(arguments[0]);
set.push.apply( set, this.toArray() );
return this.pushStack( set, "before", arguments );
}
},
after: function() {
if ( this[0] && this[0].parentNode ) {
return this.domManip(arguments, false, function( elem ) {
this.parentNode.insertBefore( elem, this.nextSibling );
});
} else if ( arguments.length ) {
var set = this.pushStack( this, "after", arguments );
set.push.apply( set, jQuery(arguments[0]).toArray() );
return set;
}
},
remove: function( selector, keepData ) {
for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
if ( !keepData && elem.nodeType === 1 ) {
jQuery.cleanData( elem.getElementsByTagName("*") );
jQuery.cleanData( [ elem ] );
}
if ( elem.parentNode ) {
elem.parentNode.removeChild( elem );
}
}
}
return this;
},
empty: function() {
for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
if ( elem.nodeType === 1 ) {
jQuery.cleanData( elem.getElementsByTagName("*") );
}
while ( elem.firstChild ) {
elem.removeChild( elem.firstChild );
}
}
return this;
},
clone: function( events ) {
var ret = this.map(function() {
if ( !jQuery.support.noCloneEvent && !jQuery.isXMLDoc(this) ) {
var html = this.outerHTML,
ownerDocument = this.ownerDocument;
if ( !html ) {
var div = ownerDocument.createElement("div");
div.appendChild( this.cloneNode(true) );
html = div.innerHTML;
}
return jQuery.clean([html.replace(rinlinejQuery, "")
.replace(raction, '="$1">')
.replace(rleadingWhitespace, "")], ownerDocument)[0];
} else {
return this.cloneNode(true);
}
});
if ( events === true ) {
cloneCopyEvent( this, ret );
cloneCopyEvent( this.find("*"), ret.find("*") );
}
return ret;
},
html: function( value ) {
if ( value === undefined ) {
return this[0] && this[0].nodeType === 1 ?
this[0].innerHTML.replace(rinlinejQuery, "") :
null;
} else if ( typeof value === "string" && !rnocache.test( value ) &&
(jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value )) &&
!wrapMap[ (rtagName.exec( value ) || ["", ""])[1].toLowerCase() ] ) {
value = value.replace(rxhtmlTag, "<$1></$2>");
try {
for ( var i = 0, l = this.length; i < l; i++ ) {
if ( this[i].nodeType === 1 ) {
jQuery.cleanData( this[i].getElementsByTagName("*") );
this[i].innerHTML = value;
}
}
} catch(e) {
this.empty().append( value );
}
} else if ( jQuery.isFunction( value ) ) {
this.each(function(i){
var self = jQuery( this );
self.html( value.call(this, i, self.html()) );
});
} else {
this.empty().append( value );
}
return this;
},
replaceWith: function( value ) {
if ( this[0] && this[0].parentNode ) {
if ( jQuery.isFunction( value ) ) {
return this.each(function(i) {
var self = jQuery(this), old = self.html();
self.replaceWith( value.call( this, i, old ) );
});
}
if ( typeof value !== "string" ) {
value = jQuery( value ).detach();
}
return this.each(function() {
var next = this.nextSibling,
parent = this.parentNode;
jQuery( this ).remove();
if ( next ) {
jQuery(next).before( value );
} else {
jQuery(parent).append( value );
}
});
} else {
return this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value );
}
},
detach: function( selector ) {
return this.remove( selector, true );
},
domManip: function( args, table, callback ) {
var results, first, fragment, parent,
value = args[0],
scripts = [];
if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
return this.each(function() {
jQuery(this).domManip( args, table, callback, true );
});
}
if ( jQuery.isFunction(value) ) {
return this.each(function(i) {
var self = jQuery(this);
args[0] = value.call(this, i, table ? self.html() : undefined);
self.domManip( args, table, callback );
});
}
if ( this[0] ) {
parent = value && value.parentNode;
if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
results = { fragment: parent };
} else {
results = jQuery.buildFragment( args, this, scripts );
}
fragment = results.fragment;
if ( fragment.childNodes.length === 1 ) {
first = fragment = fragment.firstChild;
} else {
first = fragment.firstChild;
}
if ( first ) {
table = table && jQuery.nodeName( first, "tr" );
for ( var i = 0, l = this.length; i < l; i++ ) {
callback.call(
table ?
root(this[i], first) :
this[i],
i > 0 || results.cacheable || this.length > 1  ?
fragment.cloneNode(true) :
fragment
);
}
}
if ( scripts.length ) {
jQuery.each( scripts, evalScript );
}
}
return this;
}
});
function root( elem, cur ) {
return jQuery.nodeName(elem, "table") ?
(elem.getElementsByTagName("tbody")[0] ||
elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
elem;
}
function cloneCopyEvent(orig, ret) {
var i = 0;
ret.each(function() {
if ( this.nodeName !== (orig[i] && orig[i].nodeName) ) {
return;
}
var oldData = jQuery.data( orig[i++] ),
curData = jQuery.data( this, oldData ),
events = oldData && oldData.events;
if ( events ) {
delete curData.handle;
curData.events = {};
for ( var type in events ) {
for ( var handler in events[ type ] ) {
jQuery.event.add( this, type, events[ type ][ handler ], events[ type ][ handler ].data );
}
}
}
});
}
jQuery.buildFragment = function( args, nodes, scripts ) {
var fragment, cacheable, cacheresults,
doc = (nodes && nodes[0] ? nodes[0].ownerDocument || nodes[0] : document);
if ( args.length === 1 && typeof args[0] === "string" && args[0].length < 512 && doc === document &&
!rnocache.test( args[0] ) && (jQuery.support.checkClone || !rchecked.test( args[0] )) ) {
cacheable = true;
cacheresults = jQuery.fragments[ args[0] ];
if ( cacheresults ) {
if ( cacheresults !== 1 ) {
fragment = cacheresults;
}
}
}
if ( !fragment ) {
fragment = doc.createDocumentFragment();
jQuery.clean( args, doc, fragment, scripts );
}
if ( cacheable ) {
jQuery.fragments[ args[0] ] = cacheresults ? fragment : 1;
}
return { fragment: fragment, cacheable: cacheable };
};
jQuery.fragments = {};
jQuery.fn[ "appendTo" ] = function( selector ) {
var ret = [], insert = jQuery( selector );
for ( var i = 0, l = insert.length; i < l; i++ ) {
var elems = (i > 0 ? this.clone(true) : this).get();
jQuery.fn[ "append" ].apply( jQuery(insert[i]), elems );
ret = ret.concat( elems );
}
return this.pushStack( ret, "appendTo", insert.selector );
};
jQuery.fn[ "prependTo" ] = function( selector ) {
var ret = [], insert = jQuery( selector );
for ( var i = 0, l = insert.length; i < l; i++ ) {
var elems = (i > 0 ? this.clone(true) : this).get();
jQuery.fn[ "prepend" ].apply( jQuery(insert[i]), elems );
ret = ret.concat( elems );
}
return this.pushStack( ret, "prependTo", insert.selector );
};
jQuery.fn[ "insertBefore" ] = function( selector ) {
var ret = [], insert = jQuery( selector );
for ( var i = 0, l = insert.length; i < l; i++ ) {
var elems = (i > 0 ? this.clone(true) : this).get();
jQuery.fn[ "before" ].apply( jQuery(insert[i]), elems );
ret = ret.concat( elems );
}
return this.pushStack( ret, "insertBefore", insert.selector );
};
jQuery.fn[ "insertAfter" ] = function( selector ) {
var ret = [], insert = jQuery( selector );
for ( var i = 0, l = insert.length; i < l; i++ ) {
var elems = (i > 0 ? this.clone(true) : this).get();
jQuery.fn[ "after" ].apply( jQuery(insert[i]), elems );
ret = ret.concat( elems );
}
return this.pushStack( ret, "insertAfter", insert.selector );
};
jQuery.fn[ "replaceAll" ] = function( selector ) {
var ret = [], insert = jQuery( selector );
for ( var i = 0, l = insert.length; i < l; i++ ) {
var elems = (i > 0 ? this.clone(true) : this).get();
jQuery.fn[ "replaceWith" ].apply( jQuery(insert[i]), elems );
ret = ret.concat( elems );
}
return this.pushStack( ret, "replaceAll", insert.selector );
};
jQuery.each({
remove: function( selector, keepData ) {
if ( !selector || jQuery.filter( selector, [ this ] ).length ) {
if ( !keepData && this.nodeType === 1 ) {
jQuery.cleanData( this.getElementsByTagName("*") );
jQuery.cleanData( [ this ] );
}
if ( this.parentNode ) {
this.parentNode.removeChild( this );
}
}
},
empty: function() {
if ( this.nodeType === 1 ) {
jQuery.cleanData( this.getElementsByTagName("*") );
}
while ( this.firstChild ) {
this.removeChild( this.firstChild );
}
}
}, function( name, fn ) {
jQuery.fn[ name ] = function() {
return this.each( fn, arguments );
};
});
jQuery.extend({
clean: function( elems, context, fragment, scripts ) {
context = context || document;
if ( typeof context.createElement === "undefined" ) {
context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
}
var ret = [];
for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
if ( typeof elem === "number" ) {
elem += "";
}
if ( !elem ) {
continue;
}
if ( typeof elem === "string" && !rhtml.test( elem ) ) {
elem = context.createTextNode( elem );
} else if ( typeof elem === "string" ) {
elem = elem.replace(rxhtmlTag, "<$1></$2>");
var tag = (rtagName.exec( elem ) || ["", ""])[1].toLowerCase(),
wrap = wrapMap[ tag ] || wrapMap._default,
depth = wrap[0],
div = context.createElement("div");
div.innerHTML = wrap[1] + elem + wrap[2];
while ( depth-- ) {
div = div.lastChild;
}
if ( !jQuery.support.tbody ) {
var hasBody = rtbody.test(elem),
tbody = tag === "table" && !hasBody ?
div.firstChild && div.firstChild.childNodes :
wrap[1] === "<table>" && !hasBody ?
div.childNodes :
[];
for ( var j = tbody.length - 1; j >= 0 ; --j ) {
if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
tbody[ j ].parentNode.removeChild( tbody[ j ] );
}
}
}
if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
}
elem = div.childNodes;
}
if ( elem.nodeType ) {
ret.push( elem );
} else {
ret = jQuery.merge( ret, elem );
}
}
if ( fragment ) {
for ( i = 0; ret[i]; i++ ) {
if ( scripts && jQuery.nodeName( ret[i], "script" ) && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript") ) {
scripts.push( ret[i].parentNode ? ret[i].parentNode.removeChild( ret[i] ) : ret[i] );
} else {
if ( ret[i].nodeType === 1 ) {
ret.splice.apply( ret, [i + 1, 0].concat(jQuery.makeArray(ret[i].getElementsByTagName("script"))) );
}
fragment.appendChild( ret[i] );
}
}
}
return ret;
},
cleanData: function( elems ) {
var data, id, cache = jQuery.cache,
special = jQuery.event.special,
deleteExpando = jQuery.support.deleteExpando;
for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
continue;
}
id = elem[ jQuery.expando ];
if ( id ) {
data = cache[ id ];
if ( data && data.events ) {
for ( var type in data.events ) {
if ( special[ type ] ) {
jQuery.event.remove( elem, type );
} else {
jQuery.removeEvent( elem, type, data.handle );
}
}
}
if ( deleteExpando ) {
delete elem[ jQuery.expando ];
} else if ( elem.removeAttribute ) {
elem.removeAttribute( jQuery.expando );
}
delete cache[ id ];
}
}
}
});
function evalScript( i, elem ) {
if ( elem.src ) {
jQuery.ajax({
url: elem.src,
async: false,
dataType: "script"
});
} else {
jQuery.globalEval( elem.text || elem.textContent || elem.innerHTML || "" );
}
if ( elem.parentNode ) {
elem.parentNode.removeChild( elem );
}
}
var ralpha = /alpha\([^)]*\)/i,
ropacity = /opacity=([^)]*)/,
rdashAlpha = /-([a-z])/ig,
rupper = /([A-Z])/g,
rnumpx = /^-?\d+(?:px)?$/i,
rnum = /^-?\d/,
cssShow = { position: "absolute", visibility: "hidden", display: "block" },
cssWidth = [ "Left", "Right" ],
cssHeight = [ "Top", "Bottom" ],
curCSS,
getComputedStyle,
currentStyle,
fcamelCase = function( all, letter ) {
return letter.toUpperCase();
};
jQuery.fn.css = function( name, value ) {
if ( arguments.length === 2 && value === undefined ) {
return this;
}
return jQuery.access( this, name, value, true, function( elem, name, value ) {
return value !== undefined ?
jQuery.style( elem, name, value ) :
jQuery.css( elem, name );
});
};
jQuery.extend({
cssHooks: {
opacity: {
get: function( elem, computed ) {
if ( computed ) {
var ret = curCSS( elem, "opacity", "opacity" );
return ret === "" ? "1" : ret;
} else {
return elem.style.opacity;
}
}
}
},
cssNumber: {
"zIndex": true,
"fontWeight": true,
"opacity": true,
"zoom": true,
"lineHeight": true
},
cssProps: {
"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
},
style: function( elem, name, value, extra ) {
if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
return;
}
var ret, origName = jQuery.camelCase( name ),
style = elem.style, hooks = jQuery.cssHooks[ origName ];
name = jQuery.cssProps[ origName ] || origName;
if ( value !== undefined ) {
if ( typeof value === "number" && isNaN( value ) || value == null ) {
return;
}
if ( typeof value === "number" && !jQuery.cssNumber[ origName ] ) {
value += "px";
}
if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
try {
style[ name ] = value;
} catch(e) {}
}
} else {
if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
return ret;
}
return style[ name ];
}
},
css: function( elem, name, extra ) {
var ret, origName = jQuery.camelCase( name ),
hooks = jQuery.cssHooks[ origName ];
name = jQuery.cssProps[ origName ] || origName;
if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
return ret;
} else if ( curCSS ) {
return curCSS( elem, name, origName );
}
},
swap: function( elem, options, callback ) {
var old = {};
for ( var name in options ) {
old[ name ] = elem.style[ name ];
elem.style[ name ] = options[ name ];
}
callback.call( elem );
for ( name in options ) {
elem.style[ name ] = old[ name ];
}
},
camelCase: function( string ) {
return string.replace( rdashAlpha, fcamelCase );
}
});
jQuery.curCSS = jQuery.css;
jQuery.each(["height", "width"], function( i, name ) {
jQuery.cssHooks[ name ] = {
get: function( elem, computed, extra ) {
var val;
if ( computed ) {
if ( elem.offsetWidth !== 0 ) {
val = getWH( elem, name, extra );
} else {
jQuery.swap( elem, cssShow, function() {
val = getWH( elem, name, extra );
});
}
if ( val <= 0 ) {
val = curCSS( elem, name, name );
if ( val === "0px" && currentStyle ) {
val = currentStyle( elem, name, name );
}
if ( val != null ) {
return val === "" || val === "auto" ? "0px" : val;
}
}
if ( val < 0 || val == null ) {
val = elem.style[ name ];
return val === "" || val === "auto" ? "0px" : val;
}
return typeof val === "string" ? val : val + "px";
}
},
set: function( elem, value ) {
if ( rnumpx.test( value ) ) {
value = parseFloat(value);
if ( value >= 0 ) {
return value + "px";
}
} else {
return value;
}
}
};
});
if ( !jQuery.support.opacity ) {
jQuery.cssHooks.opacity = {
get: function( elem, computed ) {
return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ?
(parseFloat(RegExp.$1) / 100) + "" :
computed ? "1" : "";
},
set: function( elem, value ) {
var style = elem.style;
style.zoom = 1;
var opacity = jQuery.isNaN(value) ?
"" :
"alpha(opacity=" + value * 100 + ")",
filter = style.filter || "";
style.filter = ralpha.test(filter) ?
filter.replace(ralpha, opacity) :
style.filter + ' ' + opacity;
}
};
}
if ( document.defaultView && document.defaultView.getComputedStyle ) {
getComputedStyle = function( elem, newName, name ) {
var ret, defaultView, computedStyle;
name = name.replace( rupper, "-$1" ).toLowerCase();
if ( !(defaultView = elem.ownerDocument.defaultView) ) {
return undefined;
}
if ( (computedStyle = defaultView.getComputedStyle( elem, null )) ) {
ret = computedStyle.getPropertyValue( name );
if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
ret = jQuery.style( elem, name );
}
}
return ret;
};
}
if ( document.documentElement.currentStyle ) {
currentStyle = function( elem, name ) {
var left, rsLeft,
ret = elem.currentStyle && elem.currentStyle[ name ],
style = elem.style;
if ( !rnumpx.test( ret ) && rnum.test( ret ) ) {
left = style.left;
rsLeft = elem.runtimeStyle.left;
elem.runtimeStyle.left = elem.currentStyle.left;
style.left = name === "fontSize" ? "1em" : (ret || 0);
ret = style.pixelLeft + "px";
style.left = left;
elem.runtimeStyle.left = rsLeft;
}
return ret === "" ? "auto" : ret;
};
}
curCSS = getComputedStyle || currentStyle;
function getWH( elem, name, extra ) {
var which = name === "width" ? cssWidth : cssHeight,
val = name === "width" ? elem.offsetWidth : elem.offsetHeight;
if ( extra === "border" ) {
return val;
}
jQuery.each( which, function() {
if ( !extra ) {
val -= parseFloat(jQuery.css( elem, "padding" + this )) || 0;
}
if ( extra === "margin" ) {
val += parseFloat(jQuery.css( elem, "margin" + this )) || 0;
} else {
val -= parseFloat(jQuery.css( elem, "border" + this + "Width" )) || 0;
}
});
return val;
}
if ( jQuery.expr && jQuery.expr.filters ) {
jQuery.expr.filters.hidden = function( elem ) {
var width = elem.offsetWidth,
height = elem.offsetHeight;
return (width === 0 && height === 0) || (!jQuery.support.reliableHiddenOffsets && (elem.style.display || jQuery.css( elem, "display" )) === "none");
};
jQuery.expr.filters.visible = function( elem ) {
return !jQuery.expr.filters.hidden( elem );
};
}
var jsc = jQuery.now(),
rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
rselectTextarea = /^(?:select|textarea)/i,
rinput = /^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
rnoContent = /^(?:GET|HEAD)$/,
rbracket = /\[\]$/,
jsre = /\=\?(&|$)/,
rquery = /\?/,
rts = /([?&])_=[^&]*/,
rurl = /^(\w+:)?\/\/([^\/?#]+)/,
r20 = /%20/g,
rhash = /#.*$/,
_load = jQuery.fn.load;
jQuery.fn.extend({
load: function( url, params, callback ) {
if ( typeof url !== "string" && _load ) {
return _load.apply( this, arguments );
} else if ( !this.length ) {
return this;
}
var off = url.indexOf(" ");
if ( off >= 0 ) {
var selector = url.slice(off, url.length);
url = url.slice(0, off);
}
var type = "GET";
if ( params ) {
if ( jQuery.isFunction( params ) ) {
callback = params;
params = null;
} else if ( typeof params === "object" ) {
params = jQuery.param( params, jQuery.ajaxSettings.traditional );
type = "POST";
}
}
var self = this;
jQuery.ajax({
url: url,
type: type,
dataType: "html",
data: params,
complete: function( res, status ) {
if ( status === "success" || status === "notmodified" ) {
self.html( selector ?
jQuery("<div>")
.append(res.responseText.replace(rscript, ""))
.find(selector) :
res.responseText );
}
if ( callback ) {
self.each( callback, [res.responseText, status, res] );
}
}
});
return this;
},
serialize: function() {
return jQuery.param(this.serializeArray());
},
serializeArray: function() {
return this.map(function() {
return this.elements ? jQuery.makeArray(this.elements) : this;
})
.filter(function() {
return this.name && !this.disabled &&
(this.checked || rselectTextarea.test(this.nodeName) ||
rinput.test(this.type));
})
.map(function( i, elem ) {
var val = jQuery(this).val();
return val == null ?
null :
jQuery.isArray(val) ?
jQuery.map( val, function( val, i ) {
return { name: elem.name, value: val };
}) :
{ name: elem.name, value: val };
}).get();
}
});
jQuery.fn["ajaxStart"] = function( f ) {
return this.bind("ajaxStart", f);
};
jQuery.fn["ajaxStop"] = function( f ) {
return this.bind("ajaxStop", f);
};
jQuery.fn["ajaxComplete"] = function( f ) {
return this.bind("ajaxComplete", f);
};
jQuery.fn["ajaxError"] = function( f ) {
return this.bind("ajaxError", f);
};
jQuery.fn["ajaxSuccess"] = function( f ) {
return this.bind("ajaxSuccess", f);
};
jQuery.fn["ajaxSend"] = function( f ) {
return this.bind("ajaxSend", f);
};
jQuery.extend({
get: function( url, data, callback, type ) {
if ( jQuery.isFunction( data ) ) {
type = type || callback;
callback = data;
data = null;
}
return jQuery.ajax({
type: "GET",
url: url,
data: data,
success: callback,
dataType: type
});
},
getScript: function( url, callback ) {
return jQuery.get(url, null, callback, "script");
},
getJSON: function( url, data, callback ) {
return jQuery.get(url, data, callback, "json");
},
post: function( url, data, callback, type ) {
if ( jQuery.isFunction( data ) ) {
type = type || callback;
callback = data;
data = {};
}
return jQuery.ajax({
type: "POST",
url: url,
data: data,
success: callback,
dataType: type
});
},
ajaxSetup: function( settings ) {
jQuery.extend( jQuery.ajaxSettings, settings );
},
ajaxSettings: {
url: location.href,
global: true,
type: "GET",
contentType: "application/x-www-form-urlencoded",
processData: true,
async: true,
/*
timeout: 0,
data: null,
username: null,
password: null,
traditional: false,
*/
xhr: function() {
return new window.XMLHttpRequest();
},
accepts: {
xml: "application/xml, text/xml",
html: "text/html",
script: "text/javascript, application/javascript",
json: "application/json, text/javascript",
text: "text/plain",
_default: "*/*"
}
},
ajax: function (url, options) {
if (typeof url === "object") {
options = url;
url = undefined;
}
options = options || {};
var s = jQuery.ajaxSetup({}, options),
callbackContext = s.context || s,
globalEventContext = callbackContext !== s &&
(callbackContext.nodeType || callbackContext instanceof jQuery) ?
jQuery(callbackContext) : jQuery.event,
deferred = jQuery.Deferred(),
completeDeferred = jQuery._Deferred(),
statusCode = s.statusCode || {},
ifModifiedKey,
requestHeaders = {},
responseHeadersString,
responseHeaders,
transport,
timeoutTimer,
parts,
state = 0,
fireGlobals,
i,
jqXHR = {
readyState: 0,
setRequestHeader: function (name, value) {
if (!state) {
requestHeaders[name.toLowerCase().replace(rucHeaders, rucHeadersFunc)] = value;
}
return this;
},
getAllResponseHeaders: function () {
return state === 2 ? responseHeadersString : null;
},
getResponseHeader: function (key) {
var match;
if (state === 2) {
if (!responseHeaders) {
responseHeaders = {};
while ((match = rheaders.exec(responseHeadersString))) {
responseHeaders[match[1].toLowerCase()] = match[2];
}
}
match = responseHeaders[key.toLowerCase()];
}
return match === undefined ? null : match;
},
overrideMimeType: function (type) {
if (!state) {
s.mimeType = type;
}
return this;
},
abort: function (statusText) {
statusText = statusText || "abort";
if (transport) {
transport.abort(statusText);
}
done(0, statusText);
return this;
}
};
function done(status, statusText, responses, headers) {
if (state === 2) {
return;
}
state = 2;
if (timeoutTimer) {
clearTimeout(timeoutTimer);
}
transport = undefined;
responseHeadersString = headers || "";
jqXHR.readyState = status ? 4 : 0;
var isSuccess,
success,
error,
response = responses ? ajaxHandleResponses(s, jqXHR, responses) : undefined,
lastModified,
etag;
if (status >= 200 && status < 300 || status === 304) {
if (s.ifModified) {
if ((lastModified = jqXHR.getResponseHeader("Last-Modified"))) {
jQuery.lastModified[ifModifiedKey] = lastModified;
}
if ((etag = jqXHR.getResponseHeader("Etag"))) {
jQuery.etag[ifModifiedKey] = etag;
}
}
if (status === 304) {
statusText = "notmodified";
isSuccess = true;
} else {
try {
success = ajaxConvert(s, response);
statusText = "success";
isSuccess = true;
} catch (e) {
statusText = "parsererror";
error = e;
}
}
} else {
error = statusText;
if (!statusText || status) {
statusText = "error";
if (status < 0) {
status = 0;
}
}
}
jqXHR.status = status;
jqXHR.statusText = statusText;
if (isSuccess) {
deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
} else {
deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
}
jqXHR.statusCode(statusCode);
statusCode = undefined;
if (fireGlobals) {
globalEventContext.trigger("ajax" + (isSuccess ? "Success" : "Error"),
[jqXHR, s, isSuccess ? success : error]);
}
completeDeferred.resolveWith(callbackContext, [jqXHR, statusText]);
if (fireGlobals) {
globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
if (!(--jQuery.active)) {
jQuery.event.trigger("ajaxStop");
}
}
}
deferred.promise(jqXHR);
jqXHR.success = jqXHR.done;
jqXHR.error = jqXHR.fail;
jqXHR.complete = completeDeferred.done;
jqXHR.statusCode = function (map) {
if (map) {
var tmp;
if (state < 2) {
for (tmp in map) {
statusCode[tmp] = [statusCode[tmp], map[tmp]];
}
} else {
tmp = map[jqXHR.status];
jqXHR.then(tmp, tmp);
}
}
return this;
};
s.url = ((url || s.url) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().split(rspacesAjax);
if (!s.crossDomain) {
parts = rurl.exec(s.url.toLowerCase());
s.crossDomain = !!(parts &&
(parts[1] != ajaxLocParts[1] || parts[2] != ajaxLocParts[2] ||
(parts[3] || (parts[1] === "http:" ? 80 : 443)) !=
(ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443)))
);
}
if (s.data && s.processData && typeof s.data !== "string") {
s.data = jQuery.param(s.data, s.traditional);
}
inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
if (state === 2) {
return false;
}
fireGlobals = s.global;
s.type = s.type.toUpperCase();
s.hasContent = !rnoContent.test(s.type);
if (fireGlobals && jQuery.active++ === 0) {
jQuery.event.trigger("ajaxStart");
}
if (!s.hasContent) {
if (s.data) {
s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
}
ifModifiedKey = s.url;
if (s.cache === false) {
var ts = jQuery.now(),
ret = s.url.replace(rts, "$1_=" + ts);
s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
}
}
if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
requestHeaders["Content-Type"] = s.contentType;
}
if (s.ifModified) {
ifModifiedKey = ifModifiedKey || s.url;
if (jQuery.lastModified[ifModifiedKey]) {
requestHeaders["If-Modified-Since"] = jQuery.lastModified[ifModifiedKey];
}
if (jQuery.etag[ifModifiedKey]) {
requestHeaders["If-None-Match"] = jQuery.etag[ifModifiedKey];
}
}
requestHeaders.Accept = s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", */*; q=0.01" : "") :
s.accepts["*"];
for (i in s.headers) {
jqXHR.setRequestHeader(i, s.headers[i]);
}
if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
jqXHR.abort();
return false;
}
for (i in { success: 1, error: 1, complete: 1 }) {
jqXHR[i](s[i]);
}
transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
if (!transport) {
done(-1, "No Transport");
} else {
jqXHR.readyState = 1;
if (fireGlobals) {
globalEventContext.trigger("ajaxSend", [jqXHR, s]);
}
if (s.async && s.timeout > 0) {
timeoutTimer = setTimeout(function () {
jqXHR.abort("timeout");
}, s.timeout);
}
try {
state = 1;
transport.send(requestHeaders, done);
} catch (e) {
if (status < 2) {
done(-1, e);
} else {
jQuery.error(e);
}
}
}
return jqXHR;
},
param: function( a, traditional ) {
var s = [],
add = function( key, value ) {
value = jQuery.isFunction(value) ? value() : value;
s[ s.length ] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
};
if ( traditional === undefined ) {
traditional = jQuery.ajaxSettings.traditional;
}
if ( jQuery.isArray(a) || a.jquery ) {
jQuery.each( a, function() {
add( this.name, this.value );
});
} else {
for ( var prefix in a ) {
buildParams( prefix, a[prefix], traditional, add );
}
}
return s.join("&").replace(r20, "+");
}
});
function buildParams( prefix, obj, traditional, add ) {
if ( jQuery.isArray(obj) && obj.length ) {
jQuery.each( obj, function( i, v ) {
if ( traditional || rbracket.test( prefix ) ) {
add( prefix, v );
} else {
buildParams( prefix + "[" + ( typeof v === "object" || jQuery.isArray(v) ? i : "" ) + "]", v, traditional, add );
}
});
} else if ( !traditional && obj != null && typeof obj === "object" ) {
if ( jQuery.isEmptyObject( obj ) ) {
add( prefix, "" );
} else {
jQuery.each( obj, function( k, v ) {
buildParams( prefix + "[" + k + "]", v, traditional, add );
});
}
} else {
add( prefix, obj );
}
}
jQuery.extend({
active: 0,
lastModified: {},
etag: {},
handleError: function( s, xhr, status, e ) {
if ( s.error ) {
s.error.call( s.context, xhr, status, e );
}
if ( s.global ) {
jQuery.triggerGlobal( s, "ajaxError", [xhr, s, e] );
}
},
handleSuccess: function( s, xhr, status, data ) {
if ( s.success ) {
s.success.call( s.context, data, status, xhr );
}
if ( s.global ) {
jQuery.triggerGlobal( s, "ajaxSuccess", [xhr, s] );
}
},
handleComplete: function( s, xhr, status ) {
if ( s.complete ) {
s.complete.call( s.context, xhr, status );
}
if ( s.global ) {
jQuery.triggerGlobal( s, "ajaxComplete", [xhr, s] );
}
if ( s.global && jQuery.active-- === 1 ) {
jQuery.event.trigger( "ajaxStop" );
}
},
triggerGlobal: function( s, type, args ) {
(s.context && s.context.url == null ? jQuery(s.context) : jQuery.event).trigger(type, args);
},
httpSuccess: function( xhr ) {
try {
return !xhr.status && location.protocol === "file:" ||
xhr.status >= 200 && xhr.status < 300 ||
xhr.status === 304 || xhr.status === 1223;
} catch(e) {}
return false;
},
httpNotModified: function( xhr, url ) {
var lastModified = xhr.getResponseHeader("Last-Modified"),
etag = xhr.getResponseHeader("Etag");
if ( lastModified ) {
jQuery.lastModified[url] = lastModified;
}
if ( etag ) {
jQuery.etag[url] = etag;
}
return xhr.status === 304;
},
httpData: function( xhr, type, s ) {
var ct = xhr.getResponseHeader("content-type") || "",
xml = type === "xml" || !type && ct.indexOf("xml") >= 0,
data = xml ? xhr.responseXML : xhr.responseText;
if ( xml && data.documentElement.nodeName === "parsererror" ) {
jQuery.error( "parsererror" );
}
if ( s && s.dataFilter ) {
data = s.dataFilter( data, type );
}
if ( typeof data === "string" ) {
if ( type === "json" || !type && ct.indexOf("json") >= 0 ) {
data = jQuery.parseJSON( data );
} else if ( type === "script" || !type && ct.indexOf("javascript") >= 0 ) {
jQuery.globalEval( data );
}
}
return data;
}
});
/*
* Create the request object; Microsoft failed to properly
* implement the XMLHttpRequest in IE7 (can't request local files),
* so we use the ActiveXObject when it is available
* Additionally XMLHttpRequest can be disabled in IE7/IE8 so
* we need a fallback.
*/
if ( window.ActiveXObject ) {
jQuery.ajaxSettings.xhr = function() {
if ( window.location.protocol !== "file:" ) {
try {
return new window.XMLHttpRequest();
} catch(xhrError) {}
}
try {
return new window.ActiveXObject("Microsoft.XMLHTTP");
} catch(activeError) {}
};
}
jQuery.support.ajax = !!jQuery.ajaxSettings.xhr();
var elemdisplay = {},
rfxtypes = /^(?:toggle|show|hide)$/,
rfxnum = /^([+\-]=)?([\d+.\-]+)(.*)$/,
timerId,
fxAttrs = [
[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
[ "opacity" ]
];
jQuery.fn.extend({
show: function( speed, easing, callback ) {
var elem, display;
if ( speed || speed === 0 ) {
return this.animate( genFx("show", 3), speed, easing, callback);
} else {
for ( var i = 0, j = this.length; i < j; i++ ) {
elem = this[i];
display = elem.style.display;
if ( !jQuery.data(elem, "olddisplay") && display === "none" ) {
display = elem.style.display = "";
}
if ( display === "" && jQuery.css( elem, "display" ) === "none" ) {
jQuery.data(elem, "olddisplay", defaultDisplay(elem.nodeName));
}
}
for ( i = 0; i < j; i++ ) {
elem = this[i];
display = elem.style.display;
if ( display === "" || display === "none" ) {
elem.style.display = jQuery.data(elem, "olddisplay") || "";
}
}
return this;
}
},
hide: function( speed, callback ) {
if ( speed || speed === 0 ) {
return this.animate( genFx("hide", 3), speed, easing, callback);
} else {
for ( var i = 0, j = this.length; i < j; i++ ) {
var display = jQuery.css( this[i], "display" );
if ( display !== "none" ) {
jQuery.data( this[i], "olddisplay", display );
}
}
for ( i = 0; i < j; i++ ) {
this[i].style.display = "none";
}
return this;
}
},
_toggle: jQuery.fn.toggle,
toggle: function( fn, fn2, callback ) {
var bool = typeof fn === "boolean";
if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
this._toggle.apply( this, arguments );
} else if ( fn == null || bool ) {
this.each(function() {
var state = bool ? fn : jQuery(this).is(":hidden");
jQuery(this)[ state ? "show" : "hide" ]();
});
} else {
this.animate(genFx("toggle", 3), fn, fn2, callback);
}
return this;
},
fadeTo: function( speed, to, easing, callback ) {
return this.filter(":hidden").css("opacity", 0).show().end()
.animate({opacity: to}, speed, easing, callback);
},
animate: function( prop, speed, easing, callback ) {
var optall = jQuery.speed(speed, easing, callback);
if ( jQuery.isEmptyObject( prop ) ) {
return this.each( optall.complete );
}
return this[ optall.queue === false ? "each" : "queue" ](function() {
var opt = jQuery.extend({}, optall), p,
isElement = this.nodeType === 1,
hidden = isElement && jQuery(this).is(":hidden"),
self = this;
for ( p in prop ) {
var name = jQuery.camelCase( p );
if ( p !== name ) {
prop[ name ] = prop[ p ];
delete prop[ p ];
p = name;
}
if ( prop[p] === "hide" && hidden || prop[p] === "show" && !hidden ) {
return opt.complete.call(this);
}
if ( isElement && ( p === "height" || p === "width" ) ) {
opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];
if ( jQuery.css( this, "display" ) === "inline" &&
jQuery.css( this, "float" ) === "none" ) {
if ( !jQuery.support.inlineBlockNeedsLayout ) {
this.style.display = "inline-block";
} else {
var display = defaultDisplay(this.nodeName);
if ( display === "inline" ) {
this.style.display = "inline-block";
} else {
this.style.display = "inline";
this.style.zoom = 1;
}
}
}
}
if ( jQuery.isArray( prop[p] ) ) {
(opt.specialEasing = opt.specialEasing || {})[p] = prop[p][1];
prop[p] = prop[p][0];
}
}
if ( opt.overflow != null ) {
this.style.overflow = "hidden";
}
opt.curAnim = jQuery.extend({}, prop);
jQuery.each( prop, function( name, val ) {
var e = new jQuery.fx( self, opt, name );
if ( rfxtypes.test(val) ) {
e[ val === "toggle" ? hidden ? "show" : "hide" : val ]( prop );
} else {
var parts = rfxnum.exec(val),
start = e.cur() || 0;
if ( parts ) {
var end = parseFloat( parts[2] ),
unit = parts[3] || "px";
if ( unit !== "px" ) {
jQuery.style( self, name, (end || 1) + unit);
start = ((end || 1) / e.cur()) * start;
jQuery.style( self, name, start + unit);
}
if ( parts[1] ) {
end = ((parts[1] === "-=" ? -1 : 1) * end) + start;
}
e.custom( start, end, unit );
} else {
e.custom( start, val, "" );
}
}
});
return true;
});
},
stop: function( clearQueue, gotoEnd ) {
var timers = jQuery.timers;
if ( clearQueue ) {
this.queue([]);
}
this.each(function() {
for ( var i = timers.length - 1; i >= 0; i-- ) {
if ( timers[i].elem === this ) {
if (gotoEnd) {
timers[i](true);
}
timers.splice(i, 1);
}
}
});
if ( !gotoEnd ) {
this.dequeue();
}
return this;
}
});
function genFx( type, num ) {
var obj = {};
jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice(0,num)), function() {
obj[ this ] = type;
});
return obj;
}
jQuery.fn[ "slideDown" ] = function( speed, callback ) {
return this.animate( genFx("show", 1), speed, callback );
};
jQuery.fn[ "slideUp" ] = function( speed, callback ) {
return this.animate( genFx("hide", 1), speed, callback );
};
jQuery.fn[ "slideToggle" ] = function( speed, callback ) {
return this.animate( genFx("toggle", 1), speed, callback );
};
jQuery.fn[ "fadeIn" ] = function( speed, callback ) {
return this.animate( { opacity: "show" }, speed, callback );
};
jQuery.fn[ "fadeOut" ] = function( speed, callback ) {
return this.animate( { opacity: "hide" }, speed, callback );
};
jQuery.extend({
speed: function( speed, easing, fn ) {
var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
complete: fn || !fn && easing ||
jQuery.isFunction( speed ) && speed,
duration: speed,
easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
};
opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
opt.old = opt.complete;
opt.complete = function() {
if ( opt.queue !== false ) {
jQuery(this).dequeue();
}
if ( jQuery.isFunction( opt.old ) ) {
opt.old.call( this );
}
};
return opt;
},
easing: {
linear: function( p, n, firstNum, diff ) {
return firstNum + diff * p;
},
swing: function( p, n, firstNum, diff ) {
return ((-Math.cos(p*Math.PI)/2) + 0.5) * diff + firstNum;
}
},
timers: [],
fx: function( elem, options, prop ) {
this.options = options;
this.elem = elem;
this.prop = prop;
if ( !options.orig ) {
options.orig = {};
}
}
});
jQuery.fx.prototype = {
update: function() {
if ( this.options.step ) {
this.options.step.call( this.elem, this.now, this );
}
(jQuery.fx.step[this.prop] || jQuery.fx.step._default)( this );
},
cur: function() {
if ( this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null) ) {
return this.elem[ this.prop ];
}
var r = parseFloat( jQuery.css( this.elem, this.prop ) );
return r && r > -10000 ? r : 0;
},
custom: function( from, to, unit ) {
var self = this,
fx = jQuery.fx;
this.startTime = jQuery.now();
this.start = from;
this.end = to;
this.unit = unit || this.unit || "px";
this.now = this.start;
this.pos = this.state = 0;
function t( gotoEnd ) {
return self.step(gotoEnd);
}
t.elem = this.elem;
if ( t() && jQuery.timers.push(t) && !timerId ) {
timerId = setInterval(fx.tick, fx.interval);
}
},
show: function() {
this.options.orig[this.prop] = jQuery.style( this.elem, this.prop );
this.options.show = true;
this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
jQuery( this.elem ).show();
},
hide: function() {
this.options.orig[this.prop] = jQuery.style( this.elem, this.prop );
this.options.hide = true;
this.custom(this.cur(), 0);
},
step: function( gotoEnd ) {
var t = jQuery.now(), done = true;
if ( gotoEnd || t >= this.options.duration + this.startTime ) {
this.now = this.end;
this.pos = this.state = 1;
this.update();
this.options.curAnim[ this.prop ] = true;
for ( var i in this.options.curAnim ) {
if ( this.options.curAnim[i] !== true ) {
done = false;
}
}
if ( done ) {
if ( this.options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {
var elem = this.elem,
options = this.options;
jQuery.each( [ "", "X", "Y" ], function (index, value) {
elem.style[ "overflow" + value ] = options.overflow[index];
} );
}
if ( this.options.hide ) {
jQuery(this.elem).hide();
}
if ( this.options.hide || this.options.show ) {
for ( var p in this.options.curAnim ) {
jQuery.style( this.elem, p, this.options.orig[p] );
}
}
this.options.complete.call( this.elem );
}
return false;
} else {
var n = t - this.startTime;
this.state = n / this.options.duration;
var specialEasing = this.options.specialEasing && this.options.specialEasing[this.prop];
var defaultEasing = this.options.easing || (jQuery.easing.swing ? "swing" : "linear");
this.pos = jQuery.easing[specialEasing || defaultEasing](this.state, n, 0, 1, this.options.duration);
this.now = this.start + ((this.end - this.start) * this.pos);
this.update();
}
return true;
}
};
jQuery.extend( jQuery.fx, {
tick: function() {
var timers = jQuery.timers;
for ( var i = 0; i < timers.length; i++ ) {
if ( !timers[i]() ) {
timers.splice(i--, 1);
}
}
if ( !timers.length ) {
jQuery.fx.stop();
}
},
interval: 13,
stop: function() {
clearInterval( timerId );
timerId = null;
},
speeds: {
slow: 600,
fast: 200,
_default: 400
},
step: {
opacity: function( fx ) {
jQuery.style( fx.elem, "opacity", fx.now );
},
_default: function( fx ) {
if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
fx.elem.style[ fx.prop ] = (fx.prop === "width" || fx.prop === "height" ? Math.max(0, fx.now) : fx.now) + fx.unit;
} else {
fx.elem[ fx.prop ] = fx.now;
}
}
}
});
if ( jQuery.expr && jQuery.expr.filters ) {
jQuery.expr.filters.animated = function( elem ) {
return jQuery.grep(jQuery.timers, function( fn ) {
return elem === fn.elem;
}).length;
};
}
function defaultDisplay( nodeName ) {
if ( !elemdisplay[ nodeName ] ) {
var elem = jQuery("<" + nodeName + ">").appendTo("body"),
display = elem.css("display");
elem.remove();
if ( display === "none" || display === "" ) {
display = "block";
}
elemdisplay[ nodeName ] = display;
}
return elemdisplay[ nodeName ];
}
var rtable = /^t(?:able|d|h)$/i,
rroot = /^(?:body|html)$/i;
if ( "getBoundingClientRect" in document.documentElement ) {
jQuery.fn.offset = function( options ) {
var elem = this[0], box;
if ( options ) {
return this.each(function( i ) {
jQuery.offset.setOffset( this, options, i );
});
}
if ( !elem || !elem.ownerDocument ) {
return null;
}
if ( elem === elem.ownerDocument.body ) {
return jQuery.offset.bodyOffset( elem );
}
try {
box = elem.getBoundingClientRect();
} catch(e) {}
var doc = elem.ownerDocument,
docElem = doc.documentElement;
if ( !box || !jQuery.contains( docElem, elem ) ) {
return box || { top: 0, left: 0 };
}
var body = doc.body,
win = getWindow(doc),
clientTop  = docElem.clientTop  || body.clientTop  || 0,
clientLeft = docElem.clientLeft || body.clientLeft || 0,
scrollTop  = (win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop ),
scrollLeft = (win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft),
top  = box.top  + scrollTop  - clientTop,
left = box.left + scrollLeft - clientLeft;
return { top: top, left: left };
};
} else {
jQuery.fn.offset = function( options ) {
var elem = this[0];
if ( options ) {
return this.each(function( i ) {
jQuery.offset.setOffset( this, options, i );
});
}
if ( !elem || !elem.ownerDocument ) {
return null;
}
if ( elem === elem.ownerDocument.body ) {
return jQuery.offset.bodyOffset( elem );
}
jQuery.offset.initialize();
var computedStyle,
offsetParent = elem.offsetParent,
prevOffsetParent = elem,
doc = elem.ownerDocument,
docElem = doc.documentElement,
body = doc.body,
defaultView = doc.defaultView,
prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
top = elem.offsetTop,
left = elem.offsetLeft;
while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
if ( jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed" ) {
break;
}
computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
top  -= elem.scrollTop;
left -= elem.scrollLeft;
if ( elem === offsetParent ) {
top  += elem.offsetTop;
left += elem.offsetLeft;
if ( jQuery.offset.doesNotAddBorder && !(jQuery.offset.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
left += parseFloat( computedStyle.borderLeftWidth ) || 0;
}
prevOffsetParent = offsetParent;
offsetParent = elem.offsetParent;
}
if ( jQuery.offset.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
left += parseFloat( computedStyle.borderLeftWidth ) || 0;
}
prevComputedStyle = computedStyle;
}
if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
top  += body.offsetTop;
left += body.offsetLeft;
}
if ( jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed" ) {
top  += Math.max( docElem.scrollTop, body.scrollTop );
left += Math.max( docElem.scrollLeft, body.scrollLeft );
}
return { top: top, left: left };
};
}
jQuery.offset = {
initialize: function() {
var body = document.body, container = document.createElement("div"), innerDiv, checkDiv, table, td, bodyMarginTop = parseFloat( jQuery.css(body, "marginTop") ) || 0,
html = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
jQuery.extend( container.style, { position: "absolute", top: 0, left: 0, margin: 0, border: 0, width: "1px", height: "1px", visibility: "hidden" } );
container.innerHTML = html;
body.insertBefore( container, body.firstChild );
innerDiv = container.firstChild;
checkDiv = innerDiv.firstChild;
td = innerDiv.nextSibling.firstChild.firstChild;
this.doesNotAddBorder = (checkDiv.offsetTop !== 5);
this.doesAddBorderForTableAndCells = (td.offsetTop === 5);
checkDiv.style.position = "fixed";
checkDiv.style.top = "20px";
this.supportsFixedPosition = (checkDiv.offsetTop === 20 || checkDiv.offsetTop === 15);
checkDiv.style.position = checkDiv.style.top = "";
innerDiv.style.overflow = "hidden";
innerDiv.style.position = "relative";
this.subtractsBorderForOverflowNotVisible = (checkDiv.offsetTop === -5);
this.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== bodyMarginTop);
body.removeChild( container );
body = container = innerDiv = checkDiv = table = td = null;
jQuery.offset.initialize = jQuery.noop;
},
bodyOffset: function( body ) {
var top = body.offsetTop,
left = body.offsetLeft;
jQuery.offset.initialize();
if ( jQuery.offset.doesNotIncludeMarginInBodyOffset ) {
top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
}
return { top: top, left: left };
},
setOffset: function( elem, options, i ) {
var position = jQuery.css( elem, "position" );
if ( position === "static" ) {
elem.style.position = "relative";
}
var curElem = jQuery( elem ),
curOffset = curElem.offset(),
curCSSTop = jQuery.css( elem, "top" ),
curCSSLeft = jQuery.css( elem, "left" ),
calculatePosition = (position === "absolute" && jQuery.inArray('auto', [curCSSTop, curCSSLeft]) > -1),
props = {}, curPosition = {}, curTop, curLeft;
if ( calculatePosition ) {
curPosition = curElem.position();
}
curTop  = calculatePosition ? curPosition.top  : parseInt( curCSSTop,  10 ) || 0;
curLeft = calculatePosition ? curPosition.left : parseInt( curCSSLeft, 10 ) || 0;
if ( jQuery.isFunction( options ) ) {
options = options.call( elem, i, curOffset );
}
if (options.top != null) {
props.top = (options.top - curOffset.top) + curTop;
}
if (options.left != null) {
props.left = (options.left - curOffset.left) + curLeft;
}
if ( "using" in options ) {
options.using.call( elem, props );
} else {
curElem.css( props );
}
}
};
jQuery.fn.extend({
position: function() {
if ( !this[0] ) {
return null;
}
var elem = this[0],
offsetParent = this.offsetParent(),
offset       = this.offset(),
parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();
offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;
parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;
return {
top:  offset.top  - parentOffset.top,
left: offset.left - parentOffset.left
};
},
offsetParent: function() {
return this.map(function() {
var offsetParent = this.offsetParent || document.body;
while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
offsetParent = offsetParent.offsetParent;
}
return offsetParent;
});
}
});
jQuery.each( ["Left", "Top"], function( i, name ) {
var method = "scroll" + name;
jQuery.fn[ method ] = function(val) {
var elem = this[0], win;
if ( !elem ) {
return null;
}
if ( val !== undefined ) {
return this.each(function() {
win = getWindow( this );
if ( win ) {
win.scrollTo(
!i ? val : jQuery(win).scrollLeft(),
i ? val : jQuery(win).scrollTop()
);
} else {
this[ method ] = val;
}
});
} else {
win = getWindow( elem );
return win ? ("pageXOffset" in win) ? win[ i ? "pageYOffset" : "pageXOffset" ] :
jQuery.support.boxModel && win.document.documentElement[ method ] ||
win.document.body[ method ] :
elem[ method ];
}
};
});
function getWindow( elem ) {
return jQuery.isWindow( elem ) ?
elem :
elem.nodeType === 9 ?
elem.defaultView || elem.parentWindow :
false;
}
jQuery.each([ "Height" ], function( i, name ) {
var type = name.toLowerCase();
jQuery.fn["inner" + name] = function() {
return this[0] ?
parseFloat( jQuery.css( this[0], type, "padding" ) ) :
null;
};
jQuery.fn["outer" + name] = function( margin ) {
return this[0] ?
parseFloat( jQuery.css( this[0], type, margin ? "margin" : "border" ) ) :
null;
};
jQuery.fn[ type ] = function( size ) {
var elem = this[0];
if ( !elem ) {
return size == null ? null : this;
}
if ( jQuery.isFunction( size ) ) {
return this.each(function( i ) {
var self = jQuery( this );
self[ type ]( size.call( this, i, self[ type ]() ) );
});
}
if ( jQuery.isWindow( elem ) ) {
return elem.document.compatMode === "CSS1Compat" && elem.document.documentElement[ "client" + name ] ||
elem.document.body[ "client" + name ];
} else if ( elem.nodeType === 9 ) {
return Math.max(
elem.documentElement["client" + name],
elem.body["scroll" + name], elem.documentElement["scroll" + name],
elem.body["offset" + name], elem.documentElement["offset" + name]
);
} else if ( size === undefined ) {
var orig = jQuery.css( elem, type ),
ret = parseFloat( orig );
return jQuery.isNaN( ret ) ? orig : ret;
} else {
return this.css( type, typeof size === "string" ? size : size + "px" );
}
};
});
jQuery.each([ "Width" ], function( i, name ) {
var type = name.toLowerCase();
jQuery.fn["inner" + name] = function() {
return this[0] ?
parseFloat( jQuery.css( this[0], type, "padding" ) ) :
null;
};
jQuery.fn["outer" + name] = function( margin ) {
return this[0] ?
parseFloat( jQuery.css( this[0], type, margin ? "margin" : "border" ) ) :
null;
};
jQuery.fn[ type ] = function( size ) {
var elem = this[0];
if ( !elem ) {
return size == null ? null : this;
}
if ( jQuery.isFunction( size ) ) {
return this.each(function( i ) {
var self = jQuery( this );
self[ type ]( size.call( this, i, self[ type ]() ) );
});
}
if ( jQuery.isWindow( elem ) ) {
return elem.document.compatMode === "CSS1Compat" && elem.document.documentElement[ "client" + name ] ||
elem.document.body[ "client" + name ];
} else if ( elem.nodeType === 9 ) {
return Math.max(
elem.documentElement["client" + name],
elem.body["scroll" + name], elem.documentElement["scroll" + name],
elem.body["offset" + name], elem.documentElement["offset" + name]
);
} else if ( size === undefined ) {
var orig = jQuery.css( elem, type ),
ret = parseFloat( orig );
return jQuery.isNaN( ret ) ? orig : ret;
} else {
return this.css( type, typeof size === "string" ? size : size + "px" );
}
};
});
})(window);
/*!	SWFObject v2.2 <http://code.google.com/p/swfobject/>
is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>
*/
var swfobject = function () {
var UNDEF = "undefined",
OBJECT = "object",
SHOCKWAVE_FLASH = "Shockwave Flash",
SHOCKWAVE_FLASH_AX = "ShockwaveFlash.ShockwaveFlash",
FLASH_MIME_TYPE = "application/x-shockwave-flash",
EXPRESS_INSTALL_ID = "SWFObjectExprInst",
ON_READY_STATE_CHANGE = "onreadystatechange",
win = window,
doc = document,
nav = navigator,
plugin = false,
domLoadFnArr = [main],
regObjArr = [],
objIdArr = [],
listenersArr = [],
storedAltContent,
storedAltContentId,
storedCallbackFn,
storedCallbackObj,
isDomLoaded = false,
isExpressInstallActive = false,
dynamicStylesheet,
dynamicStylesheetMedia,
autoHideShow = true,
/* Centralized function for browser feature detection
- User agent string detection is only used when no good alternative is possible
- Is executed directly for optimal performance
*/
ua = function () {
var w3cdom = typeof doc.getElementById != UNDEF && typeof doc.getElementsByTagName != UNDEF && typeof doc.createElement != UNDEF,
u = nav.userAgent.toLowerCase(),
p = nav.platform.toLowerCase(),
windows = p ? /win/.test(p) : /win/.test(u),
mac = p ? /mac/.test(p) : /mac/.test(u),
webkit = /webkit/.test(u) ? parseFloat(u.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false, // returns either the webkit version or false if not webkit
ie = ! +"\v1", // feature detection based on Andrea Giammarchi's solution: http://webreflection.blogspot.com/2009/01/32-bytes-to-know-if-your-browser-is-ie.html
playerVersion = [0, 0, 0],
d = null;
if (typeof nav.plugins != UNDEF && typeof nav.plugins[SHOCKWAVE_FLASH] == OBJECT) {
d = nav.plugins[SHOCKWAVE_FLASH].description;
if (d && !(typeof nav.mimeTypes != UNDEF && nav.mimeTypes[FLASH_MIME_TYPE] && !nav.mimeTypes[FLASH_MIME_TYPE].enabledPlugin)) { // navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin indicates whether plug-ins are enabled or disabled in Safari 3+
plugin = true;
ie = false; // cascaded feature detection for Internet Explorer
d = d.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
playerVersion[0] = parseInt(d.replace(/^(.*)\..*$/, "$1"), 10);
playerVersion[1] = parseInt(d.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
playerVersion[2] = /[a-zA-Z]/.test(d) ? parseInt(d.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0;
}
}
else if (typeof win.ActiveXObject != UNDEF) {
try {
var a = new ActiveXObject(SHOCKWAVE_FLASH_AX);
if (a) { // a will return null when ActiveX is disabled
d = a.GetVariable("$version");
if (d) {
ie = true; // cascaded feature detection for Internet Explorer
d = d.split(" ")[1].split(",");
playerVersion = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
}
}
}
catch (e) { }
}
return { w3: w3cdom, pv: playerVersion, wk: webkit, ie: ie, win: windows, mac: mac };
} (),
/* Cross-browser onDomLoad
- Will fire an event as soon as the DOM of a web page is loaded
- Internet Explorer workaround based on Diego Perini's solution: http://javascript.nwbox.com/IEContentLoaded/
- Regular onload serves as fallback
*/
onDomLoad = function () {
if (!ua.w3) { return; }
if ((typeof doc.readyState != UNDEF && doc.readyState == "complete") || (typeof doc.readyState == UNDEF && (doc.getElementsByTagName("body")[0] || doc.body))) { // function is fired after onload, e.g. when script is inserted dynamically
callDomLoadFunctions();
}
if (!isDomLoaded) {
if (typeof doc.addEventListener != UNDEF) {
doc.addEventListener("DOMContentLoaded", callDomLoadFunctions, false);
}
if (ua.ie && ua.win) {
doc.attachEvent(ON_READY_STATE_CHANGE, function () {
if (doc.readyState == "complete") {
doc.detachEvent(ON_READY_STATE_CHANGE, arguments.callee);
callDomLoadFunctions();
}
});
if (win == top) { // if not inside an iframe
(function () {
if (isDomLoaded) { return; }
try {
doc.documentElement.doScroll("left");
}
catch (e) {
setTimeout(arguments.callee, 0);
return;
}
callDomLoadFunctions();
})();
}
}
if (ua.wk) {
(function () {
if (isDomLoaded) { return; }
if (!/loaded|complete/.test(doc.readyState)) {
setTimeout(arguments.callee, 0);
return;
}
callDomLoadFunctions();
})();
}
addLoadEvent(callDomLoadFunctions);
}
} ();
function callDomLoadFunctions() {
if (isDomLoaded) { return; }
try { // test if we can really add/remove elements to/from the DOM; we don't want to fire it too early
var t = doc.getElementsByTagName("body")[0].appendChild(createElement("span"));
t.parentNode.removeChild(t);
}
catch (e) { return; }
isDomLoaded = true;
var dl = domLoadFnArr.length;
for (var i = 0; i < dl; i++) {
domLoadFnArr[i]();
}
}
function addDomLoadEvent(fn) {
if (isDomLoaded) {
fn();
}
else {
domLoadFnArr[domLoadFnArr.length] = fn; // Array.push() is only available in IE5.5+
}
}
/* Cross-browser onload
- Based on James Edwards' solution: http://brothercake.com/site/resources/scripts/onload/
- Will fire an event as soon as a web page including all of its assets are loaded
*/
function addLoadEvent(fn) {
if (typeof win.addEventListener != UNDEF) {
win.addEventListener("load", fn, false);
}
else if (typeof doc.addEventListener != UNDEF) {
doc.addEventListener("load", fn, false);
}
else if (typeof win.attachEvent != UNDEF) {
addListener(win, "onload", fn);
}
else if (typeof win.onload == "function") {
var fnOld = win.onload;
win.onload = function () {
fnOld();
fn();
};
}
else {
win.onload = fn;
}
}
/* Main function
- Will preferably execute onDomLoad, otherwise onload (as a fallback)
*/
function main() {
if (plugin) {
testPlayerVersion();
}
else {
matchVersions();
}
}
/* Detect the Flash Player version for non-Internet Explorer browsers
- Detecting the plug-in version via the object element is more precise than using the plugins collection item's description:
a. Both release and build numbers can be detected
b. Avoid wrong descriptions by corrupt installers provided by Adobe
c. Avoid wrong descriptions by multiple Flash Player entries in the plugin Array, caused by incorrect browser imports
- Disadvantage of this method is that it depends on the availability of the DOM, while the plugins collection is immediately available
*/
function testPlayerVersion() {
var b = doc.getElementsByTagName("body")[0];
var o = createElement(OBJECT);
o.setAttribute("type", FLASH_MIME_TYPE);
var t = b.appendChild(o);
if (t) {
var counter = 0;
(function () {
if (typeof t.GetVariable != UNDEF) {
var d = t.GetVariable("$version");
if (d) {
d = d.split(" ")[1].split(",");
ua.pv = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
}
}
else if (counter < 10) {
counter++;
setTimeout(arguments.callee, 10);
return;
}
b.removeChild(o);
t = null;
matchVersions();
})();
}
else {
matchVersions();
}
}
/* Perform Flash Player and SWF version matching; static publishing only
*/
function matchVersions() {
var rl = regObjArr.length;
if (rl > 0) {
for (var i = 0; i < rl; i++) { // for each registered object element
var id = regObjArr[i].id;
var cb = regObjArr[i].callbackFn;
var cbObj = { success: false, id: id };
if (ua.pv[0] > 0) {
var obj = getElementById(id);
if (obj) {
if (hasPlayerVersion(regObjArr[i].swfVersion) && !(ua.wk && ua.wk < 312)) { // Flash Player version >= published SWF version: Houston, we have a match!
setVisibility(id, true);
if (cb) {
cbObj.success = true;
cbObj.ref = getObjectById(id);
cb(cbObj);
}
}
else if (regObjArr[i].expressInstall && canExpressInstall()) { // show the Adobe Express Install dialog if set by the web page author and if supported
var att = {};
att.data = regObjArr[i].expressInstall;
att.width = obj.getAttribute("width") || "0";
att.height = obj.getAttribute("height") || "0";
if (obj.getAttribute("class")) { att.styleclass = obj.getAttribute("class"); }
if (obj.getAttribute("align")) { att.align = obj.getAttribute("align"); }
var par = {};
var p = obj.getElementsByTagName("param");
var pl = p.length;
for (var j = 0; j < pl; j++) {
if (p[j].getAttribute("name").toLowerCase() != "movie") {
par[p[j].getAttribute("name")] = p[j].getAttribute("value");
}
}
showExpressInstall(att, par, id, cb);
}
else { // Flash Player and SWF version mismatch or an older Webkit engine that ignores the HTML object element's nested param elements: display alternative content instead of SWF
displayAltContent(obj);
if (cb) { cb(cbObj); }
}
}
}
else {	// if no Flash Player is installed or the fp version cannot be detected we let the HTML object element do its job (either show a SWF or alternative content)
setVisibility(id, true);
if (cb) {
var o = getObjectById(id); // test whether there is an HTML object element or not
if (o && typeof o.SetVariable != UNDEF) {
cbObj.success = true;
cbObj.ref = o;
}
cb(cbObj);
}
}
}
}
}
function getObjectById(objectIdStr) {
var r = null;
var o = getElementById(objectIdStr);
if (o && o.nodeName == "OBJECT") {
if (typeof o.SetVariable != UNDEF) {
r = o;
}
else {
var n = o.getElementsByTagName(OBJECT)[0];
if (n) {
r = n;
}
}
}
return r;
}
/* Requirements for Adobe Express Install
- only one instance can be active at a time
- fp 6.0.65 or higher
- Win/Mac OS only
- no Webkit engines older than version 312
*/
function canExpressInstall() {
return !isExpressInstallActive && hasPlayerVersion("6.0.65") && (ua.win || ua.mac) && !(ua.wk && ua.wk < 312);
}
/* Show the Adobe Express Install dialog
- Reference: http://www.adobe.com/cfusion/knowledgebase/index.cfm?id=6a253b75
*/
function showExpressInstall(att, par, replaceElemIdStr, callbackFn) {
isExpressInstallActive = true;
storedCallbackFn = callbackFn || null;
storedCallbackObj = { success: false, id: replaceElemIdStr };
var obj = getElementById(replaceElemIdStr);
if (obj) {
if (obj.nodeName == "OBJECT") { // static publishing
storedAltContent = abstractAltContent(obj);
storedAltContentId = null;
}
else { // dynamic publishing
storedAltContent = obj;
storedAltContentId = replaceElemIdStr;
}
att.id = EXPRESS_INSTALL_ID;
if (typeof att.width == UNDEF || (!/%$/.test(att.width) && parseInt(att.width, 10) < 310)) { att.width = "310"; }
if (typeof att.height == UNDEF || (!/%$/.test(att.height) && parseInt(att.height, 10) < 137)) { att.height = "137"; }
doc.title = doc.title.slice(0, 47) + " - Flash Player Installation";
var pt = ua.ie && ua.win ? "ActiveX" : "PlugIn",
fv = "MMredirectURL=" + encodeURI(window.location).toString().replace(/&/g, "%26") + "&MMplayerType=" + pt + "&MMdoctitle=" + doc.title;
if (typeof par.flashvars != UNDEF) {
par.flashvars += "&" + fv;
}
else {
par.flashvars = fv;
}
if (ua.ie && ua.win && obj.readyState != 4) {
var newObj = createElement("div");
replaceElemIdStr += "SWFObjectNew";
newObj.setAttribute("id", replaceElemIdStr);
obj.parentNode.insertBefore(newObj, obj); // insert placeholder div that will be replaced by the object element that loads expressinstall.swf
obj.style.display = "none";
(function () {
if (obj.readyState == 4) {
obj.parentNode.removeChild(obj);
}
else {
setTimeout(arguments.callee, 10);
}
})();
}
createSWF(att, par, replaceElemIdStr);
}
}
/* Functions to abstract and display alternative content
*/
function displayAltContent(obj) {
if (ua.ie && ua.win && obj.readyState != 4) {
var el = createElement("div");
obj.parentNode.insertBefore(el, obj); // insert placeholder div that will be replaced by the alternative content
el.parentNode.replaceChild(abstractAltContent(obj), el);
obj.style.display = "none";
(function () {
if (obj.readyState == 4) {
obj.parentNode.removeChild(obj);
}
else {
setTimeout(arguments.callee, 10);
}
})();
}
else {
obj.parentNode.replaceChild(abstractAltContent(obj), obj);
}
}
function abstractAltContent(obj) {
var ac = createElement("div");
if (ua.win && ua.ie) {
ac.innerHTML = obj.innerHTML;
}
else {
var nestedObj = obj.getElementsByTagName(OBJECT)[0];
if (nestedObj) {
var c = nestedObj.childNodes;
if (c) {
var cl = c.length;
for (var i = 0; i < cl; i++) {
if (!(c[i].nodeType == 1 && c[i].nodeName == "PARAM") && !(c[i].nodeType == 8)) {
ac.appendChild(c[i].cloneNode(true));
}
}
}
}
}
return ac;
}
/* Cross-browser dynamic SWF creation
*/
function createSWF(attObj, parObj, id) {
var r, el = getElementById(id);
if (ua.wk && ua.wk < 312) { return r; }
if (el) {
if (typeof attObj.id == UNDEF) { // if no 'id' is defined for the object element, it will inherit the 'id' from the alternative content
attObj.id = id;
}
if (ua.ie && ua.win) { // Internet Explorer + the HTML object element + W3C DOM methods do not combine: fall back to outerHTML
var att = "";
for (var i in attObj) {
if (attObj[i] != Object.prototype[i]) { // filter out prototype additions from other potential libraries
if (i.toLowerCase() == "data") {
parObj.movie = attObj[i];
}
else if (i.toLowerCase() == "styleclass") { // 'class' is an ECMA4 reserved keyword
att += ' class="' + attObj[i] + '"';
}
else if (i.toLowerCase() != "classid") {
att += ' ' + i + '="' + attObj[i] + '"';
}
}
}
var par = "";
for (var j in parObj) {
if (parObj[j] != Object.prototype[j]) { // filter out prototype additions from other potential libraries
par += '<param name="' + j + '" value="' + parObj[j] + '" />';
}
}
el.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + att + '>' + par + '</object>';
objIdArr[objIdArr.length] = attObj.id; // stored to fix object 'leaks' on unload (dynamic publishing only)
r = getElementById(attObj.id);
}
else { // well-behaving browsers
var o = createElement(OBJECT);
o.setAttribute("type", FLASH_MIME_TYPE);
for (var m in attObj) {
if (attObj[m] != Object.prototype[m]) { // filter out prototype additions from other potential libraries
if (m.toLowerCase() == "styleclass") { // 'class' is an ECMA4 reserved keyword
o.setAttribute("class", attObj[m]);
}
else if (m.toLowerCase() != "classid") { // filter out IE specific attribute
o.setAttribute(m, attObj[m]);
}
}
}
for (var n in parObj) {
if (parObj[n] != Object.prototype[n] && n.toLowerCase() != "movie") { // filter out prototype additions from other potential libraries and IE specific param element
createObjParam(o, n, parObj[n]);
}
}
el.parentNode.replaceChild(o, el);
r = o;
}
}
return r;
}
function createObjParam(el, pName, pValue) {
var p = createElement("param");
p.setAttribute("name", pName);
p.setAttribute("value", pValue);
el.appendChild(p);
}
/* Cross-browser SWF removal
- Especially needed to safely and completely remove a SWF in Internet Explorer
*/
function removeSWF(id) {
var obj = getElementById(id);
if (obj && obj.nodeName == "OBJECT") {
if (ua.ie && ua.win) {
obj.style.display = "none";
(function () {
if (obj.readyState == 4) {
removeObjectInIE(id);
}
else {
setTimeout(arguments.callee, 10);
}
})();
}
else {
obj.parentNode.removeChild(obj);
}
}
}
function removeObjectInIE(id) {
var obj = getElementById(id);
if (obj) {
for (var i in obj) {
if (typeof obj[i] == "function") {
obj[i] = null;
}
}
obj.parentNode.removeChild(obj);
}
}
/* Functions to optimize JavaScript compression
*/
function getElementById(id) {
var el = null;
try {
el = doc.getElementById(id);
}
catch (e) { }
return el;
}
function createElement(el) {
return doc.createElement(el);
}
/* Updated attachEvent function for Internet Explorer
- Stores attachEvent information in an Array, so on unload the detachEvent functions can be called to avoid memory leaks
*/
function addListener(target, eventType, fn) {
target.attachEvent(eventType, fn);
listenersArr[listenersArr.length] = [target, eventType, fn];
}
/* Flash Player and SWF content version matching
*/
function hasPlayerVersion(rv) {
var pv = ua.pv, v = rv.split(".");
v[0] = parseInt(v[0], 10);
v[1] = parseInt(v[1], 10) || 0; // supports short notation, e.g. "9" instead of "9.0.0"
v[2] = parseInt(v[2], 10) || 0;
return (pv[0] > v[0] || (pv[0] == v[0] && pv[1] > v[1]) || (pv[0] == v[0] && pv[1] == v[1] && pv[2] >= v[2])) ? true : false;
}
/* Cross-browser dynamic CSS creation
- Based on Bobby van der Sluis' solution: http://www.bobbyvandersluis.com/articles/dynamicCSS.php
*/
function createCSS(sel, decl, media, newStyle) {
if (ua.ie && ua.mac) { return; }
var h = doc.getElementsByTagName("head")[0];
if (!h) { return; } // to also support badly authored HTML pages that lack a head element
var m = (media && typeof media == "string") ? media : "screen";
if (newStyle) {
dynamicStylesheet = null;
dynamicStylesheetMedia = null;
}
if (!dynamicStylesheet || dynamicStylesheetMedia != m) {
var s = createElement("style");
s.setAttribute("type", "text/css");
s.setAttribute("media", m);
dynamicStylesheet = h.appendChild(s);
if (ua.ie && ua.win && typeof doc.styleSheets != UNDEF && doc.styleSheets.length > 0) {
dynamicStylesheet = doc.styleSheets[doc.styleSheets.length - 1];
}
dynamicStylesheetMedia = m;
}
if (ua.ie && ua.win) {
if (dynamicStylesheet && typeof dynamicStylesheet.addRule == OBJECT) {
dynamicStylesheet.addRule(sel, decl);
}
}
else {
if (dynamicStylesheet && typeof doc.createTextNode != UNDEF) {
dynamicStylesheet.appendChild(doc.createTextNode(sel + " {" + decl + "}"));
}
}
}
function setVisibility(id, isVisible) {
if (!autoHideShow) { return; }
var v = isVisible ? "visible" : "hidden";
if (isDomLoaded && getElementById(id)) {
getElementById(id).style.visibility = v;
}
else {
createCSS("#" + id, "visibility:" + v);
}
}
/* Filter to avoid XSS attacks
*/
function urlEncodeIfNecessary(s) {
var regex = /[\\\"<>\.;]/;
var hasBadChars = regex.exec(s) != null;
return hasBadChars && typeof encodeURIComponent != UNDEF ? encodeURIComponent(s) : s;
}
/* Release memory to avoid memory leaks caused by closures, fix hanging audio/video threads and force open sockets/NetConnections to disconnect (Internet Explorer only)
*/
var cleanup = function () {
if (ua.ie && ua.win) {
window.attachEvent("onunload", function () {
var ll = listenersArr.length;
for (var i = 0; i < ll; i++) {
listenersArr[i][0].detachEvent(listenersArr[i][1], listenersArr[i][2]);
}
var il = objIdArr.length;
for (var j = 0; j < il; j++) {
removeSWF(objIdArr[j]);
}
for (var k in ua) {
ua[k] = null;
}
ua = null;
for (var l in swfobject) {
swfobject[l] = null;
}
swfobject = null;
});
}
} ();
return {
/* Public API
- Reference: http://code.google.com/p/swfobject/wiki/documentation
*/
registerObject: function (objectIdStr, swfVersionStr, xiSwfUrlStr, callbackFn) {
if (ua.w3 && objectIdStr && swfVersionStr) {
var regObj = {};
regObj.id = objectIdStr;
regObj.swfVersion = swfVersionStr;
regObj.expressInstall = xiSwfUrlStr;
regObj.callbackFn = callbackFn;
regObjArr[regObjArr.length] = regObj;
setVisibility(objectIdStr, false);
}
else if (callbackFn) {
callbackFn({ success: false, id: objectIdStr });
}
},
getObjectById: function (objectIdStr) {
if (ua.w3) {
return getObjectById(objectIdStr);
}
},
embedSWF: function (swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr, flashvarsObj, parObj, attObj, callbackFn) {
var callbackObj = { success: false, id: replaceElemIdStr };
if (ua.w3 && !(ua.wk && ua.wk < 312) && swfUrlStr && replaceElemIdStr && widthStr && heightStr && swfVersionStr) {
setVisibility(replaceElemIdStr, false);
addDomLoadEvent(function () {
widthStr += ""; // auto-convert to string
heightStr += "";
var att = {};
if (attObj && typeof attObj === OBJECT) {
for (var i in attObj) { // copy object to avoid the use of references, because web authors often reuse attObj for multiple SWFs
att[i] = attObj[i];
}
}
att.data = swfUrlStr;
att.width = widthStr;
att.height = heightStr;
var par = {};
if (parObj && typeof parObj === OBJECT) {
for (var j in parObj) { // copy object to avoid the use of references, because web authors often reuse parObj for multiple SWFs
par[j] = parObj[j];
}
}
if (flashvarsObj && typeof flashvarsObj === OBJECT) {
for (var k in flashvarsObj) { // copy object to avoid the use of references, because web authors often reuse flashvarsObj for multiple SWFs
if (typeof par.flashvars != UNDEF) {
par.flashvars += "&" + k + "=" + flashvarsObj[k];
}
else {
par.flashvars = k + "=" + flashvarsObj[k];
}
}
}
if (hasPlayerVersion(swfVersionStr)) { // create SWF
var obj = createSWF(att, par, replaceElemIdStr);
if (att.id == replaceElemIdStr) {
setVisibility(replaceElemIdStr, true);
}
callbackObj.success = true;
callbackObj.ref = obj;
}
else if (xiSwfUrlStr && canExpressInstall()) { // show Adobe Express Install
att.data = xiSwfUrlStr;
showExpressInstall(att, par, replaceElemIdStr, callbackFn);
return;
}
else { // show alternative content
setVisibility(replaceElemIdStr, true);
}
if (callbackFn) { callbackFn(callbackObj); }
});
}
else if (callbackFn) { callbackFn(callbackObj); }
},
switchOffAutoHideShow: function () {
autoHideShow = false;
},
ua: ua,
getFlashPlayerVersion: function () {
return { major: ua.pv[0], minor: ua.pv[1], release: ua.pv[2] };
},
hasFlashPlayerVersion: hasPlayerVersion,
createSWF: function (attObj, parObj, replaceElemIdStr) {
if (ua.w3) {
return createSWF(attObj, parObj, replaceElemIdStr);
}
else {
return undefined;
}
},
showExpressInstall: function (att, par, replaceElemIdStr, callbackFn) {
if (ua.w3 && canExpressInstall()) {
showExpressInstall(att, par, replaceElemIdStr, callbackFn);
}
},
removeSWF: function (objElemIdStr) {
if (ua.w3) {
removeSWF(objElemIdStr);
}
},
createCSS: function (selStr, declStr, mediaStr, newStyleBoolean) {
if (ua.w3) {
createCSS(selStr, declStr, mediaStr, newStyleBoolean);
}
},
addDomLoadEvent: addDomLoadEvent,
addLoadEvent: addLoadEvent,
getQueryParamValue: function (param) {
var q = doc.location.search || doc.location.hash;
if (q) {
if (/\?/.test(q)) { q = q.split("?")[1]; } // strip question mark
if (param == null) {
return urlEncodeIfNecessary(q);
}
var pairs = q.split("&");
for (var i = 0; i < pairs.length; i++) {
if (pairs[i].substring(0, pairs[i].indexOf("=")) == param) {
return urlEncodeIfNecessary(pairs[i].substring((pairs[i].indexOf("=") + 1)));
}
}
}
return "";
},
expressInstallCallback: function () {
if (isExpressInstallActive) {
var obj = getElementById(EXPRESS_INSTALL_ID);
if (obj && storedAltContent) {
obj.parentNode.replaceChild(storedAltContent, obj);
if (storedAltContentId) {
setVisibility(storedAltContentId, true);
if (ua.ie && ua.win) { storedAltContent.style.display = "block"; }
}
if (storedCallbackFn) { storedCallbackFn(storedCallbackObj); }
}
isExpressInstallActive = false;
}
}
};
} ();
function createFlashPlayer(controlID, divID, fpID,url,p,width,height) {
var swfVersionStr = "10.2.0";
var xiSwfUrlStr = "/resources/NeuroSpeech.WebAtoms/NeuroSpeech.WebAtoms.Content.Flash.playerProductInstall.swf/$$VERSION$$";
if (!p)
p = {};
if (!width)
width = "100%";
if (!height)
height = "100%";
var flashvars = p;
flashvars.controlID = controlID;
var params = {};
params.quality = "high";
params.bgcolor = "#ffffff";
params.allowscriptaccess = "always";
params.allowfullscreen = "true";
var attributes = {};
attributes.id = fpID;
attributes.name = fpID;
attributes.align = "middle";
swfobject.embedSWF(
url + "/$$VERSION$$", divID,
width, height,
swfVersionStr, xiSwfUrlStr,
flashvars, params, attributes);
}
function createFlashUploader(controlID, divID, fpID) {
var swfVersionStr = "10.2.0";
var xiSwfUrlStr = "/resources/NeuroSpeech.WebAtoms/NeuroSpeech.WebAtoms.Content.Flash.playerProductInstall.swf/$$VERSION$$";
var flashvars = {};
flashvars.controlID = controlID;
flashvars.autoPlay = true;
var params = {};
params.quality = "high";
params.bgcolor = "#ffffff";
params.allowscriptaccess = "always";
params.allowfullscreen = "true";
var attributes = {};
attributes.id = fpID;
attributes.name = fpID;
attributes.align = "middle";
swfobject.embedSWF(
"/resources/NeuroSpeech.WebAtoms/NeuroSpeech.WebAtoms.Content.Flash.SingleFileUploader.swf/$$VERSION$$", divID,
"100%", "100%",
swfVersionStr, xiSwfUrlStr,
flashvars, params, attributes);
}
function createVideoPlayer(controlID,divID,fpID) {
var swfVersionStr = "10.2.0";
var xiSwfUrlStr = "/resources/NeuroSpeech.WebAtoms/NeuroSpeech.WebAtoms.Content.Flash.playerProductInstall.swf/$$VERSION$$";
var flashvars = {};
flashvars.controlID = controlID;
flashvars.autoPlay = true;
var params = {};
params.quality = "high";
params.bgcolor = "#ffffff";
params.allowscriptaccess = "always";
params.allowfullscreen = "true";
var attributes = {};
attributes.id = fpID;
attributes.name = fpID;
attributes.align = "middle";
swfobject.embedSWF(
"/resources/NeuroSpeech.WebAtoms/NeuroSpeech.WebAtoms.Content.Flash.VideoPlayer800.swf/$$VERSION$$", divID,
"100%", "100%",
swfVersionStr, xiSwfUrlStr,
flashvars, params, attributes);
}
var JSON;
if (!JSON) {
JSON = {};
}
(function () {
'use strict';
function f(n) {
return n < 10 ? '0' + n : n;
}
if (typeof Date.prototype.toJSON !== 'function') {
Date.prototype.toJSON = function (key) {
return isFinite(this.valueOf()) ?
this.getUTCFullYear() + '-' +
f(this.getUTCMonth() + 1) + '-' +
f(this.getUTCDate()) + 'T' +
f(this.getUTCHours()) + ':' +
f(this.getUTCMinutes()) + ':' +
f(this.getUTCSeconds()) + 'Z' : null;
};
String.prototype.toJSON =
Number.prototype.toJSON =
Boolean.prototype.toJSON = function (key) {
return this.valueOf();
};
}
var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
gap,
indent,
meta = { // table of character substitutions
'\b': '\\b',
'\t': '\\t',
'\n': '\\n',
'\f': '\\f',
'\r': '\\r',
'"': '\\"',
'\\': '\\\\'
},
rep;
function quote(string) {
escapable.lastIndex = 0;
return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
var c = meta[a];
return typeof c === 'string' ? c :
'\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
}) + '"' : '"' + string + '"';
}
function str(key, holder) {
var i, // The loop counter.
k, // The member key.
v, // The member value.
length,
mind = gap,
partial,
value = holder[key];
if (value && typeof value === 'object' &&
typeof value.toJSON === 'function') {
value = value.toJSON(key);
}
if (typeof rep === 'function') {
value = rep.call(holder, key, value);
}
switch (typeof value) {
case 'string':
return quote(value);
case 'number':
return isFinite(value) ? String(value) : 'null';
case 'boolean':
case 'null':
return String(value);
case 'object':
if (!value) {
return 'null';
}
gap += indent;
partial = [];
if (Object.prototype.toString.apply(value) === '[object Array]') {
length = value.length;
for (i = 0; i < length; i += 1) {
partial[i] = str(i, value) || 'null';
}
v = partial.length === 0 ? '[]' : gap ?
'[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
'[' + partial.join(',') + ']';
gap = mind;
return v;
}
if (rep && typeof rep === 'object') {
length = rep.length;
for (i = 0; i < length; i += 1) {
k = rep[i];
if (typeof k === 'string') {
v = str(k, value);
if (v) {
partial.push(quote(k) + (gap ? ': ' : ':') + v);
}
}
}
} else {
for (k in value) {
if (Object.prototype.hasOwnProperty.call(value, k)) {
v = str(k, value);
if (v) {
partial.push(quote(k) + (gap ? ': ' : ':') + v);
}
}
}
}
v = partial.length === 0 ? '{}' : gap ?
'{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
'{' + partial.join(',') + '}';
gap = mind;
return v;
}
}
if (typeof JSON.stringify !== 'function') {
JSON.stringify = function (value, replacer, space) {
var i;
gap = '';
indent = '';
if (typeof space === 'number') {
for (i = 0; i < space; i += 1) {
indent += ' ';
}
} else if (typeof space === 'string') {
indent = space;
}
rep = replacer;
if (replacer && typeof replacer !== 'function' &&
(typeof replacer !== 'object' ||
typeof replacer.length !== 'number')) {
throw new Error('JSON.stringify');
}
return str('', { '': value });
};
}
if (typeof JSON.parse !== 'function') {
JSON.parse = function (text, reviver) {
var j;
function walk(holder, key) {
var k, v, value = holder[key];
if (value && typeof value === 'object') {
for (k in value) {
if (Object.prototype.hasOwnProperty.call(value, k)) {
v = walk(value, k);
if (v !== undefined) {
value[k] = v;
} else {
delete value[k];
}
}
}
}
return reviver.call(holder, key, value);
}
text = String(text);
cx.lastIndex = 0;
if (cx.test(text)) {
text = text.replace(cx, function (a) {
return '\\u' +
('0000' + a.charCodeAt(0).toString(16)).slice(-4);
});
}
if (/^[\],:{}\s]*$/
.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
.replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
j = eval('(' + text + ')');
return typeof reviver === 'function' ?
walk({ '': j }, '') : j;
}
throw new SyntaxError('JSON.parse');
};
}
} ());
Function.__typeName = 'Function';
Function.__class = true;
Function.createCallback = function Function$createCallback(method, context) {
var e = Function._validateParams(arguments, [
{name: "method", type: Function},
{name: "context", mayBeNull: true}
]);
if (e) throw e;
return function() {
var l = arguments.length;
if (l > 0) {
var args = [];
for (var i = 0; i < l; i++) {
args[i] = arguments[i];
}
args[l] = context;
return method.apply(this, args);
}
return method.call(this, context);
}
}
Function.createDelegate = function Function$createDelegate(instance, method) {
var e = Function._validateParams(arguments, [
{name: "instance", mayBeNull: true},
{name: "method", type: Function}
]);
if (e) throw e;
return function() {
return method.apply(instance, arguments);
}
}
Function.emptyFunction = Function.emptyMethod = function Function$emptyMethod() {
}
Function.validateParameters = function Function$validateParameters(parameters, expectedParameters, validateParameterCount) {
var e = Function._validateParams(arguments, [
{name: "parameters"},
{name: "expectedParameters"},
{name: "validateParameterCount", type: Boolean, optional: true}
]);
if (e) throw e;
return Function._validateParams(parameters, expectedParameters, validateParameterCount);
}
Function._validateParams = function Function$_validateParams(params, expectedParams, validateParameterCount) {
var e, expectedLength = expectedParams.length;
validateParameterCount = validateParameterCount || (typeof(validateParameterCount) === "undefined");
e = Function._validateParameterCount(params, expectedParams, validateParameterCount);
if (e) {
e.popStackFrame();
return e;
}
for (var i = 0, l = params.length; i < l; i++) {
var expectedParam = expectedParams[Math.min(i, expectedLength - 1)],
paramName = expectedParam.name;
if (expectedParam.parameterArray) {
paramName += "[" + (i - expectedLength + 1) + "]";
}
else if (!validateParameterCount && (i >= expectedLength)) {
break;
}
e = Function._validateParameter(params[i], expectedParam, paramName);
if (e) {
e.popStackFrame();
return e;
}
}
return null;
}
Function._validateParameterCount = function Function$_validateParameterCount(params, expectedParams, validateParameterCount) {
var i, error,
expectedLen = expectedParams.length,
actualLen = params.length;
if (actualLen < expectedLen) {
var minParams = expectedLen;
for (i = 0; i < expectedLen; i++) {
var param = expectedParams[i];
if (param.optional || param.parameterArray) {
minParams--;
}
}
if (actualLen < minParams) {
error = true;
}
}
else if (validateParameterCount && (actualLen > expectedLen)) {
error = true;
for (i = 0; i < expectedLen; i++) {
if (expectedParams[i].parameterArray) {
error = false;
break;
}
}
}
if (error) {
var e = Error.parameterCount();
e.popStackFrame();
return e;
}
return null;
}
Function._validateParameter = function Function$_validateParameter(param, expectedParam, paramName) {
var e,
expectedType = expectedParam.type,
expectedInteger = !!expectedParam.integer,
expectedDomElement = !!expectedParam.domElement,
mayBeNull = !!expectedParam.mayBeNull;
e = Function._validateParameterType(param, expectedType, expectedInteger, expectedDomElement, mayBeNull, paramName);
if (e) {
e.popStackFrame();
return e;
}
var expectedElementType = expectedParam.elementType,
elementMayBeNull = !!expectedParam.elementMayBeNull;
if (expectedType === Array && typeof(param) !== "undefined" && param !== null &&
(expectedElementType || !elementMayBeNull)) {
var expectedElementInteger = !!expectedParam.elementInteger,
expectedElementDomElement = !!expectedParam.elementDomElement;
for (var i=0; i < param.length; i++) {
var elem = param[i];
e = Function._validateParameterType(elem, expectedElementType,
expectedElementInteger, expectedElementDomElement, elementMayBeNull,
paramName + "[" + i + "]");
if (e) {
e.popStackFrame();
return e;
}
}
}
return null;
}
Function._validateParameterType = function Function$_validateParameterType(param, expectedType, expectedInteger, expectedDomElement, mayBeNull, paramName) {
var e, i;
if (typeof(param) === "undefined") {
if (mayBeNull) {
return null;
}
else {
e = Error.argumentUndefined(paramName);
e.popStackFrame();
return e;
}
}
if (param === null) {
if (mayBeNull) {
return null;
}
else {
e = Error.argumentNull(paramName);
e.popStackFrame();
return e;
}
}
if (expectedType && expectedType.__enum) {
if (typeof(param) !== 'number') {
e = Error.argumentType(paramName, Object.getType(param), expectedType);
e.popStackFrame();
return e;
}
if ((param % 1) === 0) {
var values = expectedType.prototype;
if (!expectedType.__flags || (param === 0)) {
for (i in values) {
if (values[i] === param) return null;
}
}
else {
var v = param;
for (i in values) {
var vali = values[i];
if (vali === 0) continue;
if ((vali & param) === vali) {
v -= vali;
}
if (v === 0) return null;
}
}
}
e = Error.argumentOutOfRange(paramName, param, String.format(Sys.Res.enumInvalidValue, param, expectedType.getName()));
e.popStackFrame();
return e;
}
if (expectedDomElement && (!Sys._isDomElement(param) || (param.nodeType === 3))) {
e = Error.argument(paramName, Sys.Res.argumentDomElement);
e.popStackFrame();
return e;
}
if (expectedType && !Sys._isInstanceOfType(expectedType, param)) {
e = Error.argumentType(paramName, Object.getType(param), expectedType);
e.popStackFrame();
return e;
}
if (expectedType === Number && expectedInteger) {
if ((param % 1) !== 0) {
e = Error.argumentOutOfRange(paramName, param, Sys.Res.argumentInteger);
e.popStackFrame();
return e;
}
}
return null;
}
Error.__typeName = 'Error';
Error.__class = true;
Error.create = function Error$create(message, errorInfo) {
var e = Function._validateParams(arguments, [
{name: "message", type: String, mayBeNull: true, optional: true},
{name: "errorInfo", mayBeNull: true, optional: true}
]);
if (e) throw e;
var err = new Error(message);
err.message = message;
if (errorInfo) {
for (var v in errorInfo) {
err[v] = errorInfo[v];
}
}
err.popStackFrame();
return err;
}
Error.argument = function Error$argument(paramName, message) {
var e = Function._validateParams(arguments, [
{name: "paramName", type: String, mayBeNull: true, optional: true},
{name: "message", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var displayMessage = "Sys.ArgumentException: " + (message ? message : Sys.Res.argument);
if (paramName) {
displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
}
var err = Error.create(displayMessage, { name: "Sys.ArgumentException", paramName: paramName });
err.popStackFrame();
return err;
}
Error.argumentNull = function Error$argumentNull(paramName, message) {
var e = Function._validateParams(arguments, [
{name: "paramName", type: String, mayBeNull: true, optional: true},
{name: "message", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var displayMessage = "Sys.ArgumentNullException: " + (message ? message : Sys.Res.argumentNull);
if (paramName) {
displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
}
var err = Error.create(displayMessage, { name: "Sys.ArgumentNullException", paramName: paramName });
err.popStackFrame();
return err;
}
Error.argumentOutOfRange = function Error$argumentOutOfRange(paramName, actualValue, message) {
var e = Function._validateParams(arguments, [
{name: "paramName", type: String, mayBeNull: true, optional: true},
{name: "actualValue", mayBeNull: true, optional: true},
{name: "message", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var displayMessage = "Sys.ArgumentOutOfRangeException: " + (message ? message : Sys.Res.argumentOutOfRange);
if (paramName) {
displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
}
if (typeof(actualValue) !== "undefined" && actualValue !== null) {
displayMessage += "\n" + String.format(Sys.Res.actualValue, actualValue);
}
var err = Error.create(displayMessage, {
name: "Sys.ArgumentOutOfRangeException",
paramName: paramName,
actualValue: actualValue
});
err.popStackFrame();
return err;
}
Error.argumentType = function Error$argumentType(paramName, actualType, expectedType, message) {
var e = Function._validateParams(arguments, [
{name: "paramName", type: String, mayBeNull: true, optional: true},
{name: "actualType", type: Type, mayBeNull: true, optional: true},
{name: "expectedType", type: Type, mayBeNull: true, optional: true},
{name: "message", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var displayMessage = "Sys.ArgumentTypeException: ";
if (message) {
displayMessage += message;
}
else if (actualType && expectedType) {
displayMessage +=
String.format(Sys.Res.argumentTypeWithTypes, actualType.getName(), expectedType.getName());
}
else {
displayMessage += Sys.Res.argumentType;
}
if (paramName) {
displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
}
var err = Error.create(displayMessage, {
name: "Sys.ArgumentTypeException",
paramName: paramName,
actualType: actualType,
expectedType: expectedType
});
err.popStackFrame();
return err;
}
Error.argumentUndefined = function Error$argumentUndefined(paramName, message) {
var e = Function._validateParams(arguments, [
{name: "paramName", type: String, mayBeNull: true, optional: true},
{name: "message", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var displayMessage = "Sys.ArgumentUndefinedException: " + (message ? message : Sys.Res.argumentUndefined);
if (paramName) {
displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
}
var err = Error.create(displayMessage, { name: "Sys.ArgumentUndefinedException", paramName: paramName });
err.popStackFrame();
return err;
}
Error.format = function Error$format(message) {
var e = Function._validateParams(arguments, [
{name: "message", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var displayMessage = "Sys.FormatException: " + (message ? message : Sys.Res.format);
var err = Error.create(displayMessage, {name: 'Sys.FormatException'});
err.popStackFrame();
return err;
}
Error.invalidOperation = function Error$invalidOperation(message) {
var e = Function._validateParams(arguments, [
{name: "message", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var displayMessage = "Sys.InvalidOperationException: " + (message ? message : Sys.Res.invalidOperation);
var err = Error.create(displayMessage, {name: 'Sys.InvalidOperationException'});
err.popStackFrame();
return err;
}
Error.notImplemented = function Error$notImplemented(message) {
var e = Function._validateParams(arguments, [
{name: "message", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var displayMessage = "Sys.NotImplementedException: " + (message ? message : Sys.Res.notImplemented);
var err = Error.create(displayMessage, {name: 'Sys.NotImplementedException'});
err.popStackFrame();
return err;
}
Error.parameterCount = function Error$parameterCount(message) {
var e = Function._validateParams(arguments, [
{name: "message", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var displayMessage = "Sys.ParameterCountException: " + (message ? message : Sys.Res.parameterCount);
var err = Error.create(displayMessage, {name: 'Sys.ParameterCountException'});
err.popStackFrame();
return err;
}
Error.prototype.popStackFrame = function Error$popStackFrame() {
if (arguments.length !== 0) throw Error.parameterCount();
if (typeof(this.stack) === "undefined" || this.stack === null ||
typeof(this.fileName) === "undefined" || this.fileName === null ||
typeof(this.lineNumber) === "undefined" || this.lineNumber === null) {
return;
}
var stackFrames = this.stack.split("\n");
var currentFrame = stackFrames[0];
var pattern = this.fileName + ":" + this.lineNumber;
while(typeof(currentFrame) !== "undefined" &&
currentFrame !== null &&
currentFrame.indexOf(pattern) === -1) {
stackFrames.shift();
currentFrame = stackFrames[0];
}
var nextFrame = stackFrames[1];
if (typeof(nextFrame) === "undefined" || nextFrame === null) {
return;
}
var nextFrameParts = nextFrame.match(/@(.*):(\d+)$/);
if (typeof(nextFrameParts) === "undefined" || nextFrameParts === null) {
return;
}
this.fileName = nextFrameParts[1];
this.lineNumber = parseInt(nextFrameParts[2]);
stackFrames.shift();
this.stack = stackFrames.join("\n");
}
Object.__typeName = 'Object';
Object.__class = true;
Object.getType = function Object$getType(instance) {
var e = Function._validateParams(arguments, [
{name: "instance"}
]);
if (e) throw e;
var ctor = instance.constructor;
if (!ctor || (typeof(ctor) !== "function") || !ctor.__typeName || (ctor.__typeName === 'Object')) {
return Object;
}
return ctor;
}
Object.getTypeName = function Object$getTypeName(instance) {
var e = Function._validateParams(arguments, [
{name: "instance"}
]);
if (e) throw e;
return Object.getType(instance).getName();
}
String.__typeName = 'String';
String.__class = true;
String.prototype.endsWith = function String$endsWith(suffix) {
var e = Function._validateParams(arguments, [
{name: "suffix", type: String}
]);
if (e) throw e;
return (this.substr(this.length - suffix.length) === suffix);
}
String.prototype.startsWith = function String$startsWith(prefix) {
var e = Function._validateParams(arguments, [
{name: "prefix", type: String}
]);
if (e) throw e;
return (this.substr(0, prefix.length) === prefix);
}
String.prototype.trim = function String$trim() {
if (arguments.length !== 0) throw Error.parameterCount();
return this.replace(/^\s+|\s+$/g, '');
}
String.prototype.trimEnd = function String$trimEnd() {
if (arguments.length !== 0) throw Error.parameterCount();
return this.replace(/\s+$/, '');
}
String.prototype.trimStart = function String$trimStart() {
if (arguments.length !== 0) throw Error.parameterCount();
return this.replace(/^\s+/, '');
}
String.format = function String$format(format, args) {
var e = Function._validateParams(arguments, [
{name: "format", type: String},
{name: "args", mayBeNull: true, parameterArray: true}
]);
if (e) throw e;
return String._toFormattedString(false, arguments);
}
String._toFormattedString = function String$_toFormattedString(useLocale, args) {
var result = '';
var format = args[0];
for (var i=0;;) {
var open = format.indexOf('{', i);
var close = format.indexOf('}', i);
if ((open < 0) && (close < 0)) {
result += format.slice(i);
break;
}
if ((close > 0) && ((close < open) || (open < 0))) {
if (format.charAt(close + 1) !== '}') {
throw Error.argument('format', Sys.Res.stringFormatBraceMismatch);
}
result += format.slice(i, close + 1);
i = close + 2;
continue;
}
result += format.slice(i, open);
i = open + 1;
if (format.charAt(i) === '{') {
result += '{';
i++;
continue;
}
if (close < 0) throw Error.argument('format', Sys.Res.stringFormatBraceMismatch);
var brace = format.substring(i, close);
var colonIndex = brace.indexOf(':');
var argNumber = parseInt((colonIndex < 0)? brace : brace.substring(0, colonIndex), 10) + 1;
if (isNaN(argNumber)) throw Error.argument('format', Sys.Res.stringFormatInvalid);
var argFormat = (colonIndex < 0)? '' : brace.substring(colonIndex + 1);
var arg = args[argNumber];
if (typeof(arg) === "undefined" || arg === null) {
arg = '';
}
if (arg.toFormattedString) {
result += arg.toFormattedString(argFormat);
}
else if (useLocale && arg.localeFormat) {
result += arg.localeFormat(argFormat);
}
else if (arg.format) {
result += arg.format(argFormat);
}
else
result += arg.toString();
i = close + 1;
}
return result;
}
Boolean.__typeName = 'Boolean';
Boolean.__class = true;
Boolean.parse = function Boolean$parse(value) {
var e = Function._validateParams(arguments, [
{name: "value", type: String}
], false);
if (e) throw e;
var v = value.trim().toLowerCase();
if (v === 'false') return false;
if (v === 'true') return true;
throw Error.argumentOutOfRange('value', value, Sys.Res.boolTrueOrFalse);
}
Date.__typeName = 'Date';
Date.__class = true;
Number.__typeName = 'Number';
Number.__class = true;
RegExp.__typeName = 'RegExp';
RegExp.__class = true;
if (!window) this.window = this;
window.Type = Function;
Type.__fullyQualifiedIdentifierRegExp = new RegExp("^[^.0-9 \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]([^ \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]*[^. \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\])?$", "i");
Type.__identifierRegExp = new RegExp("^[^.0-9 \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\][^. \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]*$", "i");
Type.prototype.callBaseMethod = function Type$callBaseMethod(instance, name, baseArguments) {
var e = Function._validateParams(arguments, [
{name: "instance"},
{name: "name", type: String},
{name: "baseArguments", type: Array, mayBeNull: true, optional: true, elementMayBeNull: true}
]);
if (e) throw e;
var baseMethod = Sys._getBaseMethod(this, instance, name);
if (!baseMethod) throw Error.invalidOperation(String.format(Sys.Res.methodNotFound, name));
if (!baseArguments) {
return baseMethod.apply(instance);
}
else {
return baseMethod.apply(instance, baseArguments);
}
}
Type.prototype.getBaseMethod = function Type$getBaseMethod(instance, name) {
var e = Function._validateParams(arguments, [
{name: "instance"},
{name: "name", type: String}
]);
if (e) throw e;
return Sys._getBaseMethod(this, instance, name);
}
Type.prototype.getBaseType = function Type$getBaseType() {
if (arguments.length !== 0) throw Error.parameterCount();
return (typeof(this.__baseType) === "undefined") ? null : this.__baseType;
}
Type.prototype.getInterfaces = function Type$getInterfaces() {
if (arguments.length !== 0) throw Error.parameterCount();
var result = [];
var type = this;
while(type) {
var interfaces = type.__interfaces;
if (interfaces) {
for (var i = 0, l = interfaces.length; i < l; i++) {
var interfaceType = interfaces[i];
if (!Array.contains(result, interfaceType)) {
result[result.length] = interfaceType;
}
}
}
type = type.__baseType;
}
return result;
}
Type.prototype.getName = function Type$getName() {
if (arguments.length !== 0) throw Error.parameterCount();
return (typeof(this.__typeName) === "undefined") ? "" : this.__typeName;
}
Type.prototype.implementsInterface = function Type$implementsInterface(interfaceType) {
var e = Function._validateParams(arguments, [
{name: "interfaceType", type: Type}
]);
if (e) throw e;
this.resolveInheritance();
var interfaceName = interfaceType.getName();
var cache = this.__interfaceCache;
if (cache) {
var cacheEntry = cache[interfaceName];
if (typeof(cacheEntry) !== 'undefined') return cacheEntry;
}
else {
cache = this.__interfaceCache = {};
}
var baseType = this;
while (baseType) {
var interfaces = baseType.__interfaces;
if (interfaces) {
if (Array.indexOf(interfaces, interfaceType) !== -1) {
return cache[interfaceName] = true;
}
}
baseType = baseType.__baseType;
}
return cache[interfaceName] = false;
}
Type.prototype.inheritsFrom = function Type$inheritsFrom(parentType) {
var e = Function._validateParams(arguments, [
{name: "parentType", type: Type}
]);
if (e) throw e;
this.resolveInheritance();
var baseType = this.__baseType;
while (baseType) {
if (baseType === parentType) {
return true;
}
baseType = baseType.__baseType;
}
return false;
}
Type.prototype.initializeBase = function Type$initializeBase(instance, baseArguments) {
var e = Function._validateParams(arguments, [
{name: "instance"},
{name: "baseArguments", type: Array, mayBeNull: true, optional: true, elementMayBeNull: true}
]);
if (e) throw e;
if (!Sys._isInstanceOfType(this, instance)) throw Error.argumentType('instance', Object.getType(instance), this);
this.resolveInheritance();
if (this.__baseType) {
if (!baseArguments) {
this.__baseType.apply(instance);
}
else {
this.__baseType.apply(instance, baseArguments);
}
}
return instance;
}
Type.prototype.isImplementedBy = function Type$isImplementedBy(instance) {
var e = Function._validateParams(arguments, [
{name: "instance", mayBeNull: true}
]);
if (e) throw e;
if (typeof(instance) === "undefined" || instance === null) return false;
var instanceType = Object.getType(instance);
return !!(instanceType.implementsInterface && instanceType.implementsInterface(this));
}
Type.prototype.isInstanceOfType = function Type$isInstanceOfType(instance) {
var e = Function._validateParams(arguments, [
{name: "instance", mayBeNull: true}
]);
if (e) throw e;
return Sys._isInstanceOfType(this, instance);
}
Type.prototype.registerClass = function Type$registerClass(typeName, baseType, interfaceTypes) {
var e = Function._validateParams(arguments, [
{name: "typeName", type: String},
{name: "baseType", type: Type, mayBeNull: true, optional: true},
{name: "interfaceTypes", type: Type, parameterArray: true}
]);
if (e) throw e;
if (!Type.__fullyQualifiedIdentifierRegExp.test(typeName)) throw Error.argument('typeName', Sys.Res.notATypeName);
var parsedName;
try {
parsedName = eval(typeName);
}
catch(e) {
throw Error.argument('typeName', Sys.Res.argumentTypeName);
}
if (parsedName !== this) throw Error.argument('typeName', Sys.Res.badTypeName);
if (Sys.__registeredTypes[typeName]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, typeName));
if ((arguments.length > 1) && (typeof(baseType) === 'undefined')) throw Error.argumentUndefined('baseType');
if (baseType && !baseType.__class) throw Error.argument('baseType', Sys.Res.baseNotAClass);
this.prototype.constructor = this;
this.__typeName = typeName;
this.__class = true;
if (baseType) {
this.__baseType = baseType;
this.__basePrototypePending = true;
}
Sys.__upperCaseTypes[typeName.toUpperCase()] = this;
if (interfaceTypes) {
this.__interfaces = [];
this.resolveInheritance();
for (var i = 2, l = arguments.length; i < l; i++) {
var interfaceType = arguments[i];
if (!interfaceType.__interface) throw Error.argument('interfaceTypes[' + (i - 2) + ']', Sys.Res.notAnInterface);
for (var methodName in interfaceType.prototype) {
var method = interfaceType.prototype[methodName];
if (!this.prototype[methodName]) {
this.prototype[methodName] = method;
}
}
this.__interfaces.push(interfaceType);
}
}
Sys.__registeredTypes[typeName] = true;
return this;
}
Type.prototype.registerInterface = function Type$registerInterface(typeName) {
var e = Function._validateParams(arguments, [
{name: "typeName", type: String}
]);
if (e) throw e;
if (!Type.__fullyQualifiedIdentifierRegExp.test(typeName)) throw Error.argument('typeName', Sys.Res.notATypeName);
var parsedName;
try {
parsedName = eval(typeName);
}
catch(e) {
throw Error.argument('typeName', Sys.Res.argumentTypeName);
}
if (parsedName !== this) throw Error.argument('typeName', Sys.Res.badTypeName);
if (Sys.__registeredTypes[typeName]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, typeName));
Sys.__upperCaseTypes[typeName.toUpperCase()] = this;
this.prototype.constructor = this;
this.__typeName = typeName;
this.__interface = true;
Sys.__registeredTypes[typeName] = true;
return this;
}
Type.prototype.resolveInheritance = function Type$resolveInheritance() {
if (arguments.length !== 0) throw Error.parameterCount();
if (this.__basePrototypePending) {
var baseType = this.__baseType;
baseType.resolveInheritance();
for (var memberName in baseType.prototype) {
var memberValue = baseType.prototype[memberName];
if (!this.prototype[memberName]) {
this.prototype[memberName] = memberValue;
}
}
delete this.__basePrototypePending;
}
}
Type.getRootNamespaces = function Type$getRootNamespaces() {
if (arguments.length !== 0) throw Error.parameterCount();
return Array.clone(Sys.__rootNamespaces);
}
Type.isClass = function Type$isClass(type) {
var e = Function._validateParams(arguments, [
{name: "type", mayBeNull: true}
]);
if (e) throw e;
if ((typeof(type) === 'undefined') || (type === null)) return false;
return !!type.__class;
}
Type.isInterface = function Type$isInterface(type) {
var e = Function._validateParams(arguments, [
{name: "type", mayBeNull: true}
]);
if (e) throw e;
if ((typeof(type) === 'undefined') || (type === null)) return false;
return !!type.__interface;
}
Type.isNamespace = function Type$isNamespace(object) {
var e = Function._validateParams(arguments, [
{name: "object", mayBeNull: true}
]);
if (e) throw e;
if ((typeof(object) === 'undefined') || (object === null)) return false;
return !!object.__namespace;
}
Type.parse = function Type$parse(typeName, ns) {
var e = Function._validateParams(arguments, [
{name: "typeName", type: String, mayBeNull: true},
{name: "ns", mayBeNull: true, optional: true}
]);
if (e) throw e;
var fn;
if (ns) {
fn = Sys.__upperCaseTypes[ns.getName().toUpperCase() + '.' + typeName.toUpperCase()];
return fn || null;
}
if (!typeName) return null;
if (!Type.__htClasses) {
Type.__htClasses = {};
}
fn = Type.__htClasses[typeName];
if (!fn) {
fn = eval(typeName);
if (typeof(fn) !== 'function') throw Error.argument('typeName', Sys.Res.notATypeName);
Type.__htClasses[typeName] = fn;
}
return fn;
}
Type.registerNamespace = function Type$registerNamespace(namespacePath) {
var e = Function._validateParams(arguments, [
{name: "namespacePath", type: String}
]);
if (e) throw e;
Type._registerNamespace(namespacePath);
}
Type._registerNamespace = function Type$_registerNamespace(namespacePath) {
if (!Type.__fullyQualifiedIdentifierRegExp.test(namespacePath)) throw Error.argument('namespacePath', Sys.Res.invalidNameSpace);
var rootObject = window;
var namespaceParts = namespacePath.split('.');
for (var i = 0; i < namespaceParts.length; i++) {
var currentPart = namespaceParts[i];
var ns = rootObject[currentPart];
var nsType = typeof(ns);
if ((nsType !== "undefined") && (ns !== null)) {
if (nsType === "function") {
throw Error.invalidOperation(String.format(Sys.Res.namespaceContainsClass, namespaceParts.splice(0, i + 1).join('.')));
}
if ((typeof(ns) !== "object") || (ns instanceof Array)) {
throw Error.invalidOperation(String.format(Sys.Res.namespaceContainsNonObject, namespaceParts.splice(0, i + 1).join('.')));
}
}
if (!ns) {
ns = rootObject[currentPart] = {};
}
if (!ns.__namespace) {
if ((i === 0) && (namespacePath !== "Sys")) {
Sys.__rootNamespaces[Sys.__rootNamespaces.length] = ns;
}
ns.__namespace = true;
ns.__typeName = namespaceParts.slice(0, i + 1).join('.');
var parsedName;
try {
parsedName = eval(ns.__typeName);
}
catch(e) {
parsedName = null;
}
if (parsedName !== ns) {
delete rootObject[currentPart];
throw Error.argument('namespacePath', Sys.Res.invalidNameSpace);
}
ns.getName = function ns$getName() {return this.__typeName;}
}
rootObject = ns;
}
}
Type._checkDependency = function Type$_checkDependency(dependency, featureName) {
var scripts = Type._registerScript._scripts, isDependent = (scripts ? (!!scripts[dependency]) : false);
if ((typeof(featureName) !== 'undefined') && !isDependent) {
throw Error.invalidOperation(String.format(Sys.Res.requiredScriptReferenceNotIncluded,
featureName, dependency));
}
return isDependent;
}
Type._registerScript = function Type$_registerScript(scriptName, dependencies) {
var scripts = Type._registerScript._scripts;
if (!scripts) {
Type._registerScript._scripts = scripts = {};
}
if (scripts[scriptName]) {
throw Error.invalidOperation(String.format(Sys.Res.scriptAlreadyLoaded, scriptName));
}
scripts[scriptName] = true;
if (dependencies) {
for (var i = 0, l = dependencies.length; i < l; i++) {
var dependency = dependencies[i];
if (!Type._checkDependency(dependency)) {
throw Error.invalidOperation(String.format(Sys.Res.scriptDependencyNotFound, scriptName, dependency));
}
}
}
}
Type._registerNamespace("Sys");
Sys.__upperCaseTypes = {};
Sys.__rootNamespaces = [Sys];
Sys.__registeredTypes = {};
Sys._isInstanceOfType = function Sys$_isInstanceOfType(type, instance) {
if (typeof(instance) === "undefined" || instance === null) return false;
if (instance instanceof type) return true;
var instanceType = Object.getType(instance);
return !!(instanceType === type) ||
(instanceType.inheritsFrom && instanceType.inheritsFrom(type)) ||
(instanceType.implementsInterface && instanceType.implementsInterface(type));
}
Sys._getBaseMethod = function Sys$_getBaseMethod(type, instance, name) {
if (!Sys._isInstanceOfType(type, instance)) throw Error.argumentType('instance', Object.getType(instance), type);
var baseType = type.getBaseType();
if (baseType) {
var baseMethod = baseType.prototype[name];
return (baseMethod instanceof Function) ? baseMethod : null;
}
return null;
}
Sys._isDomElement = function Sys$_isDomElement(obj) {
var val = false;
if (typeof (obj.nodeType) !== 'number') {
var doc = obj.ownerDocument || obj.document || obj;
if (doc != obj) {
var w = doc.defaultView || doc.parentWindow;
val = (w != obj);
}
else {
val = (typeof (doc.body) === 'undefined');
}
}
return !val;
}
Array.__typeName = 'Array';
Array.__class = true;
Array.add = Array.enqueue = function Array$enqueue(array, item) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true},
{name: "item", mayBeNull: true}
]);
if (e) throw e;
array[array.length] = item;
}
Array.addRange = function Array$addRange(array, items) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true},
{name: "items", type: Array, elementMayBeNull: true}
]);
if (e) throw e;
array.push.apply(array, items);
}
Array.clear = function Array$clear(array) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true}
]);
if (e) throw e;
array.length = 0;
}
Array.clone = function Array$clone(array) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true}
]);
if (e) throw e;
if (array.length === 1) {
return [array[0]];
}
else {
return Array.apply(null, array);
}
}
Array.contains = function Array$contains(array, item) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true},
{name: "item", mayBeNull: true}
]);
if (e) throw e;
return (Sys._indexOf(array, item) >= 0);
}
Array.dequeue = function Array$dequeue(array) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true}
]);
if (e) throw e;
return array.shift();
}
Array.forEach = function Array$forEach(array, method, instance) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true},
{name: "method", type: Function},
{name: "instance", mayBeNull: true, optional: true}
]);
if (e) throw e;
for (var i = 0, l = array.length; i < l; i++) {
var elt = array[i];
if (typeof(elt) !== 'undefined') method.call(instance, elt, i, array);
}
}
Array.indexOf = function Array$indexOf(array, item, start) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true},
{name: "item", mayBeNull: true, optional: true},
{name: "start", mayBeNull: true, optional: true}
]);
if (e) throw e;
return Sys._indexOf(array, item, start);
}
Array.insert = function Array$insert(array, index, item) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true},
{name: "index", mayBeNull: true},
{name: "item", mayBeNull: true}
]);
if (e) throw e;
array.splice(index, 0, item);
}
Array.parse = function Array$parse(value) {
var e = Function._validateParams(arguments, [
{name: "value", type: String, mayBeNull: true}
]);
if (e) throw e;
if (!value) return [];
var v = eval(value);
if (!Array.isInstanceOfType(v)) throw Error.argument('value', Sys.Res.arrayParseBadFormat);
return v;
}
Array.remove = function Array$remove(array, item) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true},
{name: "item", mayBeNull: true}
]);
if (e) throw e;
var index = Sys._indexOf(array, item);
if (index >= 0) {
array.splice(index, 1);
}
return (index >= 0);
}
Array.removeAt = function Array$removeAt(array, index) {
var e = Function._validateParams(arguments, [
{name: "array", type: Array, elementMayBeNull: true},
{name: "index", mayBeNull: true}
]);
if (e) throw e;
array.splice(index, 1);
}
Sys._indexOf = function Sys$_indexOf(array, item, start) {
if (typeof(item) === "undefined") return -1;
var length = array.length;
if (length !== 0) {
start = start - 0;
if (isNaN(start)) {
start = 0;
}
else {
if (isFinite(start)) {
start = start - (start % 1);
}
if (start < 0) {
start = Math.max(0, length + start);
}
}
for (var i = start; i < length; i++) {
if ((typeof(array[i]) !== "undefined") && (array[i] === item)) {
return i;
}
}
}
return -1;
}
Type._registerScript._scripts = {
"MicrosoftAjaxCore.js": true,
"MicrosoftAjaxGlobalization.js": true,
"MicrosoftAjaxSerialization.js": true,
"MicrosoftAjaxComponentModel.js": true,
"MicrosoftAjaxHistory.js": true,
"MicrosoftAjaxNetwork.js" : true,
"MicrosoftAjaxWebServices.js": true };
Sys.IDisposable = function Sys$IDisposable() {
throw Error.notImplemented();
}
function Sys$IDisposable$dispose() {
throw Error.notImplemented();
}
Sys.IDisposable.prototype = {
dispose: Sys$IDisposable$dispose
}
Sys.IDisposable.registerInterface('Sys.IDisposable');
Sys.StringBuilder = function Sys$StringBuilder(initialText) {
var e = Function._validateParams(arguments, [
{name: "initialText", mayBeNull: true, optional: true}
]);
if (e) throw e;
this._parts = (typeof(initialText) !== 'undefined' && initialText !== null && initialText !== '') ?
[initialText.toString()] : [];
this._value = {};
this._len = 0;
}
function Sys$StringBuilder$append(text) {
var e = Function._validateParams(arguments, [
{name: "text", mayBeNull: true}
]);
if (e) throw e;
this._parts[this._parts.length] = text;
}
function Sys$StringBuilder$appendLine(text) {
var e = Function._validateParams(arguments, [
{name: "text", mayBeNull: true, optional: true}
]);
if (e) throw e;
this._parts[this._parts.length] =
((typeof(text) === 'undefined') || (text === null) || (text === '')) ?
'\r\n' : text + '\r\n';
}
function Sys$StringBuilder$clear() {
if (arguments.length !== 0) throw Error.parameterCount();
this._parts = [];
this._value = {};
this._len = 0;
}
function Sys$StringBuilder$isEmpty() {
if (arguments.length !== 0) throw Error.parameterCount();
if (this._parts.length === 0) return true;
return this.toString() === '';
}
function Sys$StringBuilder$toString(separator) {
var e = Function._validateParams(arguments, [
{name: "separator", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
separator = separator || '';
var parts = this._parts;
if (this._len !== parts.length) {
this._value = {};
this._len = parts.length;
}
var val = this._value;
if (typeof(val[separator]) === 'undefined') {
if (separator !== '') {
for (var i = 0; i < parts.length;) {
if ((typeof(parts[i]) === 'undefined') || (parts[i] === '') || (parts[i] === null)) {
parts.splice(i, 1);
}
else {
i++;
}
}
}
val[separator] = this._parts.join(separator);
}
return val[separator];
}
Sys.StringBuilder.prototype = {
append: Sys$StringBuilder$append,
appendLine: Sys$StringBuilder$appendLine,
clear: Sys$StringBuilder$clear,
isEmpty: Sys$StringBuilder$isEmpty,
toString: Sys$StringBuilder$toString
}
Sys.StringBuilder.registerClass('Sys.StringBuilder');
Sys.Browser = {};
Sys.Browser.InternetExplorer = {};
Sys.Browser.Firefox = {};
Sys.Browser.Safari = {};
Sys.Browser.Opera = {};
Sys.Browser.agent = null;
Sys.Browser.hasDebuggerStatement = false;
Sys.Browser.name = navigator.appName;
Sys.Browser.version = parseFloat(navigator.appVersion);
Sys.Browser.documentMode = 0;
if (navigator.userAgent.indexOf(' MSIE ') > -1) {
Sys.Browser.agent = Sys.Browser.InternetExplorer;
Sys.Browser.version = parseFloat(navigator.userAgent.match(/MSIE (\d+\.\d+)/)[1]);
if (Sys.Browser.version >= 8) {
if (document.documentMode >= 7) {
Sys.Browser.documentMode = document.documentMode;
}
}
Sys.Browser.hasDebuggerStatement = true;
}
else if (navigator.userAgent.indexOf(' Firefox/') > -1) {
Sys.Browser.agent = Sys.Browser.Firefox;
Sys.Browser.version = parseFloat(navigator.userAgent.match(/ Firefox\/(\d+\.\d+)/)[1]);
Sys.Browser.name = 'Firefox';
Sys.Browser.hasDebuggerStatement = true;
}
else if (navigator.userAgent.indexOf(' AppleWebKit/') > -1) {
Sys.Browser.agent = Sys.Browser.Safari;
Sys.Browser.version = parseFloat(navigator.userAgent.match(/ AppleWebKit\/(\d+(\.\d+)?)/)[1]);
Sys.Browser.name = 'Safari';
}
else if (navigator.userAgent.indexOf('Opera/') > -1) {
Sys.Browser.agent = Sys.Browser.Opera;
}
Sys.EventArgs = function Sys$EventArgs() {
if (arguments.length !== 0) throw Error.parameterCount();
}
Sys.EventArgs.registerClass('Sys.EventArgs');
Sys.EventArgs.Empty = new Sys.EventArgs();
Sys.CancelEventArgs = function Sys$CancelEventArgs() {
if (arguments.length !== 0) throw Error.parameterCount();
Sys.CancelEventArgs.initializeBase(this);
this._cancel = false;
}
function Sys$CancelEventArgs$get_cancel() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._cancel;
}
function Sys$CancelEventArgs$set_cancel(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Boolean}]);
if (e) throw e;
this._cancel = value;
}
Sys.CancelEventArgs.prototype = {
get_cancel: Sys$CancelEventArgs$get_cancel,
set_cancel: Sys$CancelEventArgs$set_cancel
}
Sys.CancelEventArgs.registerClass('Sys.CancelEventArgs', Sys.EventArgs);
Type.registerNamespace('Sys.UI');
Sys._Debug = function Sys$_Debug() {
if (arguments.length !== 0) throw Error.parameterCount();
}
function Sys$_Debug$_appendConsole(text) {
if ((typeof(Debug) !== 'undefined') && Debug.writeln) {
Debug.writeln(text);
}
if (window.console && window.console.log) {
window.console.log(text);
}
if (window.opera) {
window.opera.postError(text);
}
if (window.debugService) {
window.debugService.trace(text);
}
}
function Sys$_Debug$_appendTrace(text) {
var traceElement = document.getElementById('TraceConsole');
if (traceElement && (traceElement.tagName.toUpperCase() === 'TEXTAREA')) {
traceElement.value += text + '\n';
}
}
function Sys$_Debug$assert(condition, message, displayCaller) {
var e = Function._validateParams(arguments, [
{name: "condition", type: Boolean},
{name: "message", type: String, mayBeNull: true, optional: true},
{name: "displayCaller", type: Boolean, optional: true}
]);
if (e) throw e;
if (!condition) {
message = (displayCaller && this.assert.caller) ?
String.format(Sys.Res.assertFailedCaller, message, this.assert.caller) :
String.format(Sys.Res.assertFailed, message);
if (confirm(String.format(Sys.Res.breakIntoDebugger, message))) {
this.fail(message);
}
}
}
function Sys$_Debug$clearTrace() {
if (arguments.length !== 0) throw Error.parameterCount();
var traceElement = document.getElementById('TraceConsole');
if (traceElement && (traceElement.tagName.toUpperCase() === 'TEXTAREA')) {
traceElement.value = '';
}
}
function Sys$_Debug$fail(message) {
var e = Function._validateParams(arguments, [
{name: "message", type: String, mayBeNull: true}
]);
if (e) throw e;
this._appendConsole(message);
if (Sys.Browser.hasDebuggerStatement) {
eval('debugger');
}
}
function Sys$_Debug$trace(text) {
var e = Function._validateParams(arguments, [
{name: "text"}
]);
if (e) throw e;
this._appendConsole(text);
this._appendTrace(text);
}
function Sys$_Debug$traceDump(object, name) {
var e = Function._validateParams(arguments, [
{name: "object", mayBeNull: true},
{name: "name", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var text = this._traceDump(object, name, true);
}
function Sys$_Debug$_traceDump(object, name, recursive, indentationPadding, loopArray) {
name = name? name : 'traceDump';
indentationPadding = indentationPadding? indentationPadding : '';
if (object === null) {
this.trace(indentationPadding + name + ': null');
return;
}
switch(typeof(object)) {
case 'undefined':
this.trace(indentationPadding + name + ': Undefined');
break;
case 'number': case 'string': case 'boolean':
this.trace(indentationPadding + name + ': ' + object);
break;
default:
if (Date.isInstanceOfType(object) || RegExp.isInstanceOfType(object)) {
this.trace(indentationPadding + name + ': ' + object.toString());
break;
}
if (!loopArray) {
loopArray = [];
}
else if (Array.contains(loopArray, object)) {
this.trace(indentationPadding + name + ': ...');
return;
}
Array.add(loopArray, object);
if ((object == window) || (object === document) ||
(window.HTMLElement && (object instanceof HTMLElement)) ||
(typeof(object.nodeName) === 'string')) {
var tag = object.tagName? object.tagName : 'DomElement';
if (object.id) {
tag += ' - ' + object.id;
}
this.trace(indentationPadding + name + ' {' +  tag + '}');
}
else {
var typeName = Object.getTypeName(object);
this.trace(indentationPadding + name + (typeof(typeName) === 'string' ? ' {' + typeName + '}' : ''));
if ((indentationPadding === '') || recursive) {
indentationPadding += "    ";
var i, length, properties, p, v;
if (Array.isInstanceOfType(object)) {
length = object.length;
for (i = 0; i < length; i++) {
this._traceDump(object[i], '[' + i + ']', recursive, indentationPadding, loopArray);
}
}
else {
for (p in object) {
v = object[p];
if (!Function.isInstanceOfType(v)) {
this._traceDump(v, p, recursive, indentationPadding, loopArray);
}
}
}
}
}
Array.remove(loopArray, object);
}
}
Sys._Debug.prototype = {
_appendConsole: Sys$_Debug$_appendConsole,
_appendTrace: Sys$_Debug$_appendTrace,
assert: Sys$_Debug$assert,
clearTrace: Sys$_Debug$clearTrace,
fail: Sys$_Debug$fail,
trace: Sys$_Debug$trace,
traceDump: Sys$_Debug$traceDump,
_traceDump: Sys$_Debug$_traceDump
}
Sys._Debug.registerClass('Sys._Debug');
Sys.Debug = new Sys._Debug();
Sys.Debug.isDebug = true;
function Sys$Enum$parse(value, ignoreCase) {
var e = Function._validateParams(arguments, [
{name: "value", type: String},
{name: "ignoreCase", type: Boolean, optional: true}
]);
if (e) throw e;
var values, parsed, val;
if (ignoreCase) {
values = this.__lowerCaseValues;
if (!values) {
this.__lowerCaseValues = values = {};
var prototype = this.prototype;
for (var name in prototype) {
values[name.toLowerCase()] = prototype[name];
}
}
}
else {
values = this.prototype;
}
if (!this.__flags) {
val = (ignoreCase ? value.toLowerCase() : value);
parsed = values[val.trim()];
if (typeof(parsed) !== 'number') throw Error.argument('value', String.format(Sys.Res.enumInvalidValue, value, this.__typeName));
return parsed;
}
else {
var parts = (ignoreCase ? value.toLowerCase() : value).split(',');
var v = 0;
for (var i = parts.length - 1; i >= 0; i--) {
var part = parts[i].trim();
parsed = values[part];
if (typeof(parsed) !== 'number') throw Error.argument('value', String.format(Sys.Res.enumInvalidValue, value.split(',')[i].trim(), this.__typeName));
v |= parsed;
}
return v;
}
}
function Sys$Enum$toString(value) {
var e = Function._validateParams(arguments, [
{name: "value", mayBeNull: true, optional: true}
]);
if (e) throw e;
if ((typeof(value) === 'undefined') || (value === null)) return this.__string;
if ((typeof(value) != 'number') || ((value % 1) !== 0)) throw Error.argumentType('value', Object.getType(value), this);
var values = this.prototype;
var i;
if (!this.__flags || (value === 0)) {
for (i in values) {
if (values[i] === value) {
return i;
}
}
}
else {
var sorted = this.__sortedValues;
if (!sorted) {
sorted = [];
for (i in values) {
sorted[sorted.length] = {key: i, value: values[i]};
}
sorted.sort(function(a, b) {
return a.value - b.value;
});
this.__sortedValues = sorted;
}
var parts = [];
var v = value;
for (i = sorted.length - 1; i >= 0; i--) {
var kvp = sorted[i];
var vali = kvp.value;
if (vali === 0) continue;
if ((vali & value) === vali) {
parts[parts.length] = kvp.key;
v -= vali;
if (v === 0) break;
}
}
if (parts.length && v === 0) return parts.reverse().join(', ');
}
throw Error.argumentOutOfRange('value', value, String.format(Sys.Res.enumInvalidValue, value, this.__typeName));
}
Type.prototype.registerEnum = function Type$registerEnum(name, flags) {
var e = Function._validateParams(arguments, [
{name: "name", type: String},
{name: "flags", type: Boolean, optional: true}
]);
if (e) throw e;
if (!Type.__fullyQualifiedIdentifierRegExp.test(name)) throw Error.argument('name', Sys.Res.notATypeName);
var parsedName;
try {
parsedName = eval(name);
}
catch(e) {
throw Error.argument('name', Sys.Res.argumentTypeName);
}
if (parsedName !== this) throw Error.argument('name', Sys.Res.badTypeName);
if (Sys.__registeredTypes[name]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, name));
for (var j in this.prototype) {
var val = this.prototype[j];
if (!Type.__identifierRegExp.test(j)) throw Error.invalidOperation(String.format(Sys.Res.enumInvalidValueName, j));
if (typeof(val) !== 'number' || (val % 1) !== 0) throw Error.invalidOperation(Sys.Res.enumValueNotInteger);
if (typeof(this[j]) !== 'undefined') throw Error.invalidOperation(String.format(Sys.Res.enumReservedName, j));
}
Sys.__upperCaseTypes[name.toUpperCase()] = this;
for (var i in this.prototype) {
this[i] = this.prototype[i];
}
this.__typeName = name;
this.parse = Sys$Enum$parse;
this.__string = this.toString();
this.toString = Sys$Enum$toString;
this.__flags = flags;
this.__enum = true;
Sys.__registeredTypes[name] = true;
}
Type.isEnum = function Type$isEnum(type) {
var e = Function._validateParams(arguments, [
{name: "type", mayBeNull: true}
]);
if (e) throw e;
if ((typeof(type) === 'undefined') || (type === null)) return false;
return !!type.__enum;
}
Type.isFlags = function Type$isFlags(type) {
var e = Function._validateParams(arguments, [
{name: "type", mayBeNull: true}
]);
if (e) throw e;
if ((typeof(type) === 'undefined') || (type === null)) return false;
return !!type.__flags;
}
Sys.CollectionChange = function Sys$CollectionChange(action, newItems, newStartingIndex, oldItems, oldStartingIndex) {
var e = Function._validateParams(arguments, [
{name: "action", type: Sys.NotifyCollectionChangedAction},
{name: "newItems", mayBeNull: true, optional: true},
{name: "newStartingIndex", type: Number, mayBeNull: true, integer: true, optional: true},
{name: "oldItems", mayBeNull: true, optional: true},
{name: "oldStartingIndex", type: Number, mayBeNull: true, integer: true, optional: true}
]);
if (e) throw e;
this.action = action;
if (newItems) {
if (!(newItems instanceof Array)) {
newItems = [newItems];
}
}
this.newItems = newItems || null;
if (typeof newStartingIndex !== "number") {
newStartingIndex = -1;
}
this.newStartingIndex = newStartingIndex;
if (oldItems) {
if (!(oldItems instanceof Array)) {
oldItems = [oldItems];
}
}
this.oldItems = oldItems || null;
if (typeof oldStartingIndex !== "number") {
oldStartingIndex = -1;
}
this.oldStartingIndex = oldStartingIndex;
}
Sys.CollectionChange.registerClass("Sys.CollectionChange");
Sys.NotifyCollectionChangedAction = function Sys$NotifyCollectionChangedAction() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
Sys.NotifyCollectionChangedAction.prototype = {
add: 0,
remove: 1,
reset: 2
}
Sys.NotifyCollectionChangedAction.registerEnum('Sys.NotifyCollectionChangedAction');
Sys.NotifyCollectionChangedEventArgs = function Sys$NotifyCollectionChangedEventArgs(changes) {
var e = Function._validateParams(arguments, [
{name: "changes", type: Array, elementType: Sys.CollectionChange}
]);
if (e) throw e;
this._changes = changes;
Sys.NotifyCollectionChangedEventArgs.initializeBase(this);
}
function Sys$NotifyCollectionChangedEventArgs$get_changes() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._changes || [];
}
Sys.NotifyCollectionChangedEventArgs.prototype = {
get_changes: Sys$NotifyCollectionChangedEventArgs$get_changes
}
Sys.NotifyCollectionChangedEventArgs.registerClass("Sys.NotifyCollectionChangedEventArgs", Sys.EventArgs);
Sys.Observer = function Sys$Observer() {
throw Error.invalidOperation();
}
Sys.Observer.registerClass("Sys.Observer");
Sys.Observer.makeObservable = function Sys$Observer$makeObservable(target) {
var e = Function._validateParams(arguments, [
{name: "target"}
]);
if (e) throw e;
var isArray = target instanceof Array,
o = Sys.Observer;
Sys.Observer._ensureObservable(target);
if (target.setValue === o._observeMethods.setValue) return target;
o._addMethods(target, o._observeMethods);
if (isArray) {
o._addMethods(target, o._arrayMethods);
}
return target;
}
Sys.Observer._ensureObservable = function Sys$Observer$_ensureObservable(target) {
var type = typeof target;
if ((type === "string") || (type === "number") || (type === "boolean") || (type === "date")) {
throw Error.invalidOperation(String.format(Sys.Res.notObservable, type));
}
}
Sys.Observer._addMethods = function Sys$Observer$_addMethods(target, methods) {
for (var m in methods) {
if (target[m] && (target[m] !== methods[m])) {
throw Error.invalidOperation(String.format(Sys.Res.observableConflict, m));
}
target[m] = methods[m];
}
}
Sys.Observer._addEventHandler = function Sys$Observer$_addEventHandler(target, eventName, handler) {
Sys.Observer._getContext(target, true).events._addHandler(eventName, handler);
}
Sys.Observer.addEventHandler = function Sys$Observer$addEventHandler(target, eventName, handler) {
var e = Function._validateParams(arguments, [
{name: "target"},
{name: "eventName", type: String},
{name: "handler", type: Function}
]);
if (e) throw e;
Sys.Observer._ensureObservable(target);
Sys.Observer._addEventHandler(target, eventName, handler);
}
Sys.Observer._removeEventHandler = function Sys$Observer$_removeEventHandler(target, eventName, handler) {
Sys.Observer._getContext(target, true).events._removeHandler(eventName, handler);
}
Sys.Observer.removeEventHandler = function Sys$Observer$removeEventHandler(target, eventName, handler) {
var e = Function._validateParams(arguments, [
{name: "target"},
{name: "eventName", type: String},
{name: "handler", type: Function}
]);
if (e) throw e;
Sys.Observer._ensureObservable(target);
Sys.Observer._removeEventHandler(target, eventName, handler);
}
Sys.Observer.raiseEvent = function Sys$Observer$raiseEvent(target, eventName, eventArgs) {
var e = Function._validateParams(arguments, [
{name: "target"},
{name: "eventName", type: String},
{name: "eventArgs", type: Sys.EventArgs}
]);
if (e) throw e;
Sys.Observer._ensureObservable(target);
var ctx = Sys.Observer._getContext(target);
if (!ctx) return;
var handler = ctx.events.getHandler(eventName);
if (handler) {
handler(target, eventArgs);
}
}
Sys.Observer.addPropertyChanged = function Sys$Observer$addPropertyChanged(target, handler) {
var e = Function._validateParams(arguments, [
{name: "target"},
{name: "handler", type: Function}
]);
if (e) throw e;
Sys.Observer._ensureObservable(target);
Sys.Observer._addEventHandler(target, "propertyChanged", handler);
}
Sys.Observer.removePropertyChanged = function Sys$Observer$removePropertyChanged(target, handler) {
var e = Function._validateParams(arguments, [
{name: "target"},
{name: "handler", type: Function}
]);
if (e) throw e;
Sys.Observer._ensureObservable(target);
Sys.Observer._removeEventHandler(target, "propertyChanged", handler);
}
Sys.Observer.beginUpdate = function Sys$Observer$beginUpdate(target) {
var e = Function._validateParams(arguments, [
{name: "target"}
]);
if (e) throw e;
Sys.Observer._ensureObservable(target);
Sys.Observer._getContext(target, true).updating = true;
}
Sys.Observer.endUpdate = function Sys$Observer$endUpdate(target) {
var e = Function._validateParams(arguments, [
{name: "target"}
]);
if (e) throw e;
Sys.Observer._ensureObservable(target);
var ctx = Sys.Observer._getContext(target);
if (!ctx || !ctx.updating) return;
ctx.updating = false;
var dirty = ctx.dirty;
ctx.dirty = false;
if (dirty) {
if (target instanceof Array) {
var changes = ctx.changes;
ctx.changes = null;
Sys.Observer.raiseCollectionChanged(target, changes);
}
Sys.Observer.raisePropertyChanged(target, "");
}
}
Sys.Observer.isUpdating = function Sys$Observer$isUpdating(target) {
var e = Function._validateParams(arguments, [
{name: "target"}
]);
if (e) throw e;
Sys.Observer._ensureObservable(target);
var ctx = Sys.Observer._getContext(target);
return ctx ? ctx.updating : false;
}
Sys.Observer._setValue = function Sys$Observer$_setValue(target, propertyName, value) {
var getter, setter, mainTarget = target, path = propertyName.split('.');
for (var i = 0, l = (path.length - 1); i < l ; i++) {
var name = path[i];
getter = target["get_" + name];
if (typeof (getter) === "function") {
target = getter.call(target);
}
else {
target = target[name];
}
var type = typeof (target);
if ((target === null) || (type === "undefined")) {
throw Error.invalidOperation(String.format(Sys.Res.nullReferenceInPath, propertyName));
}
}
var currentValue, lastPath = path[l];
getter = target["get_" + lastPath];
setter = target["set_" + lastPath];
if (typeof(getter) === 'function') {
currentValue = getter.call(target);
}
else {
currentValue = target[lastPath];
}
if (typeof(setter) === 'function') {
setter.call(target, value);
}
else {
target[lastPath] = value;
}
if (currentValue !== value) {
var ctx = Sys.Observer._getContext(mainTarget);
if (ctx && ctx.updating) {
ctx.dirty = true;
return;
};
Sys.Observer.raisePropertyChanged(mainTarget, path[0]);
}
}
Sys.Observer.setValue = function Sys$Observer$setValue(target, propertyName, value) {
var e = Function._validateParams(arguments, [
{name: "target"},
{name: "propertyName", type: String},
{name: "value", mayBeNull: true}
]);
if (e) throw e;
Sys.Observer._ensureObservable(target);
Sys.Observer._setValue(target, propertyName, value);
}
Sys.Observer.raisePropertyChanged = function Sys$Observer$raisePropertyChanged(target, propertyName) {
Sys.Observer.raiseEvent(target, "propertyChanged", new Sys.PropertyChangedEventArgs(propertyName));
}
Sys.Observer.addCollectionChanged = function Sys$Observer$addCollectionChanged(target, handler) {
var e = Function._validateParams(arguments, [
{name: "target", type: Array, elementMayBeNull: true},
{name: "handler", type: Function}
]);
if (e) throw e;
Sys.Observer._addEventHandler(target, "collectionChanged", handler);
}
Sys.Observer.removeCollectionChanged = function Sys$Observer$removeCollectionChanged(target, handler) {
var e = Function._validateParams(arguments, [
{name: "target", type: Array, elementMayBeNull: true},
{name: "handler", type: Function}
]);
if (e) throw e;
Sys.Observer._removeEventHandler(target, "collectionChanged", handler);
}
Sys.Observer._collectionChange = function Sys$Observer$_collectionChange(target, change) {
var ctx = Sys.Observer._getContext(target);
if (ctx && ctx.updating) {
ctx.dirty = true;
var changes = ctx.changes;
if (!changes) {
ctx.changes = changes = [change];
}
else {
changes.push(change);
}
}
else {
Sys.Observer.raiseCollectionChanged(target, [change]);
Sys.Observer.raisePropertyChanged(target, 'length');
}
}
Sys.Observer.add = function Sys$Observer$add(target, item) {
var e = Function._validateParams(arguments, [
{name: "target", type: Array, elementMayBeNull: true},
{name: "item", mayBeNull: true}
]);
if (e) throw e;
var change = new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, [item], target.length);
Array.add(target, item);
Sys.Observer._collectionChange(target, change);
}
Sys.Observer.addRange = function Sys$Observer$addRange(target, items) {
var e = Function._validateParams(arguments, [
{name: "target", type: Array, elementMayBeNull: true},
{name: "items", type: Array, elementMayBeNull: true}
]);
if (e) throw e;
var change = new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, items, target.length);
Array.addRange(target, items);
Sys.Observer._collectionChange(target, change);
}
Sys.Observer.clear = function Sys$Observer$clear(target) {
var e = Function._validateParams(arguments, [
{name: "target", type: Array, elementMayBeNull: true}
]);
if (e) throw e;
var oldItems = Array.clone(target);
Array.clear(target);
Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.reset, null, -1, oldItems, 0));
}
Sys.Observer.insert = function Sys$Observer$insert(target, index, item) {
var e = Function._validateParams(arguments, [
{name: "target", type: Array, elementMayBeNull: true},
{name: "index", type: Number, integer: true},
{name: "item", mayBeNull: true}
]);
if (e) throw e;
Array.insert(target, index, item);
Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, [item], index));
}
Sys.Observer.remove = function Sys$Observer$remove(target, item) {
var e = Function._validateParams(arguments, [
{name: "target", type: Array, elementMayBeNull: true},
{name: "item", mayBeNull: true}
]);
if (e) throw e;
var index = Array.indexOf(target, item);
if (index !== -1) {
Array.remove(target, item);
Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.remove, null, -1, [item], index));
return true;
}
return false;
}
Sys.Observer.removeAt = function Sys$Observer$removeAt(target, index) {
var e = Function._validateParams(arguments, [
{name: "target", type: Array, elementMayBeNull: true},
{name: "index", type: Number, integer: true}
]);
if (e) throw e;
if ((index > -1) && (index < target.length)) {
var item = target[index];
Array.removeAt(target, index);
Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.remove, null, -1, [item], index));
}
}
Sys.Observer.raiseCollectionChanged = function Sys$Observer$raiseCollectionChanged(target, changes) {
Sys.Observer.raiseEvent(target, "collectionChanged", new Sys.NotifyCollectionChangedEventArgs(changes));
}
Sys.Observer._observeMethods = {
add_propertyChanged: function(handler) {
Sys.Observer._addEventHandler(this, "propertyChanged", handler);
},
remove_propertyChanged: function(handler) {
Sys.Observer._removeEventHandler(this, "propertyChanged", handler);
},
addEventHandler: function(eventName, handler) {
var e = Function._validateParams(arguments, [
{name: "eventName", type: String},
{name: "handler", type: Function}
]);
if (e) throw e;
Sys.Observer._addEventHandler(this, eventName, handler);
},
removeEventHandler: function(eventName, handler) {
var e = Function._validateParams(arguments, [
{name: "eventName", type: String},
{name: "handler", type: Function}
]);
if (e) throw e;
Sys.Observer._removeEventHandler(this, eventName, handler);
},
get_isUpdating: function() {
return Sys.Observer.isUpdating(this);
},
beginUpdate: function() {
Sys.Observer.beginUpdate(this);
},
endUpdate: function() {
Sys.Observer.endUpdate(this);
},
setValue: function(name, value) {
var e = Function._validateParams(arguments, [
{name: "name", type: String},
{name: "value", mayBeNull: true}
]);
if (e) throw e;
Sys.Observer._setValue(this, name, value);
},
raiseEvent: function(eventName, eventArgs) {
Sys.Observer.raiseEvent(this, eventName, eventArgs);
},
raisePropertyChanged: function(name) {
Sys.Observer.raiseEvent(this, "propertyChanged", new Sys.PropertyChangedEventArgs(name));
}
}
Sys.Observer._arrayMethods = {
add_collectionChanged: function(handler) {
Sys.Observer._addEventHandler(this, "collectionChanged", handler);
},
remove_collectionChanged: function(handler) {
Sys.Observer._removeEventHandler(this, "collectionChanged", handler);
},
add: function(item) {
Sys.Observer.add(this, item);
},
addRange: function(items) {
Sys.Observer.addRange(this, items);
},
clear: function() {
Sys.Observer.clear(this);
},
insert: function(index, item) {
Sys.Observer.insert(this, index, item);
},
remove: function(item) {
return Sys.Observer.remove(this, item);
},
removeAt: function(index) {
Sys.Observer.removeAt(this, index);
},
raiseCollectionChanged: function(changes) {
Sys.Observer.raiseEvent(this, "collectionChanged", new Sys.NotifyCollectionChangedEventArgs(changes));
}
}
Sys.Observer._getContext = function Sys$Observer$_getContext(obj, create) {
var ctx = obj._observerContext;
if (ctx) return ctx();
if (create) {
return (obj._observerContext = Sys.Observer._createContext())();
}
return null;
}
Sys.Observer._createContext = function Sys$Observer$_createContext() {
var ctx = {
events: new Sys.EventHandlerList()
};
return function() {
return ctx;
}
}
Date._appendPreOrPostMatch = function Date$_appendPreOrPostMatch(preMatch, strBuilder) {
var quoteCount = 0;
var escaped = false;
for (var i = 0, il = preMatch.length; i < il; i++) {
var c = preMatch.charAt(i);
switch (c) {
case '\'':
if (escaped) strBuilder.append("'");
else quoteCount++;
escaped = false;
break;
case '\\':
if (escaped) strBuilder.append("\\");
escaped = !escaped;
break;
default:
strBuilder.append(c);
escaped = false;
break;
}
}
return quoteCount;
}
Date._expandFormat = function Date$_expandFormat(dtf, format) {
if (!format) {
format = "F";
}
var len = format.length;
if (len === 1) {
switch (format) {
case "d":
return dtf.ShortDatePattern;
case "D":
return dtf.LongDatePattern;
case "t":
return dtf.ShortTimePattern;
case "T":
return dtf.LongTimePattern;
case "f":
return dtf.LongDatePattern + " " + dtf.ShortTimePattern;
case "F":
return dtf.FullDateTimePattern;
case "M": case "m":
return dtf.MonthDayPattern;
case "s":
return dtf.SortableDateTimePattern;
case "Y": case "y":
return dtf.YearMonthPattern;
default:
throw Error.format(Sys.Res.formatInvalidString);
}
}
else if ((len === 2) && (format.charAt(0) === "%")) {
format = format.charAt(1);
}
return format;
}
Date._expandYear = function Date$_expandYear(dtf, year) {
var now = new Date(),
era = Date._getEra(now);
if (year < 100) {
var curr = Date._getEraYear(now, dtf, era);
year += curr - (curr % 100);
if (year > dtf.Calendar.TwoDigitYearMax) {
year -= 100;
}
}
return year;
}
Date._getEra = function Date$_getEra(date, eras) {
if (!eras) return 0;
var start, ticks = date.getTime();
for (var i = 0, l = eras.length; i < l; i += 4) {
start = eras[i+2];
if ((start === null) || (ticks >= start)) {
return i;
}
}
return 0;
}
Date._getEraYear = function Date$_getEraYear(date, dtf, era, sortable) {
var year = date.getFullYear();
if (!sortable && dtf.eras) {
year -= dtf.eras[era + 3];
}
return year;
}
Date._getParseRegExp = function Date$_getParseRegExp(dtf, format) {
if (!dtf._parseRegExp) {
dtf._parseRegExp = {};
}
else if (dtf._parseRegExp[format]) {
return dtf._parseRegExp[format];
}
var expFormat = Date._expandFormat(dtf, format);
expFormat = expFormat.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1");
var regexp = new Sys.StringBuilder("^");
var groups = [];
var index = 0;
var quoteCount = 0;
var tokenRegExp = Date._getTokenRegExp();
var match;
while ((match = tokenRegExp.exec(expFormat)) !== null) {
var preMatch = expFormat.slice(index, match.index);
index = tokenRegExp.lastIndex;
quoteCount += Date._appendPreOrPostMatch(preMatch, regexp);
if ((quoteCount%2) === 1) {
regexp.append(match[0]);
continue;
}
switch (match[0]) {
case 'dddd': case 'ddd':
case 'MMMM': case 'MMM':
case 'gg': case 'g':
regexp.append("(\\D+)");
break;
case 'tt': case 't':
regexp.append("(\\D*)");
break;
case 'yyyy':
regexp.append("(\\d{4})");
break;
case 'fff':
regexp.append("(\\d{3})");
break;
case 'ff':
regexp.append("(\\d{2})");
break;
case 'f':
regexp.append("(\\d)");
break;
case 'dd': case 'd':
case 'MM': case 'M':
case 'yy': case 'y':
case 'HH': case 'H':
case 'hh': case 'h':
case 'mm': case 'm':
case 'ss': case 's':
regexp.append("(\\d\\d?)");
break;
case 'zzz':
regexp.append("([+-]?\\d\\d?:\\d{2})");
break;
case 'zz': case 'z':
regexp.append("([+-]?\\d\\d?)");
break;
case '/':
regexp.append("(\\" + dtf.DateSeparator + ")");
break;
default:
Sys.Debug.fail("Invalid date format pattern");
}
Array.add(groups, match[0]);
}
Date._appendPreOrPostMatch(expFormat.slice(index), regexp);
regexp.append("$");
var regexpStr = regexp.toString().replace(/\s+/g, "\\s+");
var parseRegExp = {'regExp': regexpStr, 'groups': groups};
dtf._parseRegExp[format] = parseRegExp;
return parseRegExp;
}
Date._getTokenRegExp = function Date$_getTokenRegExp() {
return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
}
Date.parseLocale = function Date$parseLocale(value, formats) {
var e = Function._validateParams(arguments, [
{name: "value", type: String},
{name: "formats", mayBeNull: true, optional: true, parameterArray: true}
]);
if (e) throw e;
return Date._parse(value, Sys.CultureInfo.CurrentCulture, arguments);
}
Date.parseInvariant = function Date$parseInvariant(value, formats) {
var e = Function._validateParams(arguments, [
{name: "value", type: String},
{name: "formats", mayBeNull: true, optional: true, parameterArray: true}
]);
if (e) throw e;
return Date._parse(value, Sys.CultureInfo.InvariantCulture, arguments);
}
Date._parse = function Date$_parse(value, cultureInfo, args) {
var i, l, date, format, formats, custom = false;
for (i = 1, l = args.length; i < l; i++) {
format = args[i];
if (format) {
custom = true;
date = Date._parseExact(value, format, cultureInfo);
if (date) return date;
}
}
if (! custom) {
formats = cultureInfo._getDateTimeFormats();
for (i = 0, l = formats.length; i < l; i++) {
date = Date._parseExact(value, formats[i], cultureInfo);
if (date) return date;
}
}
return null;
}
Date._parseExact = function Date$_parseExact(value, format, cultureInfo) {
value = value.trim();
var dtf = cultureInfo.dateTimeFormat,
parseInfo = Date._getParseRegExp(dtf, format),
match = new RegExp(parseInfo.regExp).exec(value);
if (match === null) return null;
var groups = parseInfo.groups,
era = null, year = null, month = null, date = null, weekDay = null,
hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
pmHour = false;
for (var j = 0, jl = groups.length; j < jl; j++) {
var matchGroup = match[j+1];
if (matchGroup) {
switch (groups[j]) {
case 'dd': case 'd':
date = parseInt(matchGroup, 10);
if ((date < 1) || (date > 31)) return null;
break;
case 'MMMM':
month = cultureInfo._getMonthIndex(matchGroup);
if ((month < 0) || (month > 11)) return null;
break;
case 'MMM':
month = cultureInfo._getAbbrMonthIndex(matchGroup);
if ((month < 0) || (month > 11)) return null;
break;
case 'M': case 'MM':
month = parseInt(matchGroup, 10) - 1;
if ((month < 0) || (month > 11)) return null;
break;
case 'y': case 'yy':
year = Date._expandYear(dtf,parseInt(matchGroup, 10));
if ((year < 0) || (year > 9999)) return null;
break;
case 'yyyy':
year = parseInt(matchGroup, 10);
if ((year < 0) || (year > 9999)) return null;
break;
case 'h': case 'hh':
hour = parseInt(matchGroup, 10);
if (hour === 12) hour = 0;
if ((hour < 0) || (hour > 11)) return null;
break;
case 'H': case 'HH':
hour = parseInt(matchGroup, 10);
if ((hour < 0) || (hour > 23)) return null;
break;
case 'm': case 'mm':
min = parseInt(matchGroup, 10);
if ((min < 0) || (min > 59)) return null;
break;
case 's': case 'ss':
sec = parseInt(matchGroup, 10);
if ((sec < 0) || (sec > 59)) return null;
break;
case 'tt': case 't':
var upperToken = matchGroup.toUpperCase();
pmHour = (upperToken === dtf.PMDesignator.toUpperCase());
if (!pmHour && (upperToken !== dtf.AMDesignator.toUpperCase())) return null;
break;
case 'f':
msec = parseInt(matchGroup, 10) * 100;
if ((msec < 0) || (msec > 999)) return null;
break;
case 'ff':
msec = parseInt(matchGroup, 10) * 10;
if ((msec < 0) || (msec > 999)) return null;
break;
case 'fff':
msec = parseInt(matchGroup, 10);
if ((msec < 0) || (msec > 999)) return null;
break;
case 'dddd':
weekDay = cultureInfo._getDayIndex(matchGroup);
if ((weekDay < 0) || (weekDay > 6)) return null;
break;
case 'ddd':
weekDay = cultureInfo._getAbbrDayIndex(matchGroup);
if ((weekDay < 0) || (weekDay > 6)) return null;
break;
case 'zzz':
var offsets = matchGroup.split(/:/);
if (offsets.length !== 2) return null;
hourOffset = parseInt(offsets[0], 10);
if ((hourOffset < -12) || (hourOffset > 13)) return null;
var minOffset = parseInt(offsets[1], 10);
if ((minOffset < 0) || (minOffset > 59)) return null;
tzMinOffset = (hourOffset * 60) + (matchGroup.startsWith('-')? -minOffset : minOffset);
break;
case 'z': case 'zz':
hourOffset = parseInt(matchGroup, 10);
if ((hourOffset < -12) || (hourOffset > 13)) return null;
tzMinOffset = hourOffset * 60;
break;
case 'g': case 'gg':
var eraName = matchGroup;
if (!eraName || !dtf.eras) return null;
eraName = eraName.toLowerCase().trim();
for (var i = 0, l = dtf.eras.length; i < l; i += 4) {
if (eraName === dtf.eras[i + 1].toLowerCase()) {
era = i;
break;
}
}
if (era === null) return null;
break;
}
}
}
var result = new Date(), defaults, convert = dtf.Calendar.convert;
if (convert) {
defaults = convert.fromGregorian(result);
}
if (!convert) {
defaults = [result.getFullYear(), result.getMonth(), result.getDate()];
}
if (year === null) {
year = defaults[0];
}
else if (dtf.eras) {
year += dtf.eras[(era || 0) + 3];
}
if (month === null) {
month = defaults[1];
}
if (date === null) {
date = defaults[2];
}
if (convert) {
result = convert.toGregorian(year, month, date);
if (result === null) return null;
}
else {
result.setFullYear(year, month, date);
if (result.getDate() !== date) return null;
if ((weekDay !== null) && (result.getDay() !== weekDay)) {
return null;
}
}
if (pmHour && (hour < 12)) {
hour += 12;
}
result.setHours(hour, min, sec, msec);
if (tzMinOffset !== null) {
var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
result.setHours(result.getHours() + parseInt(adjustedMin/60, 10), adjustedMin%60);
}
return result;
}
Date.prototype.format = function Date$format(format) {
var e = Function._validateParams(arguments, [
{name: "format", type: String}
]);
if (e) throw e;
return this._toFormattedString(format, Sys.CultureInfo.InvariantCulture);
}
Date.prototype.localeFormat = function Date$localeFormat(format) {
var e = Function._validateParams(arguments, [
{name: "format", type: String}
]);
if (e) throw e;
return this._toFormattedString(format, Sys.CultureInfo.CurrentCulture);
}
Date.prototype._toFormattedString = function Date$_toFormattedString(format, cultureInfo) {
var dtf = cultureInfo.dateTimeFormat,
convert = dtf.Calendar.convert;
if (!format || !format.length || (format === 'i')) {
if (cultureInfo && cultureInfo.name.length) {
if (convert) {
return this._toFormattedString(dtf.FullDateTimePattern, cultureInfo);
}
else {
var eraDate = new Date(this.getTime());
var era = Date._getEra(this, dtf.eras);
eraDate.setFullYear(Date._getEraYear(this, dtf, era));
return eraDate.toLocaleString();
}
}
else {
return this.toString();
}
}
var eras = dtf.eras,
sortable = (format === "s");
format = Date._expandFormat(dtf, format);
var ret = new Sys.StringBuilder();
var hour;
function addLeadingZero(num) {
if (num < 10) {
return '0' + num;
}
return num.toString();
}
function addLeadingZeros(num) {
if (num < 10) {
return '00' + num;
}
if (num < 100) {
return '0' + num;
}
return num.toString();
}
function padYear(year) {
if (year < 10) {
return '000' + year;
}
else if (year < 100) {
return '00' + year;
}
else if (year < 1000) {
return '0' + year;
}
return year.toString();
}
var foundDay, checkedDay, dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g;
function hasDay() {
if (foundDay || checkedDay) {
return foundDay;
}
foundDay = dayPartRegExp.test(format);
checkedDay = true;
return foundDay;
}
var quoteCount = 0,
tokenRegExp = Date._getTokenRegExp(),
converted;
if (!sortable && convert) {
converted = convert.fromGregorian(this);
}
for (;;) {
var index = tokenRegExp.lastIndex;
var ar = tokenRegExp.exec(format);
var preMatch = format.slice(index, ar ? ar.index : format.length);
quoteCount += Date._appendPreOrPostMatch(preMatch, ret);
if (!ar) break;
if ((quoteCount%2) === 1) {
ret.append(ar[0]);
continue;
}
function getPart(date, part) {
if (converted) {
return converted[part];
}
switch (part) {
case 0: return date.getFullYear();
case 1: return date.getMonth();
case 2: return date.getDate();
}
}
switch (ar[0]) {
case "dddd":
ret.append(dtf.DayNames[this.getDay()]);
break;
case "ddd":
ret.append(dtf.AbbreviatedDayNames[this.getDay()]);
break;
case "dd":
foundDay = true;
ret.append(addLeadingZero(getPart(this, 2)));
break;
case "d":
foundDay = true;
ret.append(getPart(this, 2));
break;
case "MMMM":
ret.append((dtf.MonthGenitiveNames && hasDay())
? dtf.MonthGenitiveNames[getPart(this, 1)]
: dtf.MonthNames[getPart(this, 1)]);
break;
case "MMM":
ret.append((dtf.AbbreviatedMonthGenitiveNames && hasDay())
? dtf.AbbreviatedMonthGenitiveNames[getPart(this, 1)]
: dtf.AbbreviatedMonthNames[getPart(this, 1)]);
break;
case "MM":
ret.append(addLeadingZero(getPart(this, 1) + 1));
break;
case "M":
ret.append(getPart(this, 1) + 1);
break;
case "yyyy":
ret.append(padYear(converted ? converted[0] : Date._getEraYear(this, dtf, Date._getEra(this, eras), sortable)));
break;
case "yy":
ret.append(addLeadingZero((converted ? converted[0] : Date._getEraYear(this, dtf, Date._getEra(this, eras), sortable)) % 100));
break;
case "y":
ret.append((converted ? converted[0] : Date._getEraYear(this, dtf, Date._getEra(this, eras), sortable)) % 100);
break;
case "hh":
hour = this.getHours() % 12;
if (hour === 0) hour = 12;
ret.append(addLeadingZero(hour));
break;
case "h":
hour = this.getHours() % 12;
if (hour === 0) hour = 12;
ret.append(hour);
break;
case "HH":
ret.append(addLeadingZero(this.getHours()));
break;
case "H":
ret.append(this.getHours());
break;
case "mm":
ret.append(addLeadingZero(this.getMinutes()));
break;
case "m":
ret.append(this.getMinutes());
break;
case "ss":
ret.append(addLeadingZero(this.getSeconds()));
break;
case "s":
ret.append(this.getSeconds());
break;
case "tt":
ret.append((this.getHours() < 12) ? dtf.AMDesignator : dtf.PMDesignator);
break;
case "t":
ret.append(((this.getHours() < 12) ? dtf.AMDesignator : dtf.PMDesignator).charAt(0));
break;
case "f":
ret.append(addLeadingZeros(this.getMilliseconds()).charAt(0));
break;
case "ff":
ret.append(addLeadingZeros(this.getMilliseconds()).substr(0, 2));
break;
case "fff":
ret.append(addLeadingZeros(this.getMilliseconds()));
break;
case "z":
hour = this.getTimezoneOffset() / 60;
ret.append(((hour <= 0) ? '+' : '-') + Math.floor(Math.abs(hour)));
break;
case "zz":
hour = this.getTimezoneOffset() / 60;
ret.append(((hour <= 0) ? '+' : '-') + addLeadingZero(Math.floor(Math.abs(hour))));
break;
case "zzz":
hour = this.getTimezoneOffset() / 60;
ret.append(((hour <= 0) ? '+' : '-') + addLeadingZero(Math.floor(Math.abs(hour))) +
":" + addLeadingZero(Math.abs(this.getTimezoneOffset() % 60)));
break;
case "g":
case "gg":
if (dtf.eras) {
ret.append(dtf.eras[Date._getEra(this, eras) + 1]);
}
break;
case "/":
ret.append(dtf.DateSeparator);
break;
default:
Sys.Debug.fail("Invalid date format pattern");
}
}
return ret.toString();
}
String.localeFormat = function String$localeFormat(format, args) {
var e = Function._validateParams(arguments, [
{name: "format", type: String},
{name: "args", mayBeNull: true, parameterArray: true}
]);
if (e) throw e;
return String._toFormattedString(true, arguments);
}
Number.parseLocale = function Number$parseLocale(value) {
var e = Function._validateParams(arguments, [
{name: "value", type: String}
], false);
if (e) throw e;
return Number._parse(value, Sys.CultureInfo.CurrentCulture);
}
Number.parseInvariant = function Number$parseInvariant(value) {
var e = Function._validateParams(arguments, [
{name: "value", type: String}
], false);
if (e) throw e;
return Number._parse(value, Sys.CultureInfo.InvariantCulture);
}
Number._parse = function Number$_parse(value, cultureInfo) {
value = value.trim();
if (value.match(/^[+-]?infinity$/i)) {
return parseFloat(value);
}
if (value.match(/^0x[a-f0-9]+$/i)) {
return parseInt(value);
}
var numFormat = cultureInfo.numberFormat;
var signInfo = Number._parseNumberNegativePattern(value, numFormat, numFormat.NumberNegativePattern);
var sign = signInfo[0];
var num = signInfo[1];
if ((sign === '') && (numFormat.NumberNegativePattern !== 1)) {
signInfo = Number._parseNumberNegativePattern(value, numFormat, 1);
sign = signInfo[0];
num = signInfo[1];
}
if (sign === '') sign = '+';
var exponent;
var intAndFraction;
var exponentPos = num.indexOf('e');
if (exponentPos < 0) exponentPos = num.indexOf('E');
if (exponentPos < 0) {
intAndFraction = num;
exponent = null;
}
else {
intAndFraction = num.substr(0, exponentPos);
exponent = num.substr(exponentPos + 1);
}
var integer;
var fraction;
var decimalPos = intAndFraction.indexOf(numFormat.NumberDecimalSeparator);
if (decimalPos < 0) {
integer = intAndFraction;
fraction = null;
}
else {
integer = intAndFraction.substr(0, decimalPos);
fraction = intAndFraction.substr(decimalPos + numFormat.NumberDecimalSeparator.length);
}
integer = integer.split(numFormat.NumberGroupSeparator).join('');
var altNumGroupSeparator = numFormat.NumberGroupSeparator.replace(/\u00A0/g, " ");
if (numFormat.NumberGroupSeparator !== altNumGroupSeparator) {
integer = integer.split(altNumGroupSeparator).join('');
}
var p = sign + integer;
if (fraction !== null) {
p += '.' + fraction;
}
if (exponent !== null) {
var expSignInfo = Number._parseNumberNegativePattern(exponent, numFormat, 1);
if (expSignInfo[0] === '') {
expSignInfo[0] = '+';
}
p += 'e' + expSignInfo[0] + expSignInfo[1];
}
if (p.match(/^[+-]?\d*\.?\d*(e[+-]?\d+)?$/)) {
return parseFloat(p);
}
return Number.NaN;
}
Number._parseNumberNegativePattern = function Number$_parseNumberNegativePattern(value, numFormat, numberNegativePattern) {
var neg = numFormat.NegativeSign;
var pos = numFormat.PositiveSign;
switch (numberNegativePattern) {
case 4:
neg = ' ' + neg;
pos = ' ' + pos;
case 3:
if (value.endsWith(neg)) {
return ['-', value.substr(0, value.length - neg.length)];
}
else if (value.endsWith(pos)) {
return ['+', value.substr(0, value.length - pos.length)];
}
break;
case 2:
neg += ' ';
pos += ' ';
case 1:
if (value.startsWith(neg)) {
return ['-', value.substr(neg.length)];
}
else if (value.startsWith(pos)) {
return ['+', value.substr(pos.length)];
}
break;
case 0:
if (value.startsWith('(') && value.endsWith(')')) {
return ['-', value.substr(1, value.length - 2)];
}
break;
default:
Sys.Debug.fail("");
}
return ['', value];
}
Number.prototype.format = function Number$format(format) {
var e = Function._validateParams(arguments, [
{name: "format", type: String}
]);
if (e) throw e;
return this._toFormattedString(format, Sys.CultureInfo.InvariantCulture);
}
Number.prototype.localeFormat = function Number$localeFormat(format) {
var e = Function._validateParams(arguments, [
{name: "format", type: String}
]);
if (e) throw e;
return this._toFormattedString(format, Sys.CultureInfo.CurrentCulture);
}
Number.prototype._toFormattedString = function Number$_toFormattedString(format, cultureInfo) {
if (!format || (format.length === 0) || (format === 'i')) {
if (cultureInfo && (cultureInfo.name.length > 0)) {
return this.toLocaleString();
}
else {
return this.toString();
}
}
var _percentPositivePattern = ["n %", "n%", "%n" ];
var _percentNegativePattern = ["-n %", "-n%", "-%n"];
var _numberNegativePattern = ["(n)","-n","- n","n-","n -"];
var _currencyPositivePattern = ["$n","n$","$ n","n $"];
var _currencyNegativePattern = ["($n)","-$n","$-n","$n-","(n$)","-n$","n-$","n$-","-n $","-$ n","n $-","$ n-","$ -n","n- $","($ n)","(n $)"];
function zeroPad(str, count, left) {
for (var l=str.length; l < count; l++) {
str = (left ? ('0' + str) : (str + '0'));
}
return str;
}
function expandNumber(number, precision, groupSizes, sep, decimalChar) {
Sys.Debug.assert(groupSizes.length > 0, "groupSizes must be an array of at least 1");
var curSize = groupSizes[0];
var curGroupIndex = 1;
var factor = Math.pow(10, precision);
var rounded = (Math.round(number * factor) / factor);
if (!isFinite(rounded)) {
rounded = number;
}
number = rounded;
var numberString = number.toString();
var right = "";
var exponent;
var split = numberString.split(/e/i);
numberString = split[0];
exponent = (split.length > 1 ? parseInt(split[1]) : 0);
split = numberString.split('.');
numberString = split[0];
right = split.length > 1 ? split[1] : "";
var l;
if (exponent > 0) {
right = zeroPad(right, exponent, false);
numberString += right.slice(0, exponent);
right = right.substr(exponent);
}
else if (exponent < 0) {
exponent = -exponent;
numberString = zeroPad(numberString, exponent+1, true);
right = numberString.slice(-exponent, numberString.length) + right;
numberString = numberString.slice(0, -exponent);
}
if (precision > 0) {
if (right.length > precision) {
right = right.slice(0, precision);
}
else {
right = zeroPad(right, precision, false);
}
right = decimalChar + right;
}
else {
right = "";
}
var stringIndex = numberString.length-1;
var ret = "";
while (stringIndex >= 0) {
if (curSize === 0 || curSize > stringIndex) {
if (ret.length > 0)
return numberString.slice(0, stringIndex + 1) + sep + ret + right;
else
return numberString.slice(0, stringIndex + 1) + right;
}
if (ret.length > 0)
ret = numberString.slice(stringIndex - curSize + 1, stringIndex+1) + sep + ret;
else
ret = numberString.slice(stringIndex - curSize + 1, stringIndex+1);
stringIndex -= curSize;
if (curGroupIndex < groupSizes.length) {
curSize = groupSizes[curGroupIndex];
curGroupIndex++;
}
}
return numberString.slice(0, stringIndex + 1) + sep + ret + right;
}
var nf = cultureInfo.numberFormat;
var number = Math.abs(this);
if (!format)
format = "D";
var precision = -1;
if (format.length > 1) precision = parseInt(format.slice(1), 10);
var pattern;
switch (format.charAt(0)) {
case "d":
case "D":
pattern = 'n';
if (precision !== -1) {
number = zeroPad(""+number, precision, true);
}
if (this < 0) number = -number;
break;
case "c":
case "C":
if (this < 0) pattern = _currencyNegativePattern[nf.CurrencyNegativePattern];
else pattern = _currencyPositivePattern[nf.CurrencyPositivePattern];
if (precision === -1) precision = nf.CurrencyDecimalDigits;
number = expandNumber(Math.abs(this), precision, nf.CurrencyGroupSizes, nf.CurrencyGroupSeparator, nf.CurrencyDecimalSeparator);
break;
case "n":
case "N":
if (this < 0) pattern = _numberNegativePattern[nf.NumberNegativePattern];
else pattern = 'n';
if (precision === -1) precision = nf.NumberDecimalDigits;
number = expandNumber(Math.abs(this), precision, nf.NumberGroupSizes, nf.NumberGroupSeparator, nf.NumberDecimalSeparator);
break;
case "p":
case "P":
if (this < 0) pattern = _percentNegativePattern[nf.PercentNegativePattern];
else pattern = _percentPositivePattern[nf.PercentPositivePattern];
if (precision === -1) precision = nf.PercentDecimalDigits;
number = expandNumber(Math.abs(this) * 100, precision, nf.PercentGroupSizes, nf.PercentGroupSeparator, nf.PercentDecimalSeparator);
break;
default:
throw Error.format(Sys.Res.formatBadFormatSpecifier);
}
var regex = /n|\$|-|%/g;
var ret = "";
for (;;) {
var index = regex.lastIndex;
var ar = regex.exec(pattern);
ret += pattern.slice(index, ar ? ar.index : pattern.length);
if (!ar)
break;
switch (ar[0]) {
case "n":
ret += number;
break;
case "$":
ret += nf.CurrencySymbol;
break;
case "-":
if (/[1-9]/.test(number)) {
ret += nf.NegativeSign;
}
break;
case "%":
ret += nf.PercentSymbol;
break;
default:
Sys.Debug.fail("Invalid number format pattern");
}
}
return ret;
}
Sys.CultureInfo = function Sys$CultureInfo(name, numberFormat, dateTimeFormat) {
var e = Function._validateParams(arguments, [
{name: "name", type: String},
{name: "numberFormat", type: Object},
{name: "dateTimeFormat", type: Object}
]);
if (e) throw e;
this.name = name;
this.numberFormat = numberFormat;
this.dateTimeFormat = dateTimeFormat;
}
function Sys$CultureInfo$_getDateTimeFormats() {
if (! this._dateTimeFormats) {
var dtf = this.dateTimeFormat;
this._dateTimeFormats =
[ dtf.MonthDayPattern,
dtf.YearMonthPattern,
dtf.ShortDatePattern,
dtf.ShortTimePattern,
dtf.LongDatePattern,
dtf.LongTimePattern,
dtf.FullDateTimePattern,
dtf.RFC1123Pattern,
dtf.SortableDateTimePattern,
dtf.UniversalSortableDateTimePattern ];
}
return this._dateTimeFormats;
}
function Sys$CultureInfo$_getIndex(value, a1, a2) {
var upper = this._toUpper(value),
i = Array.indexOf(a1, upper);
if (i === -1) {
i = Array.indexOf(a2, upper);
}
return i;
}
function Sys$CultureInfo$_getMonthIndex(value) {
if (!this._upperMonths) {
this._upperMonths = this._toUpperArray(this.dateTimeFormat.MonthNames);
this._upperMonthsGenitive = this._toUpperArray(this.dateTimeFormat.MonthGenitiveNames);
}
return this._getIndex(value, this._upperMonths, this._upperMonthsGenitive);
}
function Sys$CultureInfo$_getAbbrMonthIndex(value) {
if (!this._upperAbbrMonths) {
this._upperAbbrMonths = this._toUpperArray(this.dateTimeFormat.AbbreviatedMonthNames);
this._upperAbbrMonthsGenitive = this._toUpperArray(this.dateTimeFormat.AbbreviatedMonthGenitiveNames);
}
return this._getIndex(value, this._upperAbbrMonths, this._upperAbbrMonthsGenitive);
}
function Sys$CultureInfo$_getDayIndex(value) {
if (!this._upperDays) {
this._upperDays = this._toUpperArray(this.dateTimeFormat.DayNames);
}
return Array.indexOf(this._upperDays, this._toUpper(value));
}
function Sys$CultureInfo$_getAbbrDayIndex(value) {
if (!this._upperAbbrDays) {
this._upperAbbrDays = this._toUpperArray(this.dateTimeFormat.AbbreviatedDayNames);
}
return Array.indexOf(this._upperAbbrDays, this._toUpper(value));
}
function Sys$CultureInfo$_toUpperArray(arr) {
var result = [];
for (var i = 0, il = arr.length; i < il; i++) {
result[i] = this._toUpper(arr[i]);
}
return result;
}
function Sys$CultureInfo$_toUpper(value) {
return value.split("\u00A0").join(' ').toUpperCase();
}
Sys.CultureInfo.prototype = {
_getDateTimeFormats: Sys$CultureInfo$_getDateTimeFormats,
_getIndex: Sys$CultureInfo$_getIndex,
_getMonthIndex: Sys$CultureInfo$_getMonthIndex,
_getAbbrMonthIndex: Sys$CultureInfo$_getAbbrMonthIndex,
_getDayIndex: Sys$CultureInfo$_getDayIndex,
_getAbbrDayIndex: Sys$CultureInfo$_getAbbrDayIndex,
_toUpperArray: Sys$CultureInfo$_toUpperArray,
_toUpper: Sys$CultureInfo$_toUpper
}
Sys.CultureInfo.registerClass('Sys.CultureInfo');
Sys.CultureInfo._parse = function Sys$CultureInfo$_parse(value) {
var dtf = value.dateTimeFormat;
if (dtf && !dtf.eras) {
dtf.eras = value.eras;
}
return new Sys.CultureInfo(value.name, value.numberFormat, dtf);
}
Sys.CultureInfo.InvariantCulture = Sys.CultureInfo._parse({"name":"","numberFormat":{"CurrencyDecimalDigits":2,"CurrencyDecimalSeparator":".","IsReadOnly":true,"CurrencyGroupSizes":[3],"NumberGroupSizes":[3],"PercentGroupSizes":[3],"CurrencyGroupSeparator":",","CurrencySymbol":"\u00A4","NaNSymbol":"NaN","CurrencyNegativePattern":0,"NumberNegativePattern":1,"PercentPositivePattern":0,"PercentNegativePattern":0,"NegativeInfinitySymbol":"-Infinity","NegativeSign":"-","NumberDecimalDigits":2,"NumberDecimalSeparator":".","NumberGroupSeparator":",","CurrencyPositivePattern":0,"PositiveInfinitySymbol":"Infinity","PositiveSign":"+","PercentDecimalDigits":2,"PercentDecimalSeparator":".","PercentGroupSeparator":",","PercentSymbol":"%","PerMilleSymbol":"\u2030","NativeDigits":["0","1","2","3","4","5","6","7","8","9"],"DigitSubstitution":1},"dateTimeFormat":{"AMDesignator":"AM","Calendar":{"MinSupportedDateTime":"@-62135568000000@","MaxSupportedDateTime":"@253402300799999@","AlgorithmType":1,"CalendarType":1,"Eras":[1],"TwoDigitYearMax":2029,"IsReadOnly":true},"DateSeparator":"/","FirstDayOfWeek":0,"CalendarWeekRule":0,"FullDateTimePattern":"dddd, dd MMMM yyyy HH:mm:ss","LongDatePattern":"dddd, dd MMMM yyyy","LongTimePattern":"HH:mm:ss","MonthDayPattern":"MMMM dd","PMDesignator":"PM","RFC1123Pattern":"ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'","ShortDatePattern":"MM/dd/yyyy","ShortTimePattern":"HH:mm","SortableDateTimePattern":"yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss","TimeSeparator":":","UniversalSortableDateTimePattern":"yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'","YearMonthPattern":"yyyy MMMM","AbbreviatedDayNames":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"ShortestDayNames":["Su","Mo","Tu","We","Th","Fr","Sa"],"DayNames":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"AbbreviatedMonthNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthNames":["January","February","March","April","May","June","July","August","September","October","November","December",""],"IsReadOnly":true,"NativeCalendarName":"Gregorian Calendar","AbbreviatedMonthGenitiveNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthGenitiveNames":["January","February","March","April","May","June","July","August","September","October","November","December",""]},"eras":[1,"A.D.",null,0]});
if (typeof(__cultureInfo) === "object") {
Sys.CultureInfo.CurrentCulture = Sys.CultureInfo._parse(__cultureInfo);
delete __cultureInfo;
}
else {
Sys.CultureInfo.CurrentCulture = Sys.CultureInfo._parse({"name":"en-US","numberFormat":{"CurrencyDecimalDigits":2,"CurrencyDecimalSeparator":".","IsReadOnly":false,"CurrencyGroupSizes":[3],"NumberGroupSizes":[3],"PercentGroupSizes":[3],"CurrencyGroupSeparator":",","CurrencySymbol":"$","NaNSymbol":"NaN","CurrencyNegativePattern":0,"NumberNegativePattern":1,"PercentPositivePattern":0,"PercentNegativePattern":0,"NegativeInfinitySymbol":"-Infinity","NegativeSign":"-","NumberDecimalDigits":2,"NumberDecimalSeparator":".","NumberGroupSeparator":",","CurrencyPositivePattern":0,"PositiveInfinitySymbol":"Infinity","PositiveSign":"+","PercentDecimalDigits":2,"PercentDecimalSeparator":".","PercentGroupSeparator":",","PercentSymbol":"%","PerMilleSymbol":"\u2030","NativeDigits":["0","1","2","3","4","5","6","7","8","9"],"DigitSubstitution":1},"dateTimeFormat":{"AMDesignator":"AM","Calendar":{"MinSupportedDateTime":"@-62135568000000@","MaxSupportedDateTime":"@253402300799999@","AlgorithmType":1,"CalendarType":1,"Eras":[1],"TwoDigitYearMax":2029,"IsReadOnly":false},"DateSeparator":"/","FirstDayOfWeek":0,"CalendarWeekRule":0,"FullDateTimePattern":"dddd, MMMM dd, yyyy h:mm:ss tt","LongDatePattern":"dddd, MMMM dd, yyyy","LongTimePattern":"h:mm:ss tt","MonthDayPattern":"MMMM dd","PMDesignator":"PM","RFC1123Pattern":"ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'","ShortDatePattern":"M/d/yyyy","ShortTimePattern":"h:mm tt","SortableDateTimePattern":"yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss","TimeSeparator":":","UniversalSortableDateTimePattern":"yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'","YearMonthPattern":"MMMM, yyyy","AbbreviatedDayNames":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"ShortestDayNames":["Su","Mo","Tu","We","Th","Fr","Sa"],"DayNames":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"AbbreviatedMonthNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthNames":["January","February","March","April","May","June","July","August","September","October","November","December",""],"IsReadOnly":false,"NativeCalendarName":"Gregorian Calendar","AbbreviatedMonthGenitiveNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthGenitiveNames":["January","February","March","April","May","June","July","August","September","October","November","December",""]},"eras":[1,"A.D.",null,0]});
}
Type.registerNamespace('Sys.Serialization');
Sys.Serialization.JavaScriptSerializer = function Sys$Serialization$JavaScriptSerializer() {
if (arguments.length !== 0) throw Error.parameterCount();
}
Sys.Serialization.JavaScriptSerializer.registerClass('Sys.Serialization.JavaScriptSerializer');
Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs = [];
Sys.Serialization.JavaScriptSerializer._charsToEscape = [];
Sys.Serialization.JavaScriptSerializer._dateRegEx = new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"', 'g');
Sys.Serialization.JavaScriptSerializer._escapeChars = {};
Sys.Serialization.JavaScriptSerializer._escapeRegEx = new RegExp('["\\\\\\x00-\\x1F]', 'i');
Sys.Serialization.JavaScriptSerializer._escapeRegExGlobal = new RegExp('["\\\\\\x00-\\x1F]', 'g');
Sys.Serialization.JavaScriptSerializer._jsonRegEx = new RegExp('[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]', 'g');
Sys.Serialization.JavaScriptSerializer._jsonStringRegEx = new RegExp('"(\\\\.|[^"\\\\])*"', 'g');
Sys.Serialization.JavaScriptSerializer._serverTypeFieldName = '__type';
Sys.Serialization.JavaScriptSerializer._init = function Sys$Serialization$JavaScriptSerializer$_init() {
var replaceChars = ['\\u0000','\\u0001','\\u0002','\\u0003','\\u0004','\\u0005','\\u0006','\\u0007',
'\\b','\\t','\\n','\\u000b','\\f','\\r','\\u000e','\\u000f','\\u0010','\\u0011',
'\\u0012','\\u0013','\\u0014','\\u0015','\\u0016','\\u0017','\\u0018','\\u0019',
'\\u001a','\\u001b','\\u001c','\\u001d','\\u001e','\\u001f'];
Sys.Serialization.JavaScriptSerializer._charsToEscape[0] = '\\';
Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs['\\'] = new RegExp('\\\\', 'g');
Sys.Serialization.JavaScriptSerializer._escapeChars['\\'] = '\\\\';
Sys.Serialization.JavaScriptSerializer._charsToEscape[1] = '"';
Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs['"'] = new RegExp('"', 'g');
Sys.Serialization.JavaScriptSerializer._escapeChars['"'] = '\\"';
for (var i = 0; i < 32; i++) {
var c = String.fromCharCode(i);
Sys.Serialization.JavaScriptSerializer._charsToEscape[i+2] = c;
Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[c] = new RegExp(c, 'g');
Sys.Serialization.JavaScriptSerializer._escapeChars[c] = replaceChars[i];
}
}
Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeBooleanWithBuilder(object, stringBuilder) {
stringBuilder.append(object.toString());
}
Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeNumberWithBuilder(object, stringBuilder) {
if (isFinite(object)) {
stringBuilder.append(String(object));
}
else {
throw Error.invalidOperation(Sys.Res.cannotSerializeNonFiniteNumbers);
}
}
Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeStringWithBuilder(string, stringBuilder) {
stringBuilder.append('"');
if (Sys.Serialization.JavaScriptSerializer._escapeRegEx.test(string)) {
if (Sys.Serialization.JavaScriptSerializer._charsToEscape.length === 0) {
Sys.Serialization.JavaScriptSerializer._init();
}
if (string.length < 128) {
string = string.replace(Sys.Serialization.JavaScriptSerializer._escapeRegExGlobal,
function(x) { return Sys.Serialization.JavaScriptSerializer._escapeChars[x]; });
}
else {
for (var i = 0; i < 34; i++) {
var c = Sys.Serialization.JavaScriptSerializer._charsToEscape[i];
if (string.indexOf(c) !== -1) {
if (Sys.Browser.agent === Sys.Browser.Opera || Sys.Browser.agent === Sys.Browser.FireFox) {
string = string.split(c).join(Sys.Serialization.JavaScriptSerializer._escapeChars[c]);
}
else {
string = string.replace(Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[c],
Sys.Serialization.JavaScriptSerializer._escapeChars[c]);
}
}
}
}
}
stringBuilder.append(string);
stringBuilder.append('"');
}
Sys.Serialization.JavaScriptSerializer._serializeWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeWithBuilder(object, stringBuilder, sort, prevObjects) {
var i;
switch (typeof object) {
case 'object':
if (object) {
if (prevObjects){
for( var j = 0; j < prevObjects.length; j++) {
if (prevObjects[j] === object) {
throw Error.invalidOperation(Sys.Res.cannotSerializeObjectWithCycle);
}
}
}
else {
prevObjects = new Array();
}
try {
Array.add(prevObjects, object);
if (Number.isInstanceOfType(object)){
Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(object, stringBuilder);
}
else if (Boolean.isInstanceOfType(object)){
Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(object, stringBuilder);
}
else if (String.isInstanceOfType(object)){
Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(object, stringBuilder);
}
else if (Array.isInstanceOfType(object)) {
stringBuilder.append('[');
for (i = 0; i < object.length; ++i) {
if (i > 0) {
stringBuilder.append(',');
}
Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(object[i], stringBuilder,false,prevObjects);
}
stringBuilder.append(']');
}
else {
if (Date.isInstanceOfType(object)) {
stringBuilder.append('"\\/Date(');
stringBuilder.append(object.getTime());
stringBuilder.append(')\\/"');
break;
}
var properties = [];
var propertyCount = 0;
for (var name in object) {
if (name.startsWith('$')) {
continue;
}
if (name === Sys.Serialization.JavaScriptSerializer._serverTypeFieldName && propertyCount !== 0){
properties[propertyCount++] = properties[0];
properties[0] = name;
}
else{
properties[propertyCount++] = name;
}
}
if (sort) properties.sort();
stringBuilder.append('{');
var needComma = false;
for (i=0; i<propertyCount; i++) {
var value = object[properties[i]];
if (typeof value !== 'undefined' && typeof value !== 'function') {
if (needComma) {
stringBuilder.append(',');
}
else {
needComma = true;
}
Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(properties[i], stringBuilder, sort, prevObjects);
stringBuilder.append(':');
Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(value, stringBuilder, sort, prevObjects);
}
}
stringBuilder.append('}');
}
}
finally {
Array.removeAt(prevObjects, prevObjects.length - 1);
}
}
else {
stringBuilder.append('null');
}
break;
case 'number':
Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(object, stringBuilder);
break;
case 'string':
Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(object, stringBuilder);
break;
case 'boolean':
Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(object, stringBuilder);
break;
default:
stringBuilder.append('null');
break;
}
}
Sys.Serialization.JavaScriptSerializer.serialize = function Sys$Serialization$JavaScriptSerializer$serialize(object) {
var e = Function._validateParams(arguments, [
{name: "object", mayBeNull: true}
]);
if (e) throw e;
var stringBuilder = new Sys.StringBuilder();
Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(object, stringBuilder, false);
return stringBuilder.toString();
}
Sys.Serialization.JavaScriptSerializer.deserialize = function Sys$Serialization$JavaScriptSerializer$deserialize(data, secure) {
var e = Function._validateParams(arguments, [
{name: "data", type: String},
{name: "secure", type: Boolean, optional: true}
]);
if (e) throw e;
if (data.length === 0) throw Error.argument('data', Sys.Res.cannotDeserializeEmptyString);
try {
var exp = data.replace(Sys.Serialization.JavaScriptSerializer._dateRegEx, "$1new Date($2)");
if (secure && Sys.Serialization.JavaScriptSerializer._jsonRegEx.test(
exp.replace(Sys.Serialization.JavaScriptSerializer._jsonStringRegEx, ''))) throw null;
return eval('(' + exp + ')');
}
catch (e) {
throw Error.argument('data', Sys.Res.cannotDeserializeInvalidJson);
}
}
Type.registerNamespace('Sys.UI');
Sys.EventHandlerList = function Sys$EventHandlerList() {
if (arguments.length !== 0) throw Error.parameterCount();
this._list = {};
}
function Sys$EventHandlerList$_addHandler(id, handler) {
Array.add(this._getEvent(id, true), handler);
}
function Sys$EventHandlerList$addHandler(id, handler) {
var e = Function._validateParams(arguments, [
{name: "id", type: String},
{name: "handler", type: Function}
]);
if (e) throw e;
this._addHandler(id, handler);
}
function Sys$EventHandlerList$_removeHandler(id, handler) {
var evt = this._getEvent(id);
if (!evt) return;
Array.remove(evt, handler);
}
function Sys$EventHandlerList$removeHandler(id, handler) {
var e = Function._validateParams(arguments, [
{name: "id", type: String},
{name: "handler", type: Function}
]);
if (e) throw e;
this._removeHandler(id, handler);
}
function Sys$EventHandlerList$getHandler(id) {
var e = Function._validateParams(arguments, [
{name: "id", type: String}
]);
if (e) throw e;
var evt = this._getEvent(id);
if (!evt || (evt.length === 0)) return null;
evt = Array.clone(evt);
return function(source, args) {
for (var i = 0, l = evt.length; i < l; i++) {
evt[i](source, args);
}
};
}
function Sys$EventHandlerList$_getEvent(id, create) {
if (!this._list[id]) {
if (!create) return null;
this._list[id] = [];
}
return this._list[id];
}
Sys.EventHandlerList.prototype = {
_addHandler: Sys$EventHandlerList$_addHandler,
addHandler: Sys$EventHandlerList$addHandler,
_removeHandler: Sys$EventHandlerList$_removeHandler,
removeHandler: Sys$EventHandlerList$removeHandler,
getHandler: Sys$EventHandlerList$getHandler,
_getEvent: Sys$EventHandlerList$_getEvent
}
Sys.EventHandlerList.registerClass('Sys.EventHandlerList');
Sys.CommandEventArgs = function Sys$CommandEventArgs(commandName, commandArgument, commandSource) {
var e = Function._validateParams(arguments, [
{name: "commandName", type: String},
{name: "commandArgument", mayBeNull: true},
{name: "commandSource", mayBeNull: true}
]);
if (e) throw e;
Sys.CommandEventArgs.initializeBase(this);
this._commandName = commandName;
this._commandArgument = commandArgument;
this._commandSource = commandSource;
}
function Sys$CommandEventArgs$get_commandName() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._commandName;
}
function Sys$CommandEventArgs$get_commandArgument() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._commandArgument;
}
function Sys$CommandEventArgs$get_commandSource() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._commandSource;
}
Sys.CommandEventArgs.prototype = {
_commandName: null,
_commandArgument: null,
_commandSource: null,
get_commandName: Sys$CommandEventArgs$get_commandName,
get_commandArgument: Sys$CommandEventArgs$get_commandArgument,
get_commandSource: Sys$CommandEventArgs$get_commandSource
}
Sys.CommandEventArgs.registerClass("Sys.CommandEventArgs", Sys.CancelEventArgs);
Sys.INotifyPropertyChange = function Sys$INotifyPropertyChange() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$INotifyPropertyChange$add_propertyChanged(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
throw Error.notImplemented();
}
function Sys$INotifyPropertyChange$remove_propertyChanged(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
throw Error.notImplemented();
}
Sys.INotifyPropertyChange.prototype = {
add_propertyChanged: Sys$INotifyPropertyChange$add_propertyChanged,
remove_propertyChanged: Sys$INotifyPropertyChange$remove_propertyChanged
}
Sys.INotifyPropertyChange.registerInterface('Sys.INotifyPropertyChange');
Sys.PropertyChangedEventArgs = function Sys$PropertyChangedEventArgs(propertyName) {
var e = Function._validateParams(arguments, [
{name: "propertyName", type: String}
]);
if (e) throw e;
Sys.PropertyChangedEventArgs.initializeBase(this);
this._propertyName = propertyName;
}
function Sys$PropertyChangedEventArgs$get_propertyName() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._propertyName;
}
Sys.PropertyChangedEventArgs.prototype = {
get_propertyName: Sys$PropertyChangedEventArgs$get_propertyName
}
Sys.PropertyChangedEventArgs.registerClass('Sys.PropertyChangedEventArgs', Sys.EventArgs);
Sys.INotifyDisposing = function Sys$INotifyDisposing() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$INotifyDisposing$add_disposing(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
throw Error.notImplemented();
}
function Sys$INotifyDisposing$remove_disposing(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
throw Error.notImplemented();
}
Sys.INotifyDisposing.prototype = {
add_disposing: Sys$INotifyDisposing$add_disposing,
remove_disposing: Sys$INotifyDisposing$remove_disposing
}
Sys.INotifyDisposing.registerInterface("Sys.INotifyDisposing");
Sys.Component = function Sys$Component() {
if (arguments.length !== 0) throw Error.parameterCount();
if (Sys.Application) Sys.Application.registerDisposableObject(this);
}
function Sys$Component$get_events() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._events) {
this._events = new Sys.EventHandlerList();
}
return this._events;
}
function Sys$Component$get_id() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._id;
}
function Sys$Component$set_id(value) {
var e = Function._validateParams(arguments, [{name: "value", type: String}]);
if (e) throw e;
if (this._idSet) throw Error.invalidOperation(Sys.Res.componentCantSetIdTwice);
this._idSet = true;
var oldId = this.get_id();
if (oldId && Sys.Application.findComponent(oldId)) throw Error.invalidOperation(Sys.Res.componentCantSetIdAfterAddedToApp);
this._id = value;
}
function Sys$Component$get_isInitialized() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._initialized;
}
function Sys$Component$get_isUpdating() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._updating;
}
function Sys$Component$add_disposing(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this.get_events().addHandler("disposing", handler);
}
function Sys$Component$remove_disposing(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this.get_events().removeHandler("disposing", handler);
}
function Sys$Component$add_propertyChanged(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this.get_events().addHandler("propertyChanged", handler);
}
function Sys$Component$remove_propertyChanged(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this.get_events().removeHandler("propertyChanged", handler);
}
function Sys$Component$beginUpdate() {
this._updating = true;
}
function Sys$Component$dispose() {
if (this._events) {
var handler = this._events.getHandler("disposing");
if (handler) {
handler(this, Sys.EventArgs.Empty);
}
}
delete this._events;
Sys.Application.unregisterDisposableObject(this);
Sys.Application.removeComponent(this);
}
function Sys$Component$endUpdate() {
this._updating = false;
if (!this._initialized) this.initialize();
this.updated();
}
function Sys$Component$initialize() {
this._initialized = true;
}
function Sys$Component$raisePropertyChanged(propertyName) {
var e = Function._validateParams(arguments, [
{name: "propertyName", type: String}
]);
if (e) throw e;
if (!this._events) return;
var handler = this._events.getHandler("propertyChanged");
if (handler) {
handler(this, new Sys.PropertyChangedEventArgs(propertyName));
}
}
function Sys$Component$updated() {
}
Sys.Component.prototype = {
_id: null,
_idSet: false,
_initialized: false,
_updating: false,
get_events: Sys$Component$get_events,
get_id: Sys$Component$get_id,
set_id: Sys$Component$set_id,
get_isInitialized: Sys$Component$get_isInitialized,
get_isUpdating: Sys$Component$get_isUpdating,
add_disposing: Sys$Component$add_disposing,
remove_disposing: Sys$Component$remove_disposing,
add_propertyChanged: Sys$Component$add_propertyChanged,
remove_propertyChanged: Sys$Component$remove_propertyChanged,
beginUpdate: Sys$Component$beginUpdate,
dispose: Sys$Component$dispose,
endUpdate: Sys$Component$endUpdate,
initialize: Sys$Component$initialize,
raisePropertyChanged: Sys$Component$raisePropertyChanged,
updated: Sys$Component$updated
}
Sys.Component.registerClass('Sys.Component', null, Sys.IDisposable, Sys.INotifyPropertyChange, Sys.INotifyDisposing);
function Sys$Component$_setProperties(target, properties) {
var e = Function._validateParams(arguments, [
{name: "target"},
{name: "properties"}
]);
if (e) throw e;
var current;
var targetType = Object.getType(target);
var isObject = (targetType === Object) || (targetType === Sys.UI.DomElement);
var isComponent = Sys.Component.isInstanceOfType(target) && !target.get_isUpdating();
if (isComponent) target.beginUpdate();
for (var name in properties) {
var val = properties[name];
var getter = isObject ? null : target["get_" + name];
if (isObject || typeof(getter) !== 'function') {
var targetVal = target[name];
if (!isObject && typeof(targetVal) === 'undefined') throw Error.invalidOperation(String.format(Sys.Res.propertyUndefined, name));
if (!val || (typeof(val) !== 'object') || (isObject && !targetVal)) {
target[name] = val;
}
else {
Sys$Component$_setProperties(targetVal, val);
}
}
else {
var setter = target["set_" + name];
if (typeof(setter) === 'function') {
setter.apply(target, [val]);
}
else if (val instanceof Array) {
current = getter.apply(target);
if (!(current instanceof Array)) throw new Error.invalidOperation(String.format(Sys.Res.propertyNotAnArray, name));
for (var i = 0, j = current.length, l= val.length; i < l; i++, j++) {
current[j] = val[i];
}
}
else if ((typeof(val) === 'object') && (Object.getType(val) === Object)) {
current = getter.apply(target);
if ((typeof(current) === 'undefined') || (current === null)) throw new Error.invalidOperation(String.format(Sys.Res.propertyNullOrUndefined, name));
Sys$Component$_setProperties(current, val);
}
else {
throw new Error.invalidOperation(String.format(Sys.Res.propertyNotWritable, name));
}
}
}
if (isComponent) target.endUpdate();
}
function Sys$Component$_setReferences(component, references) {
for (var name in references) {
var setter = component["set_" + name];
var reference = $find(references[name]);
if (typeof(setter) !== 'function') throw new Error.invalidOperation(String.format(Sys.Res.propertyNotWritable, name));
if (!reference) throw Error.invalidOperation(String.format(Sys.Res.referenceNotFound, references[name]));
setter.apply(component, [reference]);
}
}
var $create = Sys.Component.create = function Sys$Component$create(type, properties, events, references, element) {
var e = Function._validateParams(arguments, [
{name: "type", type: Type},
{name: "properties", mayBeNull: true, optional: true},
{name: "events", mayBeNull: true, optional: true},
{name: "references", mayBeNull: true, optional: true},
{name: "element", mayBeNull: true, domElement: true, optional: true}
]);
if (e) throw e;
if (!type.inheritsFrom(Sys.Component)) {
throw Error.argument('type', String.format(Sys.Res.createNotComponent, type.getName()));
}
if (type.inheritsFrom(Sys.UI.Behavior) || type.inheritsFrom(Sys.UI.Control)) {
if (!element) throw Error.argument('element', Sys.Res.createNoDom);
}
else if (element) throw Error.argument('element', Sys.Res.createComponentOnDom);
var component = (element ? new type(element): new type());
var app = Sys.Application;
var creatingComponents = app.get_isCreatingComponents();
component.beginUpdate();
if (properties) {
Sys$Component$_setProperties(component, properties);
}
if (events) {
for (var name in events) {
if (!(component["add_" + name] instanceof Function)) throw new Error.invalidOperation(String.format(Sys.Res.undefinedEvent, name));
if (!(events[name] instanceof Function)) throw new Error.invalidOperation(Sys.Res.eventHandlerNotFunction);
component["add_" + name](events[name]);
}
}
if (component.get_id()) {
app.addComponent(component);
}
if (creatingComponents) {
app._createdComponents[app._createdComponents.length] = component;
if (references) {
app._addComponentToSecondPass(component, references);
}
else {
component.endUpdate();
}
}
else {
if (references) {
Sys$Component$_setReferences(component, references);
}
component.endUpdate();
}
return component;
}
Sys.UI.MouseButton = function Sys$UI$MouseButton() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
Sys.UI.MouseButton.prototype = {
leftButton: 0,
middleButton: 1,
rightButton: 2
}
Sys.UI.MouseButton.registerEnum("Sys.UI.MouseButton");
Sys.UI.Key = function Sys$UI$Key() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
Sys.UI.Key.prototype = {
backspace: 8,
tab: 9,
enter: 13,
esc: 27,
space: 32,
pageUp: 33,
pageDown: 34,
end: 35,
home: 36,
left: 37,
up: 38,
right: 39,
down: 40,
del: 127
}
Sys.UI.Key.registerEnum("Sys.UI.Key");
Sys.UI.Point = function Sys$UI$Point(x, y) {
var e = Function._validateParams(arguments, [
{name: "x", type: Number, integer: true},
{name: "y", type: Number, integer: true}
]);
if (e) throw e;
this.x = x;
this.y = y;
}
Sys.UI.Point.registerClass('Sys.UI.Point');
Sys.UI.Bounds = function Sys$UI$Bounds(x, y, width, height) {
var e = Function._validateParams(arguments, [
{name: "x", type: Number, integer: true},
{name: "y", type: Number, integer: true},
{name: "width", type: Number, integer: true},
{name: "height", type: Number, integer: true}
]);
if (e) throw e;
this.x = x;
this.y = y;
this.height = height;
this.width = width;
}
Sys.UI.Bounds.registerClass('Sys.UI.Bounds');
Sys.UI.DomEvent = function Sys$UI$DomEvent(eventObject) {
var e = Function._validateParams(arguments, [
{name: "eventObject"}
]);
if (e) throw e;
var ev = eventObject;
var etype = this.type = ev.type.toLowerCase();
this.rawEvent = ev;
this.altKey = ev.altKey;
if (typeof(ev.button) !== 'undefined') {
this.button = (typeof(ev.which) !== 'undefined') ? ev.button :
(ev.button === 4) ? Sys.UI.MouseButton.middleButton :
(ev.button === 2) ? Sys.UI.MouseButton.rightButton :
Sys.UI.MouseButton.leftButton;
}
if (etype === 'keypress') {
this.charCode = ev.charCode || ev.keyCode;
}
else if (ev.keyCode && (ev.keyCode === 46)) {
this.keyCode = 127;
}
else {
this.keyCode = ev.keyCode;
}
this.clientX = ev.clientX;
this.clientY = ev.clientY;
this.ctrlKey = ev.ctrlKey;
this.target = ev.target ? ev.target : ev.srcElement;
if (!etype.startsWith('key')) {
if ((typeof(ev.offsetX) !== 'undefined') && (typeof(ev.offsetY) !== 'undefined')) {
this.offsetX = ev.offsetX;
this.offsetY = ev.offsetY;
}
else if (this.target && (this.target.nodeType !== 3) && (typeof(ev.clientX) === 'number')) {
var loc = Sys.UI.DomElement.getLocation(this.target);
var w = Sys.UI.DomElement._getWindow(this.target);
this.offsetX = (w.pageXOffset || 0) + ev.clientX - loc.x;
this.offsetY = (w.pageYOffset || 0) + ev.clientY - loc.y;
}
}
this.screenX = ev.screenX;
this.screenY = ev.screenY;
this.shiftKey = ev.shiftKey;
}
function Sys$UI$DomEvent$preventDefault() {
if (arguments.length !== 0) throw Error.parameterCount();
if (this.rawEvent.preventDefault) {
this.rawEvent.preventDefault();
}
else if (window.event) {
this.rawEvent.returnValue = false;
}
}
function Sys$UI$DomEvent$stopPropagation() {
if (arguments.length !== 0) throw Error.parameterCount();
if (this.rawEvent.stopPropagation) {
this.rawEvent.stopPropagation();
}
else if (window.event) {
this.rawEvent.cancelBubble = true;
}
}
Sys.UI.DomEvent.prototype = {
preventDefault: Sys$UI$DomEvent$preventDefault,
stopPropagation: Sys$UI$DomEvent$stopPropagation
}
Sys.UI.DomEvent.registerClass('Sys.UI.DomEvent');
var $addHandler = Sys.UI.DomEvent.addHandler = function Sys$UI$DomEvent$addHandler(element, eventName, handler, autoRemove) {
var e = Function._validateParams(arguments, [
{name: "element"},
{name: "eventName", type: String},
{name: "handler", type: Function},
{name: "autoRemove", type: Boolean, optional: true}
]);
if (e) throw e;
Sys.UI.DomEvent._ensureDomNode(element);
if (eventName === "error") throw Error.invalidOperation(Sys.Res.addHandlerCantBeUsedForError);
if (!element._events) {
element._events = {};
}
var eventCache = element._events[eventName];
if (!eventCache) {
element._events[eventName] = eventCache = [];
}
var browserHandler;
if (element.addEventListener) {
browserHandler = function(e) {
return handler.call(element, new Sys.UI.DomEvent(e));
}
element.addEventListener(eventName, browserHandler, false);
}
else if (element.attachEvent) {
browserHandler = function() {
var e = {};
try {e = Sys.UI.DomElement._getWindow(element).event} catch(ex) {}
return handler.call(element, new Sys.UI.DomEvent(e));
}
element.attachEvent('on' + eventName, browserHandler);
}
eventCache[eventCache.length] = {handler: handler, browserHandler: browserHandler, autoRemove: autoRemove };
if (autoRemove) {
var d = element.dispose;
if (d !== Sys.UI.DomEvent._disposeHandlers) {
element.dispose = Sys.UI.DomEvent._disposeHandlers;
if (typeof(d) !== "undefined") {
element._chainDispose = d;
}
}
}
}
var $addHandlers = Sys.UI.DomEvent.addHandlers = function Sys$UI$DomEvent$addHandlers(element, events, handlerOwner, autoRemove) {
var e = Function._validateParams(arguments, [
{name: "element"},
{name: "events", type: Object},
{name: "handlerOwner", optional: true},
{name: "autoRemove", type: Boolean, optional: true}
]);
if (e) throw e;
Sys.UI.DomEvent._ensureDomNode(element);
for (var name in events) {
var handler = events[name];
if (typeof(handler) !== 'function') throw Error.invalidOperation(Sys.Res.cantAddNonFunctionhandler);
if (handlerOwner) {
handler = Function.createDelegate(handlerOwner, handler);
}
$addHandler(element, name, handler, autoRemove || false);
}
}
var $clearHandlers = Sys.UI.DomEvent.clearHandlers = function Sys$UI$DomEvent$clearHandlers(element) {
var e = Function._validateParams(arguments, [
{name: "element"}
]);
if (e) throw e;
Sys.UI.DomEvent._ensureDomNode(element);
Sys.UI.DomEvent._clearHandlers(element, false);
}
Sys.UI.DomEvent._clearHandlers = function Sys$UI$DomEvent$_clearHandlers(element, autoRemoving) {
if (element._events) {
var cache = element._events;
for (var name in cache) {
var handlers = cache[name];
for (var i = handlers.length - 1; i >= 0; i--) {
var entry = handlers[i];
if (!autoRemoving || entry.autoRemove) {
$removeHandler(element, name, entry.handler);
}
}
}
element._events = null;
}
}
Sys.UI.DomEvent._disposeHandlers = function Sys$UI$DomEvent$_disposeHandlers() {
Sys.UI.DomEvent._clearHandlers(this, true);
var d = this._chainDispose, type = typeof(d);
if (type !== "undefined") {
this.dispose = d;
this._chainDispose = null;
if (type === "function") {
this.dispose();
}
}
}
var $removeHandler = Sys.UI.DomEvent.removeHandler = function Sys$UI$DomEvent$removeHandler(element, eventName, handler) {
var e = Function._validateParams(arguments, [
{name: "element"},
{name: "eventName", type: String},
{name: "handler", type: Function}
]);
if (e) throw e;
Sys.UI.DomEvent._removeHandler(element, eventName, handler);
}
Sys.UI.DomEvent._removeHandler = function Sys$UI$DomEvent$_removeHandler(element, eventName, handler) {
Sys.UI.DomEvent._ensureDomNode(element);
var browserHandler = null;
if ((typeof(element._events) !== 'object') || !element._events) throw Error.invalidOperation(Sys.Res.eventHandlerInvalid);
var cache = element._events[eventName];
if (!(cache instanceof Array)) throw Error.invalidOperation(Sys.Res.eventHandlerInvalid);
for (var i = 0, l = cache.length; i < l; i++) {
if (cache[i].handler === handler) {
browserHandler = cache[i].browserHandler;
break;
}
}
if (typeof(browserHandler) !== 'function') throw Error.invalidOperation(Sys.Res.eventHandlerInvalid);
if (element.removeEventListener) {
element.removeEventListener(eventName, browserHandler, false);
}
else if (element.detachEvent) {
element.detachEvent('on' + eventName, browserHandler);
}
cache.splice(i, 1);
}
Sys.UI.DomEvent._ensureDomNode = function Sys$UI$DomEvent$_ensureDomNode(element) {
if (element.tagName && (element.tagName.toUpperCase() === "SCRIPT")) return;
var doc = element.ownerDocument || element.document || element;
if ((typeof(element.document) !== 'object') && (element != doc) && (typeof(element.nodeType) !== 'number')) {
throw Error.argument("element", Sys.Res.argumentDomNode);
}
}
Sys.UI.DomElement = function Sys$UI$DomElement() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
Sys.UI.DomElement.registerClass('Sys.UI.DomElement');
Sys.UI.DomElement.addCssClass = function Sys$UI$DomElement$addCssClass(element, className) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true},
{name: "className", type: String}
]);
if (e) throw e;
if (!Sys.UI.DomElement.containsCssClass(element, className)) {
if (element.className === '') {
element.className = className;
}
else {
element.className += ' ' + className;
}
}
}
Sys.UI.DomElement.containsCssClass = function Sys$UI$DomElement$containsCssClass(element, className) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true},
{name: "className", type: String}
]);
if (e) throw e;
return Array.contains(element.className.split(' '), className);
}
Sys.UI.DomElement.getBounds = function Sys$UI$DomElement$getBounds(element) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true}
]);
if (e) throw e;
var offset = Sys.UI.DomElement.getLocation(element);
return new Sys.UI.Bounds(offset.x, offset.y, element.offsetWidth || 0, element.offsetHeight || 0);
}
var $get = Sys.UI.DomElement.getElementById = function Sys$UI$DomElement$getElementById(id, element) {
var e = Function._validateParams(arguments, [
{name: "id", type: String},
{name: "element", mayBeNull: true, domElement: true, optional: true}
]);
if (e) throw e;
if (!element) return document.getElementById(id);
if (element.getElementById) return element.getElementById(id);
var nodeQueue = [];
var childNodes = element.childNodes;
for (var i = 0; i < childNodes.length; i++) {
var node = childNodes[i];
if (node.nodeType == 1) {
nodeQueue[nodeQueue.length] = node;
}
}
while (nodeQueue.length) {
node = nodeQueue.shift();
if (node.id == id) {
return node;
}
childNodes = node.childNodes;
for (i = 0; i < childNodes.length; i++) {
node = childNodes[i];
if (node.nodeType == 1) {
nodeQueue[nodeQueue.length] = node;
}
}
}
return null;
}
if (document.documentElement.getBoundingClientRect) {
Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true}
]);
if (e) throw e;
if (element.self || element.nodeType === 9) return new Sys.UI.Point(0,0);
var clientRect = element.getBoundingClientRect();
if (!clientRect) {
return new Sys.UI.Point(0,0);
}
var documentElement = element.ownerDocument.documentElement,
offsetX = Math.floor(clientRect.left + 0.5) + documentElement.scrollLeft,
offsetY = Math.floor(clientRect.top + 0.5) + documentElement.scrollTop;
if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
try {
var f = element.ownerDocument.parentWindow.frameElement || null;
if (f) {
var offset = (f.frameBorder === "0" || f.frameBorder === "no") ? 2 : 0;
offsetX += offset;
offsetY += offset;
}
}
catch(ex) {
}
if (Sys.Browser.version <= 7) {
var multiplier, before, rect, d = document.createElement("div");
d.style.cssText = "position:absolute !important;left:0px !important;right:0px !important;height:0px !important;width:1px !important;display:hidden !important";
try {
before = document.body.childNodes[0];
document.body.insertBefore(d, before);
rect = d.getBoundingClientRect();
document.body.removeChild(d);
multiplier = (rect.right - rect.left);
}
catch (e) {
}
if (multiplier && (multiplier !== 1)) {
offsetX = Math.floor(offsetX / multiplier);
offsetY = Math.floor(offsetY / multiplier);
}
}
if ((document.documentMode || 0) < 8) {
offsetX -= 2;
offsetY -= 2;
}
}
return new Sys.UI.Point(offsetX, offsetY);
}
}
else if (Sys.Browser.agent === Sys.Browser.Safari) {
Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true}
]);
if (e) throw e;
if ((element.window && (element.window === element)) || element.nodeType === 9) return new Sys.UI.Point(0,0);
var offsetX = 0, offsetY = 0,
parent,
previous = null,
previousStyle = null,
currentStyle;
for (parent = element; parent; previous = parent, previousStyle = currentStyle, parent = parent.offsetParent) {
currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
var tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
if ((parent.offsetLeft || parent.offsetTop) &&
((tagName !== "BODY") || (!previousStyle || previousStyle.position !== "absolute"))) {
offsetX += parent.offsetLeft;
offsetY += parent.offsetTop;
}
if (previous && Sys.Browser.version >= 3) {
offsetX += parseInt(currentStyle.borderLeftWidth);
offsetY += parseInt(currentStyle.borderTopWidth);
}
}
currentStyle = Sys.UI.DomElement._getCurrentStyle(element);
var elementPosition = currentStyle ? currentStyle.position : null;
if (!elementPosition || (elementPosition !== "absolute")) {
for (parent = element.parentNode; parent; parent = parent.parentNode) {
tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
if ((tagName !== "BODY") && (tagName !== "HTML") && (parent.scrollLeft || parent.scrollTop)) {
offsetX -= (parent.scrollLeft || 0);
offsetY -= (parent.scrollTop || 0);
}
currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
var parentPosition = currentStyle ? currentStyle.position : null;
if (parentPosition && (parentPosition === "absolute")) break;
}
}
return new Sys.UI.Point(offsetX, offsetY);
}
}
else {
Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true}
]);
if (e) throw e;
if ((element.window && (element.window === element)) || element.nodeType === 9) return new Sys.UI.Point(0,0);
var offsetX = 0, offsetY = 0,
parent,
previous = null,
previousStyle = null,
currentStyle = null;
for (parent = element; parent; previous = parent, previousStyle = currentStyle, parent = parent.offsetParent) {
var tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
if ((parent.offsetLeft || parent.offsetTop) &&
!((tagName === "BODY") &&
(!previousStyle || previousStyle.position !== "absolute"))) {
offsetX += parent.offsetLeft;
offsetY += parent.offsetTop;
}
if (previous !== null && currentStyle) {
if ((tagName !== "TABLE") && (tagName !== "TD") && (tagName !== "HTML")) {
offsetX += parseInt(currentStyle.borderLeftWidth) || 0;
offsetY += parseInt(currentStyle.borderTopWidth) || 0;
}
if (tagName === "TABLE" &&
(currentStyle.position === "relative" || currentStyle.position === "absolute")) {
offsetX += parseInt(currentStyle.marginLeft) || 0;
offsetY += parseInt(currentStyle.marginTop) || 0;
}
}
}
currentStyle = Sys.UI.DomElement._getCurrentStyle(element);
var elementPosition = currentStyle ? currentStyle.position : null;
if (!elementPosition || (elementPosition !== "absolute")) {
for (parent = element.parentNode; parent; parent = parent.parentNode) {
tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
if ((tagName !== "BODY") && (tagName !== "HTML") && (parent.scrollLeft || parent.scrollTop)) {
offsetX -= (parent.scrollLeft || 0);
offsetY -= (parent.scrollTop || 0);
currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
if (currentStyle) {
offsetX += parseInt(currentStyle.borderLeftWidth) || 0;
offsetY += parseInt(currentStyle.borderTopWidth) || 0;
}
}
}
}
return new Sys.UI.Point(offsetX, offsetY);
}
}
Sys.UI.DomElement.isDomElement = function Sys$UI$DomElement$isDomElement(obj) {
var e = Function._validateParams(arguments, [
{name: "obj"}
]);
if (e) throw e;
return Sys._isDomElement(obj);
}
Sys.UI.DomElement.removeCssClass = function Sys$UI$DomElement$removeCssClass(element, className) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true},
{name: "className", type: String}
]);
if (e) throw e;
var currentClassName = ' ' + element.className + ' ';
var index = currentClassName.indexOf(' ' + className + ' ');
if (index >= 0) {
element.className = (currentClassName.substr(0, index) + ' ' +
currentClassName.substring(index + className.length + 1, currentClassName.length)).trim();
}
}
Sys.UI.DomElement.resolveElement = function Sys$UI$DomElement$resolveElement(elementOrElementId, containerElement) {
var e = Function._validateParams(arguments, [
{name: "elementOrElementId", mayBeNull: true},
{name: "containerElement", mayBeNull: true, domElement: true, optional: true}
]);
if (e) throw e;
var el = elementOrElementId;
if (!el) return null;
if (typeof(el) === "string") {
el = Sys.UI.DomElement.getElementById(el, containerElement);
if (!el) {
throw Error.argument("elementOrElementId", String.format(Sys.Res.elementNotFound, elementOrElementId));
}
}
else if(!Sys.UI.DomElement.isDomElement(el)) {
throw Error.argument("elementOrElementId", Sys.Res.expectedElementOrId);
}
return el;
}
Sys.UI.DomElement.raiseBubbleEvent = function Sys$UI$DomElement$raiseBubbleEvent(source, args) {
var e = Function._validateParams(arguments, [
{name: "source", domElement: true},
{name: "args", type: Sys.EventArgs}
]);
if (e) throw e;
var target = source;
while (target) {
var control = target.control;
if (control && control.onBubbleEvent && control.raiseBubbleEvent) {
Sys.UI.DomElement._raiseBubbleEventFromControl(control, source, args);
return;
}
target = target.parentNode;
}
}
Sys.UI.DomElement._raiseBubbleEventFromControl = function Sys$UI$DomElement$_raiseBubbleEventFromControl(control, source, args) {
if (!control.onBubbleEvent(source, args)) {
control._raiseBubbleEvent(source, args);
}
}
Sys.UI.DomElement.setLocation = function Sys$UI$DomElement$setLocation(element, x, y) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true},
{name: "x", type: Number, integer: true},
{name: "y", type: Number, integer: true}
]);
if (e) throw e;
var style = element.style;
style.position = 'absolute';
style.left = x + "px";
style.top = y + "px";
}
Sys.UI.DomElement.toggleCssClass = function Sys$UI$DomElement$toggleCssClass(element, className) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true},
{name: "className", type: String}
]);
if (e) throw e;
if (Sys.UI.DomElement.containsCssClass(element, className)) {
Sys.UI.DomElement.removeCssClass(element, className);
}
else {
Sys.UI.DomElement.addCssClass(element, className);
}
}
Sys.UI.DomElement.getVisibilityMode = function Sys$UI$DomElement$getVisibilityMode(element) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true}
]);
if (e) throw e;
return (element._visibilityMode === Sys.UI.VisibilityMode.hide) ?
Sys.UI.VisibilityMode.hide :
Sys.UI.VisibilityMode.collapse;
}
Sys.UI.DomElement.setVisibilityMode = function Sys$UI$DomElement$setVisibilityMode(element, value) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true},
{name: "value", type: Sys.UI.VisibilityMode}
]);
if (e) throw e;
Sys.UI.DomElement._ensureOldDisplayMode(element);
if (element._visibilityMode !== value) {
element._visibilityMode = value;
if (Sys.UI.DomElement.getVisible(element) === false) {
if (element._visibilityMode === Sys.UI.VisibilityMode.hide) {
element.style.display = element._oldDisplayMode;
}
else {
element.style.display = 'none';
}
}
element._visibilityMode = value;
}
}
Sys.UI.DomElement.getVisible = function Sys$UI$DomElement$getVisible(element) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true}
]);
if (e) throw e;
var style = element.currentStyle || Sys.UI.DomElement._getCurrentStyle(element);
if (!style) return true;
return (style.visibility !== 'hidden') && (style.display !== 'none');
}
Sys.UI.DomElement.setVisible = function Sys$UI$DomElement$setVisible(element, value) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true},
{name: "value", type: Boolean}
]);
if (e) throw e;
if (value !== Sys.UI.DomElement.getVisible(element)) {
Sys.UI.DomElement._ensureOldDisplayMode(element);
element.style.visibility = value ? 'visible' : 'hidden';
if (value || (element._visibilityMode === Sys.UI.VisibilityMode.hide)) {
element.style.display = element._oldDisplayMode;
}
else {
element.style.display = 'none';
}
}
}
Sys.UI.DomElement._ensureOldDisplayMode = function Sys$UI$DomElement$_ensureOldDisplayMode(element) {
if (!element._oldDisplayMode) {
var style = element.currentStyle || Sys.UI.DomElement._getCurrentStyle(element);
element._oldDisplayMode = style ? style.display : null;
if (!element._oldDisplayMode || element._oldDisplayMode === 'none') {
switch(element.tagName.toUpperCase()) {
case 'DIV': case 'P': case 'ADDRESS': case 'BLOCKQUOTE': case 'BODY': case 'COL':
case 'COLGROUP': case 'DD': case 'DL': case 'DT': case 'FIELDSET': case 'FORM':
case 'H1': case 'H2': case 'H3': case 'H4': case 'H5': case 'H6': case 'HR':
case 'IFRAME': case 'LEGEND': case 'OL': case 'PRE': case 'TABLE': case 'TD':
case 'TH': case 'TR': case 'UL':
element._oldDisplayMode = 'block';
break;
case 'LI':
element._oldDisplayMode = 'list-item';
break;
default:
element._oldDisplayMode = 'inline';
}
}
}
}
Sys.UI.DomElement._getWindow = function Sys$UI$DomElement$_getWindow(element) {
var doc = element.ownerDocument || element.document || element;
return doc.defaultView || doc.parentWindow;
}
Sys.UI.DomElement._getCurrentStyle = function Sys$UI$DomElement$_getCurrentStyle(element) {
if (element.nodeType === 3) return null;
var w = Sys.UI.DomElement._getWindow(element);
if (element.documentElement) element = element.documentElement;
var computedStyle = (w && (element !== w) && w.getComputedStyle) ?
w.getComputedStyle(element, null) :
element.currentStyle || element.style;
if (!computedStyle && (Sys.Browser.agent === Sys.Browser.Safari) && element.style) {
var oldDisplay = element.style.display;
var oldPosition = element.style.position;
element.style.position = 'absolute';
element.style.display = 'block';
var style = w.getComputedStyle(element, null);
element.style.display = oldDisplay;
element.style.position = oldPosition;
computedStyle = {};
for (var n in style) {
computedStyle[n] = style[n];
}
computedStyle.display = 'none';
}
return computedStyle;
}
Sys.IContainer = function Sys$IContainer() {
throw Error.notImplemented();
}
function Sys$IContainer$addComponent(component) {
var e = Function._validateParams(arguments, [
{name: "component", type: Sys.Component}
]);
if (e) throw e;
throw Error.notImplemented();
}
function Sys$IContainer$removeComponent(component) {
var e = Function._validateParams(arguments, [
{name: "component", type: Sys.Component}
]);
if (e) throw e;
throw Error.notImplemented();
}
function Sys$IContainer$findComponent(id) {
var e = Function._validateParams(arguments, [
{name: "id", type: String}
]);
if (e) throw e;
throw Error.notImplemented();
}
function Sys$IContainer$getComponents() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
Sys.IContainer.prototype = {
addComponent: Sys$IContainer$addComponent,
removeComponent: Sys$IContainer$removeComponent,
findComponent: Sys$IContainer$findComponent,
getComponents: Sys$IContainer$getComponents
}
Sys.IContainer.registerInterface("Sys.IContainer");
Sys.ApplicationLoadEventArgs = function Sys$ApplicationLoadEventArgs(components, isPartialLoad) {
var e = Function._validateParams(arguments, [
{name: "components", type: Array, elementType: Sys.Component},
{name: "isPartialLoad", type: Boolean}
]);
if (e) throw e;
Sys.ApplicationLoadEventArgs.initializeBase(this);
this._components = components;
this._isPartialLoad = isPartialLoad;
}
function Sys$ApplicationLoadEventArgs$get_components() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._components;
}
function Sys$ApplicationLoadEventArgs$get_isPartialLoad() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._isPartialLoad;
}
Sys.ApplicationLoadEventArgs.prototype = {
get_components: Sys$ApplicationLoadEventArgs$get_components,
get_isPartialLoad: Sys$ApplicationLoadEventArgs$get_isPartialLoad
}
Sys.ApplicationLoadEventArgs.registerClass('Sys.ApplicationLoadEventArgs', Sys.EventArgs);
Sys._Application = function Sys$_Application() {
if (arguments.length !== 0) throw Error.parameterCount();
Sys._Application.initializeBase(this);
this._disposableObjects = [];
this._components = {};
this._createdComponents = [];
this._secondPassComponents = [];
this._unloadHandlerDelegate = Function.createDelegate(this, this._unloadHandler);
Sys.UI.DomEvent.addHandler(window, "unload", this._unloadHandlerDelegate);
this._domReady();
}
function Sys$_Application$get_isCreatingComponents() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._creatingComponents;
}
function Sys$_Application$get_isDisposing() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._disposing;
}
function Sys$_Application$add_init(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
if (this._initialized) {
handler(this, Sys.EventArgs.Empty);
}
else {
this.get_events().addHandler("init", handler);
}
}
function Sys$_Application$remove_init(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this.get_events().removeHandler("init", handler);
}
function Sys$_Application$add_load(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this.get_events().addHandler("load", handler);
}
function Sys$_Application$remove_load(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this.get_events().removeHandler("load", handler);
}
function Sys$_Application$add_unload(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this.get_events().addHandler("unload", handler);
}
function Sys$_Application$remove_unload(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this.get_events().removeHandler("unload", handler);
}
function Sys$_Application$addComponent(component) {
var e = Function._validateParams(arguments, [
{name: "component", type: Sys.Component}
]);
if (e) throw e;
var id = component.get_id();
if (!id) throw Error.invalidOperation(Sys.Res.cantAddWithoutId);
if (typeof(this._components[id]) !== 'undefined') throw Error.invalidOperation(String.format(Sys.Res.appDuplicateComponent, id));
this._components[id] = component;
}
function Sys$_Application$beginCreateComponents() {
if (arguments.length !== 0) throw Error.parameterCount();
this._creatingComponents = true;
}
function Sys$_Application$dispose() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._disposing) {
this._disposing = true;
if (this._timerCookie) {
window.clearTimeout(this._timerCookie);
delete this._timerCookie;
}
if (this._endRequestHandler) {
Sys.WebForms.PageRequestManager.getInstance().remove_endRequest(this._endRequestHandler);
delete this._endRequestHandler;
}
if (this._beginRequestHandler) {
Sys.WebForms.PageRequestManager.getInstance().remove_beginRequest(this._beginRequestHandler);
delete this._beginRequestHandler;
}
if (window.pageUnload) {
window.pageUnload(this, Sys.EventArgs.Empty);
}
var unloadHandler = this.get_events().getHandler("unload");
if (unloadHandler) {
unloadHandler(this, Sys.EventArgs.Empty);
}
var disposableObjects = Array.clone(this._disposableObjects);
for (var i = 0, l = disposableObjects.length; i < l; i++) {
var object = disposableObjects[i];
if (typeof(object) !== "undefined") {
object.dispose();
}
}
Array.clear(this._disposableObjects);
Sys.UI.DomEvent.removeHandler(window, "unload", this._unloadHandlerDelegate);
if (Sys._ScriptLoader) {
var sl = Sys._ScriptLoader.getInstance();
if(sl) {
sl.dispose();
}
}
Sys._Application.callBaseMethod(this, 'dispose');
}
}
function Sys$_Application$disposeElement(element, childNodesOnly) {
var e = Function._validateParams(arguments, [
{name: "element"},
{name: "childNodesOnly", type: Boolean}
]);
if (e) throw e;
if (element.nodeType === 1) {
var children = element.getElementsByTagName("*");
for (var i = children.length - 1; i >= 0; i--) {
this._disposeElementInternal(children[i]);
}
if (!childNodesOnly) {
this._disposeElementInternal(element);
}
}
}
function Sys$_Application$endCreateComponents() {
if (arguments.length !== 0) throw Error.parameterCount();
var components = this._secondPassComponents;
for (var i = 0, l = components.length; i < l; i++) {
var component = components[i].component;
Sys$Component$_setReferences(component, components[i].references);
component.endUpdate();
}
this._secondPassComponents = [];
this._creatingComponents = false;
}
function Sys$_Application$findComponent(id, parent) {
var e = Function._validateParams(arguments, [
{name: "id", type: String},
{name: "parent", mayBeNull: true, optional: true}
]);
if (e) throw e;
return (parent ?
((Sys.IContainer.isInstanceOfType(parent)) ?
parent.findComponent(id) :
parent[id] || null) :
Sys.Application._components[id] || null);
}
function Sys$_Application$getComponents() {
if (arguments.length !== 0) throw Error.parameterCount();
var res = [];
var components = this._components;
for (var name in components) {
res[res.length] = components[name];
}
return res;
}
function Sys$_Application$initialize() {
if (arguments.length !== 0) throw Error.parameterCount();
if(!this.get_isInitialized() && !this._disposing) {
Sys._Application.callBaseMethod(this, 'initialize');
this._raiseInit();
if (this.get_stateString) {
if (Sys.WebForms && Sys.WebForms.PageRequestManager) {
this._beginRequestHandler = Function.createDelegate(this, this._onPageRequestManagerBeginRequest);
Sys.WebForms.PageRequestManager.getInstance().add_beginRequest(this._beginRequestHandler);
this._endRequestHandler = Function.createDelegate(this, this._onPageRequestManagerEndRequest);
Sys.WebForms.PageRequestManager.getInstance().add_endRequest(this._endRequestHandler);
}
var loadedEntry = this.get_stateString();
if (loadedEntry !== this._currentEntry) {
this._navigate(loadedEntry);
}
else {
this._ensureHistory();
}
}
this.raiseLoad();
}
}
function Sys$_Application$notifyScriptLoaded() {
if (arguments.length !== 0) throw Error.parameterCount();
}
function Sys$_Application$registerDisposableObject(object) {
var e = Function._validateParams(arguments, [
{name: "object", type: Sys.IDisposable}
]);
if (e) throw e;
if (!this._disposing) {
var objects = this._disposableObjects,
i = objects.length;
objects[i] = object;
object.__msdisposeindex = i;
}
}
function Sys$_Application$raiseLoad() {
if (arguments.length !== 0) throw Error.parameterCount();
var h = this.get_events().getHandler("load");
var args = new Sys.ApplicationLoadEventArgs(Array.clone(this._createdComponents), !!this._loaded);
this._loaded = true;
if (h) {
h(this, args);
}
if (window.pageLoad) {
window.pageLoad(this, args);
}
this._createdComponents = [];
}
function Sys$_Application$removeComponent(component) {
var e = Function._validateParams(arguments, [
{name: "component", type: Sys.Component}
]);
if (e) throw e;
var id = component.get_id();
if (id) delete this._components[id];
}
function Sys$_Application$unregisterDisposableObject(object) {
var e = Function._validateParams(arguments, [
{name: "object", type: Sys.IDisposable}
]);
if (e) throw e;
if (!this._disposing) {
var i = object.__msdisposeindex;
if (typeof(i) === "number") {
var disposableObjects = this._disposableObjects;
delete disposableObjects[i];
delete object.__msdisposeindex;
if (++this._deleteCount > 1000) {
var newArray = [];
for (var j = 0, l = disposableObjects.length; j < l; j++) {
object = disposableObjects[j];
if (typeof(object) !== "undefined") {
object.__msdisposeindex = newArray.length;
newArray.push(object);
}
}
this._disposableObjects = newArray;
this._deleteCount = 0;
}
}
}
}
function Sys$_Application$_addComponentToSecondPass(component, references) {
this._secondPassComponents[this._secondPassComponents.length] = {component: component, references: references};
}
function Sys$_Application$_disposeComponents(list) {
if (list) {
for (var i = list.length - 1; i >= 0; i--) {
var item = list[i];
if (typeof(item.dispose) === "function") {
item.dispose();
}
}
}
}
function Sys$_Application$_disposeElementInternal(element) {
var d = element.dispose;
if (d && typeof(d) === "function") {
element.dispose();
}
else {
var c = element.control;
if (c && typeof(c.dispose) === "function") {
c.dispose();
}
}
var list = element._behaviors;
if (list) {
this._disposeComponents(list);
}
list = element._components;
if (list) {
this._disposeComponents(list);
element._components = null;
}
}
function Sys$_Application$_domReady() {
var check, er, app = this;
function init() { app.initialize(); }
var onload = function() {
Sys.UI.DomEvent.removeHandler(window, "load", onload);
init();
}
Sys.UI.DomEvent.addHandler(window, "load", onload);
if (document.addEventListener) {
try {
document.addEventListener("DOMContentLoaded", check = function() {
document.removeEventListener("DOMContentLoaded", check, false);
init();
}, false);
}
catch (er) { }
}
else if (document.attachEvent) {
if ((window == window.top) && document.documentElement.doScroll) {
var timeout, el = document.createElement("div");
check = function() {
try {
el.doScroll("left");
}
catch (er) {
timeout = window.setTimeout(check, 0);
return;
}
el = null;
init();
}
check();
}
else {
document.attachEvent("onreadystatechange", check = function() {
if (document.readyState === "complete") {
document.detachEvent("onreadystatechange", check);
init();
}
});
}
}
}
function Sys$_Application$_raiseInit() {
var handler = this.get_events().getHandler("init");
if (handler) {
this.beginCreateComponents();
handler(this, Sys.EventArgs.Empty);
this.endCreateComponents();
}
}
function Sys$_Application$_unloadHandler(event) {
this.dispose();
}
Sys._Application.prototype = {
_creatingComponents: false,
_disposing: false,
_deleteCount: 0,
get_isCreatingComponents: Sys$_Application$get_isCreatingComponents,
get_isDisposing: Sys$_Application$get_isDisposing,
add_init: Sys$_Application$add_init,
remove_init: Sys$_Application$remove_init,
add_load: Sys$_Application$add_load,
remove_load: Sys$_Application$remove_load,
add_unload: Sys$_Application$add_unload,
remove_unload: Sys$_Application$remove_unload,
addComponent: Sys$_Application$addComponent,
beginCreateComponents: Sys$_Application$beginCreateComponents,
dispose: Sys$_Application$dispose,
disposeElement: Sys$_Application$disposeElement,
endCreateComponents: Sys$_Application$endCreateComponents,
findComponent: Sys$_Application$findComponent,
getComponents: Sys$_Application$getComponents,
initialize: Sys$_Application$initialize,
notifyScriptLoaded: Sys$_Application$notifyScriptLoaded,
registerDisposableObject: Sys$_Application$registerDisposableObject,
raiseLoad: Sys$_Application$raiseLoad,
removeComponent: Sys$_Application$removeComponent,
unregisterDisposableObject: Sys$_Application$unregisterDisposableObject,
_addComponentToSecondPass: Sys$_Application$_addComponentToSecondPass,
_disposeComponents: Sys$_Application$_disposeComponents,
_disposeElementInternal: Sys$_Application$_disposeElementInternal,
_domReady: Sys$_Application$_domReady,
_raiseInit: Sys$_Application$_raiseInit,
_unloadHandler: Sys$_Application$_unloadHandler
}
Sys._Application.registerClass('Sys._Application', Sys.Component, Sys.IContainer);
Sys.Application = new Sys._Application();
var $find = Sys.Application.findComponent;
Sys.UI.Behavior = function Sys$UI$Behavior(element) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true}
]);
if (e) throw e;
Sys.UI.Behavior.initializeBase(this);
this._element = element;
var behaviors = element._behaviors;
if (!behaviors) {
element._behaviors = [this];
}
else {
behaviors[behaviors.length] = this;
}
}
function Sys$UI$Behavior$get_element() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._element;
}
function Sys$UI$Behavior$get_id() {
if (arguments.length !== 0) throw Error.parameterCount();
var baseId = Sys.UI.Behavior.callBaseMethod(this, 'get_id');
if (baseId) return baseId;
if (!this._element || !this._element.id) return '';
return this._element.id + '$' + this.get_name();
}
function Sys$UI$Behavior$get_name() {
if (arguments.length !== 0) throw Error.parameterCount();
if (this._name) return this._name;
var name = Object.getTypeName(this);
var i = name.lastIndexOf('.');
if (i !== -1) name = name.substr(i + 1);
if (!this.get_isInitialized()) this._name = name;
return name;
}
function Sys$UI$Behavior$set_name(value) {
var e = Function._validateParams(arguments, [{name: "value", type: String}]);
if (e) throw e;
if ((value === '') || (value.charAt(0) === ' ') || (value.charAt(value.length - 1) === ' '))
throw Error.argument('value', Sys.Res.invalidId);
if (typeof(this._element[value]) !== 'undefined')
throw Error.invalidOperation(String.format(Sys.Res.behaviorDuplicateName, value));
if (this.get_isInitialized()) throw Error.invalidOperation(Sys.Res.cantSetNameAfterInit);
this._name = value;
}
function Sys$UI$Behavior$initialize() {
Sys.UI.Behavior.callBaseMethod(this, 'initialize');
var name = this.get_name();
if (name) this._element[name] = this;
}
function Sys$UI$Behavior$dispose() {
Sys.UI.Behavior.callBaseMethod(this, 'dispose');
var e = this._element;
if (e) {
var name = this.get_name();
if (name) {
e[name] = null;
}
var behaviors = e._behaviors;
Array.remove(behaviors, this);
if (behaviors.length === 0) {
e._behaviors = null;
}
delete this._element;
}
}
Sys.UI.Behavior.prototype = {
_name: null,
get_element: Sys$UI$Behavior$get_element,
get_id: Sys$UI$Behavior$get_id,
get_name: Sys$UI$Behavior$get_name,
set_name: Sys$UI$Behavior$set_name,
initialize: Sys$UI$Behavior$initialize,
dispose: Sys$UI$Behavior$dispose
}
Sys.UI.Behavior.registerClass('Sys.UI.Behavior', Sys.Component);
Sys.UI.Behavior.getBehaviorByName = function Sys$UI$Behavior$getBehaviorByName(element, name) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true},
{name: "name", type: String}
]);
if (e) throw e;
var b = element[name];
return (b && Sys.UI.Behavior.isInstanceOfType(b)) ? b : null;
}
Sys.UI.Behavior.getBehaviors = function Sys$UI$Behavior$getBehaviors(element) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true}
]);
if (e) throw e;
if (!element._behaviors) return [];
return Array.clone(element._behaviors);
}
Sys.UI.Behavior.getBehaviorsByType = function Sys$UI$Behavior$getBehaviorsByType(element, type) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true},
{name: "type", type: Type}
]);
if (e) throw e;
var behaviors = element._behaviors;
var results = [];
if (behaviors) {
for (var i = 0, l = behaviors.length; i < l; i++) {
if (type.isInstanceOfType(behaviors[i])) {
results[results.length] = behaviors[i];
}
}
}
return results;
}
Sys.UI.VisibilityMode = function Sys$UI$VisibilityMode() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
Sys.UI.VisibilityMode.prototype = {
hide: 0,
collapse: 1
}
Sys.UI.VisibilityMode.registerEnum("Sys.UI.VisibilityMode");
Sys.UI.Control = function Sys$UI$Control(element) {
var e = Function._validateParams(arguments, [
{name: "element", domElement: true}
]);
if (e) throw e;
if (typeof(element.control) !== 'undefined') throw Error.invalidOperation(Sys.Res.controlAlreadyDefined);
Sys.UI.Control.initializeBase(this);
this._element = element;
element.control = this;
var role = this.get_role();
if (role) {
element.setAttribute("role", role);
}
}
function Sys$UI$Control$get_element() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._element;
}
function Sys$UI$Control$get_id() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._element) return '';
return this._element.id;
}
function Sys$UI$Control$set_id(value) {
var e = Function._validateParams(arguments, [{name: "value", type: String}]);
if (e) throw e;
throw Error.invalidOperation(Sys.Res.cantSetId);
}
function Sys$UI$Control$get_parent() {
if (arguments.length !== 0) throw Error.parameterCount();
if (this._parent) return this._parent;
if (!this._element) return null;
var parentElement = this._element.parentNode;
while (parentElement) {
if (parentElement.control) {
return parentElement.control;
}
parentElement = parentElement.parentNode;
}
return null;
}
function Sys$UI$Control$set_parent(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Sys.UI.Control}]);
if (e) throw e;
if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
var parents = [this];
var current = value;
while (current) {
if (Array.contains(parents, current)) throw Error.invalidOperation(Sys.Res.circularParentChain);
parents[parents.length] = current;
current = current.get_parent();
}
this._parent = value;
}
function Sys$UI$Control$get_role() {
if (arguments.length !== 0) throw Error.parameterCount();
return null;
}
function Sys$UI$Control$get_visibilityMode() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
return Sys.UI.DomElement.getVisibilityMode(this._element);
}
function Sys$UI$Control$set_visibilityMode(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Sys.UI.VisibilityMode}]);
if (e) throw e;
if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
Sys.UI.DomElement.setVisibilityMode(this._element, value);
}
function Sys$UI$Control$get_visible() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
return Sys.UI.DomElement.getVisible(this._element);
}
function Sys$UI$Control$set_visible(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Boolean}]);
if (e) throw e;
if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
Sys.UI.DomElement.setVisible(this._element, value)
}
function Sys$UI$Control$addCssClass(className) {
var e = Function._validateParams(arguments, [
{name: "className", type: String}
]);
if (e) throw e;
if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
Sys.UI.DomElement.addCssClass(this._element, className);
}
function Sys$UI$Control$dispose() {
Sys.UI.Control.callBaseMethod(this, 'dispose');
if (this._element) {
this._element.control = null;
delete this._element;
}
if (this._parent) delete this._parent;
}
function Sys$UI$Control$onBubbleEvent(source, args) {
var e = Function._validateParams(arguments, [
{name: "source"},
{name: "args", type: Sys.EventArgs}
]);
if (e) throw e;
return false;
}
function Sys$UI$Control$raiseBubbleEvent(source, args) {
var e = Function._validateParams(arguments, [
{name: "source"},
{name: "args", type: Sys.EventArgs}
]);
if (e) throw e;
this._raiseBubbleEvent(source, args);
}
function Sys$UI$Control$_raiseBubbleEvent(source, args) {
var currentTarget = this.get_parent();
while (currentTarget) {
if (currentTarget.onBubbleEvent(source, args)) {
return;
}
currentTarget = currentTarget.get_parent();
}
}
function Sys$UI$Control$removeCssClass(className) {
var e = Function._validateParams(arguments, [
{name: "className", type: String}
]);
if (e) throw e;
if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
Sys.UI.DomElement.removeCssClass(this._element, className);
}
function Sys$UI$Control$toggleCssClass(className) {
var e = Function._validateParams(arguments, [
{name: "className", type: String}
]);
if (e) throw e;
if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
Sys.UI.DomElement.toggleCssClass(this._element, className);
}
Sys.UI.Control.prototype = {
_parent: null,
_visibilityMode: Sys.UI.VisibilityMode.hide,
get_element: Sys$UI$Control$get_element,
get_id: Sys$UI$Control$get_id,
set_id: Sys$UI$Control$set_id,
get_parent: Sys$UI$Control$get_parent,
set_parent: Sys$UI$Control$set_parent,
get_role: Sys$UI$Control$get_role,
get_visibilityMode: Sys$UI$Control$get_visibilityMode,
set_visibilityMode: Sys$UI$Control$set_visibilityMode,
get_visible: Sys$UI$Control$get_visible,
set_visible: Sys$UI$Control$set_visible,
addCssClass: Sys$UI$Control$addCssClass,
dispose: Sys$UI$Control$dispose,
onBubbleEvent: Sys$UI$Control$onBubbleEvent,
raiseBubbleEvent: Sys$UI$Control$raiseBubbleEvent,
_raiseBubbleEvent: Sys$UI$Control$_raiseBubbleEvent,
removeCssClass: Sys$UI$Control$removeCssClass,
toggleCssClass: Sys$UI$Control$toggleCssClass
}
Sys.UI.Control.registerClass('Sys.UI.Control', Sys.Component);
Sys.HistoryEventArgs = function Sys$HistoryEventArgs(state) {
var e = Function._validateParams(arguments, [
{name: "state", type: Object}
]);
if (e) throw e;
Sys.HistoryEventArgs.initializeBase(this);
this._state = state;
}
function Sys$HistoryEventArgs$get_state() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._state;
}
Sys.HistoryEventArgs.prototype = {
get_state: Sys$HistoryEventArgs$get_state
}
Sys.HistoryEventArgs.registerClass('Sys.HistoryEventArgs', Sys.EventArgs);
Sys.Application._appLoadHandler = null;
Sys.Application._beginRequestHandler = null;
Sys.Application._clientId = null;
Sys.Application._currentEntry = '';
Sys.Application._endRequestHandler = null;
Sys.Application._history = null;
Sys.Application._enableHistory = false;
Sys.Application._historyEnabledInScriptManager = false;
Sys.Application._historyFrame = null;
Sys.Application._historyInitialized = false;
Sys.Application._historyPointIsNew = false;
Sys.Application._ignoreTimer = false;
Sys.Application._initialState = null;
Sys.Application._state = {};
Sys.Application._timerCookie = 0;
Sys.Application._timerHandler = null;
Sys.Application._uniqueId = null;
Sys._Application.prototype.get_stateString = function Sys$_Application$get_stateString() {
if (arguments.length !== 0) throw Error.parameterCount();
var hash = null;
if (Sys.Browser.agent === Sys.Browser.Firefox) {
var href = window.location.href;
var hashIndex = href.indexOf('#');
if (hashIndex !== -1) {
hash = href.substring(hashIndex + 1);
}
else {
hash = "";
}
return hash;
}
else {
hash = window.location.hash;
}
if ((hash.length > 0) && (hash.charAt(0) === '#')) {
hash = hash.substring(1);
}
return hash;
};
Sys._Application.prototype.get_enableHistory = function Sys$_Application$get_enableHistory() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._enableHistory;
};
Sys._Application.prototype.set_enableHistory = function Sys$_Application$set_enableHistory(value) {
if (this._initialized && !this._initializing) {
throw Error.invalidOperation(Sys.Res.historyCannotEnableHistory);
}
else if (this._historyEnabledInScriptManager && !value) {
throw Error.invalidOperation(Sys.Res.invalidHistorySettingCombination);
}
this._enableHistory = value;
};
Sys._Application.prototype.add_navigate = function Sys$_Application$add_navigate(handler) {
var e = Function._validateParams(arguments, [
{name: "handler", type: Function}
]);
if (e) throw e;
this.get_events().addHandler("navigate", handler);
};
Sys._Application.prototype.remove_navigate = function Sys$_Application$remove_navigate(handler) {
var e = Function._validateParams(arguments, [
{name: "handler", type: Function}
]);
if (e) throw e;
this.get_events().removeHandler("navigate", handler);
};
Sys._Application.prototype.addHistoryPoint = function Sys$_Application$addHistoryPoint(state, title) {
var e = Function._validateParams(arguments, [
{name: "state", type: Object},
{name: "title", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
if (!this._enableHistory) throw Error.invalidOperation(Sys.Res.historyCannotAddHistoryPointWithHistoryDisabled);
for (var n in state) {
var v = state[n];
var t = typeof(v);
if ((v !== null) && ((t === 'object') || (t === 'function') || (t === 'undefined'))) {
throw Error.argument('state', Sys.Res.stateMustBeStringDictionary);
}
}
this._ensureHistory();
var initialState = this._state;
for (var key in state) {
var value = state[key];
if (value === null) {
if (typeof(initialState[key]) !== 'undefined') {
delete initialState[key];
}
}
else {
initialState[key] = value;
}
}
var entry = this._serializeState(initialState);
this._historyPointIsNew = true;
this._setState(entry, title);
this._raiseNavigate();
};
Sys._Application.prototype.setServerId = function Sys$_Application$setServerId(clientId, uniqueId) {
var e = Function._validateParams(arguments, [
{name: "clientId", type: String},
{name: "uniqueId", type: String}
]);
if (e) throw e;
this._clientId = clientId;
this._uniqueId = uniqueId;
};
Sys._Application.prototype.setServerState = function Sys$_Application$setServerState(value) {
var e = Function._validateParams(arguments, [
{name: "value", type: String}
]);
if (e) throw e;
this._ensureHistory();
this._state.__s = value;
this._updateHiddenField(value);
};
Sys._Application.prototype._deserializeState = function Sys$_Application$_deserializeState(entry) {
var result = {};
entry = entry || '';
var serverSeparator = entry.indexOf('&&');
if ((serverSeparator !== -1) && (serverSeparator + 2 < entry.length)) {
result.__s = entry.substr(serverSeparator + 2);
entry = entry.substr(0, serverSeparator);
}
var tokens = entry.split('&');
for (var i = 0, l = tokens.length; i < l; i++) {
var token = tokens[i];
var equal = token.indexOf('=');
if ((equal !== -1) && (equal + 1 < token.length)) {
var name = token.substr(0, equal);
var value = token.substr(equal + 1);
result[name] = decodeURIComponent(value);
}
}
return result;
};
Sys._Application.prototype._enableHistoryInScriptManager = function Sys$_Application$_enableHistoryInScriptManager() {
this._enableHistory = true;
this._historyEnabledInScriptManager = true;
};
Sys._Application.prototype._ensureHistory = function Sys$_Application$_ensureHistory() {
if (!this._historyInitialized && this._enableHistory) {
if ((Sys.Browser.agent === Sys.Browser.InternetExplorer) && (Sys.Browser.documentMode < 8)) {
this._historyFrame = document.getElementById('__historyFrame');
if (!this._historyFrame) throw Error.invalidOperation(Sys.Res.historyMissingFrame);
this._ignoreIFrame = true;
}
this._timerHandler = Function.createDelegate(this, this._onIdle);
this._timerCookie = window.setTimeout(this._timerHandler, 100);
try {
this._initialState = this._deserializeState(this.get_stateString());
} catch(e) {}
this._historyInitialized = true;
}
};
Sys._Application.prototype._navigate = function Sys$_Application$_navigate(entry) {
this._ensureHistory();
var state = this._deserializeState(entry);
if (this._uniqueId) {
var oldServerEntry = this._state.__s || '';
var newServerEntry = state.__s || '';
if (newServerEntry !== oldServerEntry) {
this._updateHiddenField(newServerEntry);
__doPostBack(this._uniqueId, newServerEntry);
this._state = state;
return;
}
}
this._setState(entry);
this._state = state;
this._raiseNavigate();
};
Sys._Application.prototype._onIdle = function Sys$_Application$_onIdle() {
delete this._timerCookie;
var entry = this.get_stateString();
if (entry !== this._currentEntry) {
if (!this._ignoreTimer) {
this._historyPointIsNew = false;
this._navigate(entry);
}
}
else {
this._ignoreTimer = false;
}
this._timerCookie = window.setTimeout(this._timerHandler, 100);
};
Sys._Application.prototype._onIFrameLoad = function Sys$_Application$_onIFrameLoad(entry) {
this._ensureHistory();
if (!this._ignoreIFrame) {
this._historyPointIsNew = false;
this._navigate(entry);
}
this._ignoreIFrame = false;
};
Sys._Application.prototype._onPageRequestManagerBeginRequest = function Sys$_Application$_onPageRequestManagerBeginRequest(sender, args) {
this._ignoreTimer = true;
};
Sys._Application.prototype._onPageRequestManagerEndRequest = function Sys$_Application$_onPageRequestManagerEndRequest(sender, args) {
var dataItem = args.get_dataItems()[this._clientId];
var eventTarget = document.getElementById("__EVENTTARGET");
if (eventTarget && eventTarget.value === this._uniqueId) {
eventTarget.value = '';
}
if (typeof(dataItem) !== 'undefined') {
this.setServerState(dataItem);
this._historyPointIsNew = true;
}
else {
this._ignoreTimer = false;
}
var entry = this._serializeState(this._state);
if (entry !== this._currentEntry) {
this._ignoreTimer = true;
this._setState(entry);
this._raiseNavigate();
}
};
Sys._Application.prototype._raiseNavigate = function Sys$_Application$_raiseNavigate() {
var h = this.get_events().getHandler("navigate");
var stateClone = {};
for (var key in this._state) {
if (key !== '__s') {
stateClone[key] = this._state[key];
}
}
var args = new Sys.HistoryEventArgs(stateClone);
if (h) {
h(this, args);
}
var err;
try {
if ((Sys.Browser.agent === Sys.Browser.Firefox) && window.location.hash &&
(!window.frameElement || window.top.location.hash)) {
window.history.go(0);
}
}
catch(err) {
}
};
Sys._Application.prototype._serializeState = function Sys$_Application$_serializeState(state) {
var serialized = [];
for (var key in state) {
var value = state[key];
if (key === '__s') {
var serverState = value;
}
else {
if (key.indexOf('=') !== -1) throw Error.argument('state', Sys.Res.stateFieldNameInvalid);
serialized[serialized.length] = key + '=' + encodeURIComponent(value);
}
}
return serialized.join('&') + (serverState ? '&&' + serverState : '');
};
Sys._Application.prototype._setState = function Sys$_Application$_setState(entry, title) {
if (this._enableHistory) {
entry = entry || '';
if (entry !== this._currentEntry) {
if (window.theForm) {
var action = window.theForm.action;
var hashIndex = action.indexOf('#');
window.theForm.action = ((hashIndex !== -1) ? action.substring(0, hashIndex) : action) + '#' + entry;
}
if (this._historyFrame && this._historyPointIsNew) {
this._ignoreIFrame = true;
var frameDoc = this._historyFrame.contentWindow.document;
frameDoc.open("javascript:'<html></html>'");
frameDoc.write("<html><head><title>" + (title || document.title) +
"</title><scri" + "pt type=\"text/javascript\">parent.Sys.Application._onIFrameLoad(" +
Sys.Serialization.JavaScriptSerializer.serialize(entry) +
");</scri" + "pt></head><body></body></html>");
frameDoc.close();
}
this._ignoreTimer = false;
this._currentEntry = entry;
if (this._historyFrame || this._historyPointIsNew) {
var currentHash = this.get_stateString();
if (entry !== currentHash) {
var loc = document.location;
if (loc.href.length - loc.hash.length + entry.length > 1024) {
throw Error.invalidOperation(Sys.Res.urlMustBeLessThan1024chars);
}
window.location.hash = entry;
this._currentEntry = this.get_stateString();
if ((typeof(title) !== 'undefined') && (title !== null)) {
document.title = title;
}
}
}
this._historyPointIsNew = false;
}
}
};
Sys._Application.prototype._updateHiddenField = function Sys$_Application$_updateHiddenField(value) {
if (this._clientId) {
var serverStateField = document.getElementById(this._clientId);
if (serverStateField) {
serverStateField.value = value;
}
}
};
if (!window.XMLHttpRequest) {
window.XMLHttpRequest = function window$XMLHttpRequest() {
var progIDs = [ 'Msxml2.XMLHTTP.3.0', 'Msxml2.XMLHTTP' ];
for (var i = 0, l = progIDs.length; i < l; i++) {
try {
return new ActiveXObject(progIDs[i]);
}
catch (ex) {
}
}
return null;
}
}
Type.registerNamespace('Sys.Net');
Sys.Net.WebRequestExecutor = function Sys$Net$WebRequestExecutor() {
if (arguments.length !== 0) throw Error.parameterCount();
this._webRequest = null;
this._resultObject = null;
}
function Sys$Net$WebRequestExecutor$get_webRequest() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._webRequest;
}
function Sys$Net$WebRequestExecutor$_set_webRequest(value) {
if (this.get_started()) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallOnceStarted, 'set_webRequest'));
}
this._webRequest = value;
}
function Sys$Net$WebRequestExecutor$get_started() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$get_responseAvailable() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$get_timedOut() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$get_aborted() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$get_responseData() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$get_statusCode() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$get_statusText() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$get_xml() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$get_object() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._resultObject) {
this._resultObject = Sys.Serialization.JavaScriptSerializer.deserialize(this.get_responseData());
}
return this._resultObject;
}
function Sys$Net$WebRequestExecutor$executeRequest() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$abort() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$getResponseHeader(header) {
var e = Function._validateParams(arguments, [
{name: "header", type: String}
]);
if (e) throw e;
throw Error.notImplemented();
}
function Sys$Net$WebRequestExecutor$getAllResponseHeaders() {
if (arguments.length !== 0) throw Error.parameterCount();
throw Error.notImplemented();
}
Sys.Net.WebRequestExecutor.prototype = {
get_webRequest: Sys$Net$WebRequestExecutor$get_webRequest,
_set_webRequest: Sys$Net$WebRequestExecutor$_set_webRequest,
get_started: Sys$Net$WebRequestExecutor$get_started,
get_responseAvailable: Sys$Net$WebRequestExecutor$get_responseAvailable,
get_timedOut: Sys$Net$WebRequestExecutor$get_timedOut,
get_aborted: Sys$Net$WebRequestExecutor$get_aborted,
get_responseData: Sys$Net$WebRequestExecutor$get_responseData,
get_statusCode: Sys$Net$WebRequestExecutor$get_statusCode,
get_statusText: Sys$Net$WebRequestExecutor$get_statusText,
get_xml: Sys$Net$WebRequestExecutor$get_xml,
get_object: Sys$Net$WebRequestExecutor$get_object,
executeRequest: Sys$Net$WebRequestExecutor$executeRequest,
abort: Sys$Net$WebRequestExecutor$abort,
getResponseHeader: Sys$Net$WebRequestExecutor$getResponseHeader,
getAllResponseHeaders: Sys$Net$WebRequestExecutor$getAllResponseHeaders
}
Sys.Net.WebRequestExecutor.registerClass('Sys.Net.WebRequestExecutor');
Sys.Net.XMLDOM = function Sys$Net$XMLDOM(markup) {
var e = Function._validateParams(arguments, [
{name: "markup", type: String}
]);
if (e) throw e;
if (!window.DOMParser) {
var progIDs = [ 'Msxml2.DOMDocument.3.0', 'Msxml2.DOMDocument' ];
for (var i = 0, l = progIDs.length; i < l; i++) {
try {
var xmlDOM = new ActiveXObject(progIDs[i]);
xmlDOM.async = false;
xmlDOM.loadXML(markup);
xmlDOM.setProperty('SelectionLanguage', 'XPath');
return xmlDOM;
}
catch (ex) {
}
}
}
else {
try {
var domParser = new window.DOMParser();
return domParser.parseFromString(markup, 'text/xml');
}
catch (ex) {
}
}
return null;
}
Sys.Net.XMLHttpExecutor = function Sys$Net$XMLHttpExecutor() {
if (arguments.length !== 0) throw Error.parameterCount();
Sys.Net.XMLHttpExecutor.initializeBase(this);
var _this = this;
this._xmlHttpRequest = null;
this._webRequest = null;
this._responseAvailable = false;
this._timedOut = false;
this._timer = null;
this._aborted = false;
this._started = false;
this._onReadyStateChange = (function () {
if (_this._xmlHttpRequest.readyState === 4 ) {
try {
if (typeof(_this._xmlHttpRequest.status) === "undefined") {
return;
}
}
catch(ex) {
return;
}
_this._clearTimer();
_this._responseAvailable = true;
_this._webRequest.completed(Sys.EventArgs.Empty);
if (_this._xmlHttpRequest != null) {
_this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
_this._xmlHttpRequest = null;
}
}
});
this._clearTimer = (function() {
if (_this._timer != null) {
window.clearTimeout(_this._timer);
_this._timer = null;
}
});
this._onTimeout = (function() {
if (!_this._responseAvailable) {
_this._clearTimer();
_this._timedOut = true;
_this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
_this._xmlHttpRequest.abort();
_this._webRequest.completed(Sys.EventArgs.Empty);
_this._xmlHttpRequest = null;
}
});
}
function Sys$Net$XMLHttpExecutor$get_timedOut() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._timedOut;
}
function Sys$Net$XMLHttpExecutor$get_started() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._started;
}
function Sys$Net$XMLHttpExecutor$get_responseAvailable() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._responseAvailable;
}
function Sys$Net$XMLHttpExecutor$get_aborted() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._aborted;
}
function Sys$Net$XMLHttpExecutor$executeRequest() {
if (arguments.length !== 0) throw Error.parameterCount();
this._webRequest = this.get_webRequest();
if (this._started) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallOnceStarted, 'executeRequest'));
}
if (this._webRequest === null) {
throw Error.invalidOperation(Sys.Res.nullWebRequest);
}
var body = this._webRequest.get_body();
var headers = this._webRequest.get_headers();
this._xmlHttpRequest = new XMLHttpRequest();
this._xmlHttpRequest.onreadystatechange = this._onReadyStateChange;
var verb = this._webRequest.get_httpVerb();
this._xmlHttpRequest.open(verb, this._webRequest.getResolvedUrl(), true );
this._xmlHttpRequest.setRequestHeader("X-Requested-With", "XMLHttpRequest");
if (headers) {
for (var header in headers) {
var val = headers[header];
if (typeof(val) !== "function")
this._xmlHttpRequest.setRequestHeader(header, val);
}
}
if (verb.toLowerCase() === "post") {
if ((headers === null) || !headers['Content-Type']) {
this._xmlHttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');
}
if (!body) {
body = "";
}
}
var timeout = this._webRequest.get_timeout();
if (timeout > 0) {
this._timer = window.setTimeout(Function.createDelegate(this, this._onTimeout), timeout);
}
this._xmlHttpRequest.send(body);
this._started = true;
}
function Sys$Net$XMLHttpExecutor$getResponseHeader(header) {
var e = Function._validateParams(arguments, [
{name: "header", type: String}
]);
if (e) throw e;
if (!this._responseAvailable) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'getResponseHeader'));
}
if (!this._xmlHttpRequest) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'getResponseHeader'));
}
var result;
try {
result = this._xmlHttpRequest.getResponseHeader(header);
} catch (e) {
}
if (!result) result = "";
return result;
}
function Sys$Net$XMLHttpExecutor$getAllResponseHeaders() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._responseAvailable) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'getAllResponseHeaders'));
}
if (!this._xmlHttpRequest) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'getAllResponseHeaders'));
}
return this._xmlHttpRequest.getAllResponseHeaders();
}
function Sys$Net$XMLHttpExecutor$get_responseData() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._responseAvailable) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_responseData'));
}
if (!this._xmlHttpRequest) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_responseData'));
}
return this._xmlHttpRequest.responseText;
}
function Sys$Net$XMLHttpExecutor$get_statusCode() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._responseAvailable) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_statusCode'));
}
if (!this._xmlHttpRequest) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_statusCode'));
}
var result = 0;
try {
result = this._xmlHttpRequest.status;
}
catch(ex) {
}
return result;
}
function Sys$Net$XMLHttpExecutor$get_statusText() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._responseAvailable) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_statusText'));
}
if (!this._xmlHttpRequest) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_statusText'));
}
return this._xmlHttpRequest.statusText;
}
function Sys$Net$XMLHttpExecutor$get_xml() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._responseAvailable) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_xml'));
}
if (!this._xmlHttpRequest) {
throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_xml'));
}
var xml = this._xmlHttpRequest.responseXML;
if (!xml || !xml.documentElement) {
xml = Sys.Net.XMLDOM(this._xmlHttpRequest.responseText);
if (!xml || !xml.documentElement)
return null;
}
else if (navigator.userAgent.indexOf('MSIE') !== -1) {
xml.setProperty('SelectionLanguage', 'XPath');
}
if (xml.documentElement.namespaceURI === "http://www.mozilla.org/newlayout/xml/parsererror.xml" &&
xml.documentElement.tagName === "parsererror") {
return null;
}
if (xml.documentElement.firstChild && xml.documentElement.firstChild.tagName === "parsererror") {
return null;
}
return xml;
}
function Sys$Net$XMLHttpExecutor$abort() {
if (arguments.length !== 0) throw Error.parameterCount();
if (!this._started) {
throw Error.invalidOperation(Sys.Res.cannotAbortBeforeStart);
}
if (this._aborted || this._responseAvailable || this._timedOut)
return;
this._aborted = true;
this._clearTimer();
if (this._xmlHttpRequest && !this._responseAvailable) {
this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
this._xmlHttpRequest.abort();
this._xmlHttpRequest = null;
this._webRequest.completed(Sys.EventArgs.Empty);
}
}
Sys.Net.XMLHttpExecutor.prototype = {
get_timedOut: Sys$Net$XMLHttpExecutor$get_timedOut,
get_started: Sys$Net$XMLHttpExecutor$get_started,
get_responseAvailable: Sys$Net$XMLHttpExecutor$get_responseAvailable,
get_aborted: Sys$Net$XMLHttpExecutor$get_aborted,
executeRequest: Sys$Net$XMLHttpExecutor$executeRequest,
getResponseHeader: Sys$Net$XMLHttpExecutor$getResponseHeader,
getAllResponseHeaders: Sys$Net$XMLHttpExecutor$getAllResponseHeaders,
get_responseData: Sys$Net$XMLHttpExecutor$get_responseData,
get_statusCode: Sys$Net$XMLHttpExecutor$get_statusCode,
get_statusText: Sys$Net$XMLHttpExecutor$get_statusText,
get_xml: Sys$Net$XMLHttpExecutor$get_xml,
abort: Sys$Net$XMLHttpExecutor$abort
}
Sys.Net.XMLHttpExecutor.registerClass('Sys.Net.XMLHttpExecutor', Sys.Net.WebRequestExecutor);
Sys.Net._WebRequestManager = function Sys$Net$_WebRequestManager() {
if (arguments.length !== 0) throw Error.parameterCount();
this._defaultTimeout = 0;
this._defaultExecutorType = "Sys.Net.XMLHttpExecutor";
}
function Sys$Net$_WebRequestManager$add_invokingRequest(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this._get_eventHandlerList().addHandler("invokingRequest", handler);
}
function Sys$Net$_WebRequestManager$remove_invokingRequest(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this._get_eventHandlerList().removeHandler("invokingRequest", handler);
}
function Sys$Net$_WebRequestManager$add_completedRequest(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this._get_eventHandlerList().addHandler("completedRequest", handler);
}
function Sys$Net$_WebRequestManager$remove_completedRequest(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this._get_eventHandlerList().removeHandler("completedRequest", handler);
}
function Sys$Net$_WebRequestManager$_get_eventHandlerList() {
if (!this._events) {
this._events = new Sys.EventHandlerList();
}
return this._events;
}
function Sys$Net$_WebRequestManager$get_defaultTimeout() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._defaultTimeout;
}
function Sys$Net$_WebRequestManager$set_defaultTimeout(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Number}]);
if (e) throw e;
if (value < 0) {
throw Error.argumentOutOfRange("value", value, Sys.Res.invalidTimeout);
}
this._defaultTimeout = value;
}
function Sys$Net$_WebRequestManager$get_defaultExecutorType() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._defaultExecutorType;
}
function Sys$Net$_WebRequestManager$set_defaultExecutorType(value) {
var e = Function._validateParams(arguments, [{name: "value", type: String}]);
if (e) throw e;
this._defaultExecutorType = value;
}
function Sys$Net$_WebRequestManager$executeRequest(webRequest) {
var e = Function._validateParams(arguments, [
{name: "webRequest", type: Sys.Net.WebRequest}
]);
if (e) throw e;
var executor = webRequest.get_executor();
if (!executor) {
var failed = false;
try {
var executorType = eval(this._defaultExecutorType);
executor = new executorType();
} catch (e) {
failed = true;
}
if (failed  || !Sys.Net.WebRequestExecutor.isInstanceOfType(executor) || !executor) {
throw Error.argument("defaultExecutorType", String.format(Sys.Res.invalidExecutorType, this._defaultExecutorType));
}
webRequest.set_executor(executor);
}
if (executor.get_aborted()) {
return;
}
var evArgs = new Sys.Net.NetworkRequestEventArgs(webRequest);
var handler = this._get_eventHandlerList().getHandler("invokingRequest");
if (handler) {
handler(this, evArgs);
}
if (!evArgs.get_cancel()) {
executor.executeRequest();
}
}
Sys.Net._WebRequestManager.prototype = {
add_invokingRequest: Sys$Net$_WebRequestManager$add_invokingRequest,
remove_invokingRequest: Sys$Net$_WebRequestManager$remove_invokingRequest,
add_completedRequest: Sys$Net$_WebRequestManager$add_completedRequest,
remove_completedRequest: Sys$Net$_WebRequestManager$remove_completedRequest,
_get_eventHandlerList: Sys$Net$_WebRequestManager$_get_eventHandlerList,
get_defaultTimeout: Sys$Net$_WebRequestManager$get_defaultTimeout,
set_defaultTimeout: Sys$Net$_WebRequestManager$set_defaultTimeout,
get_defaultExecutorType: Sys$Net$_WebRequestManager$get_defaultExecutorType,
set_defaultExecutorType: Sys$Net$_WebRequestManager$set_defaultExecutorType,
executeRequest: Sys$Net$_WebRequestManager$executeRequest
}
Sys.Net._WebRequestManager.registerClass('Sys.Net._WebRequestManager');
Sys.Net.WebRequestManager = new Sys.Net._WebRequestManager();
Sys.Net.NetworkRequestEventArgs = function Sys$Net$NetworkRequestEventArgs(webRequest) {
var e = Function._validateParams(arguments, [
{name: "webRequest", type: Sys.Net.WebRequest}
]);
if (e) throw e;
Sys.Net.NetworkRequestEventArgs.initializeBase(this);
this._webRequest = webRequest;
}
function Sys$Net$NetworkRequestEventArgs$get_webRequest() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._webRequest;
}
Sys.Net.NetworkRequestEventArgs.prototype = {
get_webRequest: Sys$Net$NetworkRequestEventArgs$get_webRequest
}
Sys.Net.NetworkRequestEventArgs.registerClass('Sys.Net.NetworkRequestEventArgs', Sys.CancelEventArgs);
Sys.Net.WebRequest = function Sys$Net$WebRequest() {
if (arguments.length !== 0) throw Error.parameterCount();
this._url = "";
this._headers = { };
this._body = null;
this._userContext = null;
this._httpVerb = null;
this._executor = null;
this._invokeCalled = false;
this._timeout = 0;
}
function Sys$Net$WebRequest$add_completed(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this._get_eventHandlerList().addHandler("completed", handler);
}
function Sys$Net$WebRequest$remove_completed(handler) {
var e = Function._validateParams(arguments, [{name: "handler", type: Function}]);
if (e) throw e;
this._get_eventHandlerList().removeHandler("completed", handler);
}
function Sys$Net$WebRequest$completed(eventArgs) {
var e = Function._validateParams(arguments, [
{name: "eventArgs", type: Sys.EventArgs}
]);
if (e) throw e;
var handler = Sys.Net.WebRequestManager._get_eventHandlerList().getHandler("completedRequest");
if (handler) {
handler(this._executor, eventArgs);
}
handler = this._get_eventHandlerList().getHandler("completed");
if (handler) {
handler(this._executor, eventArgs);
}
}
function Sys$Net$WebRequest$_get_eventHandlerList() {
if (!this._events) {
this._events = new Sys.EventHandlerList();
}
return this._events;
}
function Sys$Net$WebRequest$get_url() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._url;
}
function Sys$Net$WebRequest$set_url(value) {
var e = Function._validateParams(arguments, [{name: "value", type: String}]);
if (e) throw e;
this._url = value;
}
function Sys$Net$WebRequest$get_headers() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._headers;
}
function Sys$Net$WebRequest$get_httpVerb() {
if (arguments.length !== 0) throw Error.parameterCount();
if (this._httpVerb === null) {
if (this._body === null) {
return "GET";
}
return "POST";
}
return this._httpVerb;
}
function Sys$Net$WebRequest$set_httpVerb(value) {
var e = Function._validateParams(arguments, [{name: "value", type: String}]);
if (e) throw e;
if (value.length === 0) {
throw Error.argument('value', Sys.Res.invalidHttpVerb);
}
this._httpVerb = value;
}
function Sys$Net$WebRequest$get_body() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._body;
}
function Sys$Net$WebRequest$set_body(value) {
var e = Function._validateParams(arguments, [{name: "value", mayBeNull: true}]);
if (e) throw e;
this._body = value;
}
function Sys$Net$WebRequest$get_userContext() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._userContext;
}
function Sys$Net$WebRequest$set_userContext(value) {
var e = Function._validateParams(arguments, [{name: "value", mayBeNull: true}]);
if (e) throw e;
this._userContext = value;
}
function Sys$Net$WebRequest$get_executor() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._executor;
}
function Sys$Net$WebRequest$set_executor(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Sys.Net.WebRequestExecutor}]);
if (e) throw e;
if (this._executor !== null && this._executor.get_started()) {
throw Error.invalidOperation(Sys.Res.setExecutorAfterActive);
}
this._executor = value;
this._executor._set_webRequest(this);
}
function Sys$Net$WebRequest$get_timeout() {
if (arguments.length !== 0) throw Error.parameterCount();
if (this._timeout === 0) {
return Sys.Net.WebRequestManager.get_defaultTimeout();
}
return this._timeout;
}
function Sys$Net$WebRequest$set_timeout(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Number}]);
if (e) throw e;
if (value < 0) {
throw Error.argumentOutOfRange("value", value, Sys.Res.invalidTimeout);
}
this._timeout = value;
}
function Sys$Net$WebRequest$getResolvedUrl() {
if (arguments.length !== 0) throw Error.parameterCount();
return Sys.Net.WebRequest._resolveUrl(this._url);
}
function Sys$Net$WebRequest$invoke() {
if (arguments.length !== 0) throw Error.parameterCount();
if (this._invokeCalled) {
throw Error.invalidOperation(Sys.Res.invokeCalledTwice);
}
Sys.Net.WebRequestManager.executeRequest(this);
this._invokeCalled = true;
}
Sys.Net.WebRequest.prototype = {
add_completed: Sys$Net$WebRequest$add_completed,
remove_completed: Sys$Net$WebRequest$remove_completed,
completed: Sys$Net$WebRequest$completed,
_get_eventHandlerList: Sys$Net$WebRequest$_get_eventHandlerList,
get_url: Sys$Net$WebRequest$get_url,
set_url: Sys$Net$WebRequest$set_url,
get_headers: Sys$Net$WebRequest$get_headers,
get_httpVerb: Sys$Net$WebRequest$get_httpVerb,
set_httpVerb: Sys$Net$WebRequest$set_httpVerb,
get_body: Sys$Net$WebRequest$get_body,
set_body: Sys$Net$WebRequest$set_body,
get_userContext: Sys$Net$WebRequest$get_userContext,
set_userContext: Sys$Net$WebRequest$set_userContext,
get_executor: Sys$Net$WebRequest$get_executor,
set_executor: Sys$Net$WebRequest$set_executor,
get_timeout: Sys$Net$WebRequest$get_timeout,
set_timeout: Sys$Net$WebRequest$set_timeout,
getResolvedUrl: Sys$Net$WebRequest$getResolvedUrl,
invoke: Sys$Net$WebRequest$invoke
}
Sys.Net.WebRequest._resolveUrl = function Sys$Net$WebRequest$_resolveUrl(url, baseUrl) {
if (url && url.indexOf('://') !== -1) {
return url;
}
if (!baseUrl || baseUrl.length === 0) {
var baseElement = document.getElementsByTagName('base')[0];
if (baseElement && baseElement.href && baseElement.href.length > 0) {
baseUrl = baseElement.href;
}
else {
baseUrl = document.URL;
}
}
var qsStart = baseUrl.indexOf('?');
if (qsStart !== -1) {
baseUrl = baseUrl.substr(0, qsStart);
}
qsStart = baseUrl.indexOf('#');
if (qsStart !== -1) {
baseUrl = baseUrl.substr(0, qsStart);
}
baseUrl = baseUrl.substr(0, baseUrl.lastIndexOf('/') + 1);
if (!url || url.length === 0) {
return baseUrl;
}
if (url.charAt(0) === '/') {
var slashslash = baseUrl.indexOf('://');
if (slashslash === -1) {
throw Error.argument("baseUrl", Sys.Res.badBaseUrl1);
}
var nextSlash = baseUrl.indexOf('/', slashslash + 3);
if (nextSlash === -1) {
throw Error.argument("baseUrl", Sys.Res.badBaseUrl2);
}
return baseUrl.substr(0, nextSlash) + url;
}
else {
var lastSlash = baseUrl.lastIndexOf('/');
if (lastSlash === -1) {
throw Error.argument("baseUrl", Sys.Res.badBaseUrl3);
}
return baseUrl.substr(0, lastSlash+1) + url;
}
}
Sys.Net.WebRequest._createQueryString = function Sys$Net$WebRequest$_createQueryString(queryString, encodeMethod, addParams) {
encodeMethod = encodeMethod || encodeURIComponent;
var i = 0, obj, val, arg, sb = new Sys.StringBuilder();
if (queryString) {
for (arg in queryString) {
obj = queryString[arg];
if (typeof(obj) === "function") continue;
val = Sys.Serialization.JavaScriptSerializer.serialize(obj);
if (i++) {
sb.append('&');
}
sb.append(arg);
sb.append('=');
sb.append(encodeMethod(val));
}
}
if (addParams) {
if (i) {
sb.append('&');
}
sb.append(addParams);
}
return sb.toString();
}
Sys.Net.WebRequest._createUrl = function Sys$Net$WebRequest$_createUrl(url, queryString, addParams) {
if (!queryString && !addParams) {
return url;
}
var qs = Sys.Net.WebRequest._createQueryString(queryString, null, addParams);
return qs.length
? url + ((url && url.indexOf('?') >= 0) ? "&" : "?") + qs
: url;
}
Sys.Net.WebRequest.registerClass('Sys.Net.WebRequest');
Sys._ScriptLoaderTask = function Sys$_ScriptLoaderTask(scriptElement, completedCallback) {
var e = Function._validateParams(arguments, [
{name: "scriptElement", domElement: true},
{name: "completedCallback", type: Function}
]);
if (e) throw e;
this._scriptElement = scriptElement;
this._completedCallback = completedCallback;
}
function Sys$_ScriptLoaderTask$get_scriptElement() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._scriptElement;
}
function Sys$_ScriptLoaderTask$dispose() {
if(this._disposed) {
return;
}
this._disposed = true;
this._removeScriptElementHandlers();
Sys._ScriptLoaderTask._clearScript(this._scriptElement);
this._scriptElement = null;
}
function Sys$_ScriptLoaderTask$execute() {
if (arguments.length !== 0) throw Error.parameterCount();
this._addScriptElementHandlers();
var headElements = document.getElementsByTagName('head');
if (headElements.length === 0) {
throw new Error.invalidOperation(Sys.Res.scriptLoadFailedNoHead);
}
else {
headElements[0].appendChild(this._scriptElement);
}
}
function Sys$_ScriptLoaderTask$_addScriptElementHandlers() {
this._scriptLoadDelegate = Function.createDelegate(this, this._scriptLoadHandler);
if (Sys.Browser.agent !== Sys.Browser.InternetExplorer) {
this._scriptElement.readyState = 'loaded';
$addHandler(this._scriptElement, 'load', this._scriptLoadDelegate);
}
else {
$addHandler(this._scriptElement, 'readystatechange', this._scriptLoadDelegate);
}
if (this._scriptElement.addEventListener) {
this._scriptErrorDelegate = Function.createDelegate(this, this._scriptErrorHandler);
this._scriptElement.addEventListener('error', this._scriptErrorDelegate, false);
}
}
function Sys$_ScriptLoaderTask$_removeScriptElementHandlers() {
if(this._scriptLoadDelegate) {
var scriptElement = this.get_scriptElement();
if (Sys.Browser.agent !== Sys.Browser.InternetExplorer) {
$removeHandler(scriptElement, 'load', this._scriptLoadDelegate);
}
else {
$removeHandler(scriptElement, 'readystatechange', this._scriptLoadDelegate);
}
if (this._scriptErrorDelegate) {
this._scriptElement.removeEventListener('error', this._scriptErrorDelegate, false);
this._scriptErrorDelegate = null;
}
this._scriptLoadDelegate = null;
}
}
function Sys$_ScriptLoaderTask$_scriptErrorHandler() {
if(this._disposed) {
return;
}
this._completedCallback(this.get_scriptElement(), false);
}
function Sys$_ScriptLoaderTask$_scriptLoadHandler() {
if(this._disposed) {
return;
}
var scriptElement = this.get_scriptElement();
if ((scriptElement.readyState !== 'loaded') &&
(scriptElement.readyState !== 'complete')) {
return;
}
this._completedCallback(scriptElement, true);
}
Sys._ScriptLoaderTask.prototype = {
get_scriptElement: Sys$_ScriptLoaderTask$get_scriptElement,
dispose: Sys$_ScriptLoaderTask$dispose,
execute: Sys$_ScriptLoaderTask$execute,
_addScriptElementHandlers: Sys$_ScriptLoaderTask$_addScriptElementHandlers,
_removeScriptElementHandlers: Sys$_ScriptLoaderTask$_removeScriptElementHandlers,
_scriptErrorHandler: Sys$_ScriptLoaderTask$_scriptErrorHandler,
_scriptLoadHandler: Sys$_ScriptLoaderTask$_scriptLoadHandler
}
Sys._ScriptLoaderTask.registerClass("Sys._ScriptLoaderTask", null, Sys.IDisposable);
Sys._ScriptLoaderTask._clearScript = function Sys$_ScriptLoaderTask$_clearScript(scriptElement) {
if (!Sys.Debug.isDebug) {
scriptElement.parentNode.removeChild(scriptElement);
}
}
Type.registerNamespace('Sys.Net');
Sys.Net.WebServiceProxy = function Sys$Net$WebServiceProxy() {
}
function Sys$Net$WebServiceProxy$get_timeout() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._timeout || 0;
}
function Sys$Net$WebServiceProxy$set_timeout(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Number}]);
if (e) throw e;
if (value < 0) { throw Error.argumentOutOfRange('value', value, Sys.Res.invalidTimeout); }
this._timeout = value;
}
function Sys$Net$WebServiceProxy$get_defaultUserContext() {
if (arguments.length !== 0) throw Error.parameterCount();
return (typeof(this._userContext) === "undefined") ? null : this._userContext;
}
function Sys$Net$WebServiceProxy$set_defaultUserContext(value) {
var e = Function._validateParams(arguments, [{name: "value", mayBeNull: true}]);
if (e) throw e;
this._userContext = value;
}
function Sys$Net$WebServiceProxy$get_defaultSucceededCallback() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._succeeded || null;
}
function Sys$Net$WebServiceProxy$set_defaultSucceededCallback(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Function, mayBeNull: true}]);
if (e) throw e;
this._succeeded = value;
}
function Sys$Net$WebServiceProxy$get_defaultFailedCallback() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._failed || null;
}
function Sys$Net$WebServiceProxy$set_defaultFailedCallback(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Function, mayBeNull: true}]);
if (e) throw e;
this._failed = value;
}
function Sys$Net$WebServiceProxy$get_enableJsonp() {
if (arguments.length !== 0) throw Error.parameterCount();
return !!this._jsonp;
}
function Sys$Net$WebServiceProxy$set_enableJsonp(value) {
var e = Function._validateParams(arguments, [{name: "value", type: Boolean}]);
if (e) throw e;
this._jsonp = value;
}
function Sys$Net$WebServiceProxy$get_path() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._path || null;
}
function Sys$Net$WebServiceProxy$set_path(value) {
var e = Function._validateParams(arguments, [{name: "value", type: String}]);
if (e) throw e;
this._path = value;
}
function Sys$Net$WebServiceProxy$get_jsonpCallbackParameter() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._callbackParameter || "callback";
}
function Sys$Net$WebServiceProxy$set_jsonpCallbackParameter(value) {
var e = Function._validateParams(arguments, [{name: "value", type: String}]);
if (e) throw e;
this._callbackParameter = value;
}
function Sys$Net$WebServiceProxy$_invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext) {
var e = Function._validateParams(arguments, [
{name: "servicePath", type: String},
{name: "methodName", type: String},
{name: "useGet", type: Boolean},
{name: "params"},
{name: "onSuccess", type: Function, mayBeNull: true, optional: true},
{name: "onFailure", type: Function, mayBeNull: true, optional: true},
{name: "userContext", mayBeNull: true, optional: true}
]);
if (e) throw e;
onSuccess = onSuccess || this.get_defaultSucceededCallback();
onFailure = onFailure || this.get_defaultFailedCallback();
if (userContext === null || typeof userContext === 'undefined') userContext = this.get_defaultUserContext();
return Sys.Net.WebServiceProxy.invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext, this.get_timeout(), this.get_enableJsonp(), this.get_jsonpCallbackParameter());
}
Sys.Net.WebServiceProxy.prototype = {
get_timeout: Sys$Net$WebServiceProxy$get_timeout,
set_timeout: Sys$Net$WebServiceProxy$set_timeout,
get_defaultUserContext: Sys$Net$WebServiceProxy$get_defaultUserContext,
set_defaultUserContext: Sys$Net$WebServiceProxy$set_defaultUserContext,
get_defaultSucceededCallback: Sys$Net$WebServiceProxy$get_defaultSucceededCallback,
set_defaultSucceededCallback: Sys$Net$WebServiceProxy$set_defaultSucceededCallback,
get_defaultFailedCallback: Sys$Net$WebServiceProxy$get_defaultFailedCallback,
set_defaultFailedCallback: Sys$Net$WebServiceProxy$set_defaultFailedCallback,
get_enableJsonp: Sys$Net$WebServiceProxy$get_enableJsonp,
set_enableJsonp: Sys$Net$WebServiceProxy$set_enableJsonp,
get_path: Sys$Net$WebServiceProxy$get_path,
set_path: Sys$Net$WebServiceProxy$set_path,
get_jsonpCallbackParameter: Sys$Net$WebServiceProxy$get_jsonpCallbackParameter,
set_jsonpCallbackParameter: Sys$Net$WebServiceProxy$set_jsonpCallbackParameter,
_invoke: Sys$Net$WebServiceProxy$_invoke
}
Sys.Net.WebServiceProxy.registerClass('Sys.Net.WebServiceProxy');
Sys.Net.WebServiceProxy.invoke = function Sys$Net$WebServiceProxy$invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext, timeout, enableJsonp, jsonpCallbackParameter) {
var e = Function._validateParams(arguments, [
{name: "servicePath", type: String},
{name: "methodName", type: String, mayBeNull: true, optional: true},
{name: "useGet", type: Boolean, optional: true},
{name: "params", mayBeNull: true, optional: true},
{name: "onSuccess", type: Function, mayBeNull: true, optional: true},
{name: "onFailure", type: Function, mayBeNull: true, optional: true},
{name: "userContext", mayBeNull: true, optional: true},
{name: "timeout", type: Number, optional: true},
{name: "enableJsonp", type: Boolean, mayBeNull: true, optional: true},
{name: "jsonpCallbackParameter", type: String, mayBeNull: true, optional: true}
]);
if (e) throw e;
var schemeHost = (enableJsonp !== false) ? Sys.Net.WebServiceProxy._xdomain.exec(servicePath) : null,
tempCallback, jsonp = schemeHost && (schemeHost.length === 3) &&
((schemeHost[1] !== location.protocol) || (schemeHost[2] !== location.host));
useGet = jsonp || useGet;
if (jsonp) {
jsonpCallbackParameter = jsonpCallbackParameter || "callback";
tempCallback = "_jsonp" + Sys._jsonp++;
}
if (!params) params = {};
var urlParams = params;
if (!useGet || !urlParams) urlParams = {};
var script, error, timeoutcookie = null, loader, body = null,
url = Sys.Net.WebRequest._createUrl(methodName
? (servicePath+"/"+encodeURIComponent(methodName))
: servicePath, urlParams, jsonp ? (jsonpCallbackParameter + "=Sys." + tempCallback) : null);
if (jsonp) {
script = document.createElement("script");
script.src = url;
loader = new Sys._ScriptLoaderTask(script, function(script, loaded) {
if (!loaded || tempCallback) {
jsonpComplete({ Message: String.format(Sys.Res.webServiceFailedNoMsg, methodName) }, -1);
}
});
function jsonpComplete(data, statusCode) {
if (timeoutcookie !== null) {
window.clearTimeout(timeoutcookie);
timeoutcookie = null;
}
loader.dispose();
delete Sys[tempCallback];
tempCallback = null;
if ((typeof(statusCode) !== "undefined") && (statusCode !== 200)) {
if (onFailure) {
error = new Sys.Net.WebServiceError(false,
data.Message || String.format(Sys.Res.webServiceFailedNoMsg, methodName),
data.StackTrace || null,
data.ExceptionType || null,
data);
error._statusCode = statusCode;
onFailure(error, userContext, methodName);
}
else {
if (data.StackTrace && data.Message) {
error = data.StackTrace + "-- " + data.Message;
}
else {
error = data.StackTrace || data.Message;
}
error = String.format(error ? Sys.Res.webServiceFailed : Sys.Res.webServiceFailedNoMsg, methodName, error);
throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
}
}
else if (onSuccess) {
onSuccess(data, userContext, methodName);
}
}
Sys[tempCallback] = jsonpComplete;
loader.execute();
return null;
}
var request = new Sys.Net.WebRequest();
request.set_url(url);
request.get_headers()['Content-Type'] = 'application/json; charset=utf-8';
if (!useGet) {
body = Sys.Serialization.JavaScriptSerializer.serialize(params);
if (body === "{}") body = "";
}
request.set_body(body);
request.add_completed(onComplete);
if (timeout && timeout > 0) request.set_timeout(timeout);
request.invoke();
function onComplete(response, eventArgs) {
if (response.get_responseAvailable()) {
var statusCode = response.get_statusCode();
var result = null;
try {
var contentType = response.getResponseHeader("Content-Type");
if (contentType.startsWith("application/json")) {
result = response.get_object();
}
else if (contentType.startsWith("text/xml")) {
result = response.get_xml();
}
else {
result = response.get_responseData();
}
} catch (ex) {
}
var error = response.getResponseHeader("jsonerror");
var errorObj = (error === "true");
if (errorObj) {
if (result) {
result = new Sys.Net.WebServiceError(false, result.Message, result.StackTrace, result.ExceptionType, result);
}
}
else if (contentType.startsWith("application/json")) {
result = (!result || (typeof(result.d) === "undefined")) ? result : result.d;
}
if (((statusCode < 200) || (statusCode >= 300)) || errorObj) {
if (onFailure) {
if (!result || !errorObj) {
result = new Sys.Net.WebServiceError(false , String.format(Sys.Res.webServiceFailedNoMsg, methodName));
}
result._statusCode = statusCode;
onFailure(result, userContext, methodName);
}
else {
if (result && errorObj) {
error = result.get_exceptionType() + "-- " + result.get_message();
}
else {
error = response.get_responseData();
}
throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
}
}
else if (onSuccess) {
onSuccess(result, userContext, methodName);
}
}
else {
var msg;
if (response.get_timedOut()) {
msg = String.format(Sys.Res.webServiceTimedOut, methodName);
}
else {
msg = String.format(Sys.Res.webServiceFailedNoMsg, methodName)
}
if (onFailure) {
onFailure(new Sys.Net.WebServiceError(response.get_timedOut(), msg, "", ""), userContext, methodName);
}
else {
throw Sys.Net.WebServiceProxy._createFailedError(methodName, msg);
}
}
}
return request;
}
Sys.Net.WebServiceProxy._createFailedError = function Sys$Net$WebServiceProxy$_createFailedError(methodName, errorMessage) {
var displayMessage = "Sys.Net.WebServiceFailedException: " + errorMessage;
var e = Error.create(displayMessage, { 'name': 'Sys.Net.WebServiceFailedException', 'methodName': methodName });
e.popStackFrame();
return e;
}
Sys.Net.WebServiceProxy._defaultFailedCallback = function Sys$Net$WebServiceProxy$_defaultFailedCallback(err, methodName) {
var error = err.get_exceptionType() + "-- " + err.get_message();
throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
}
Sys.Net.WebServiceProxy._generateTypedConstructor = function Sys$Net$WebServiceProxy$_generateTypedConstructor(type) {
return function(properties) {
if (properties) {
for (var name in properties) {
this[name] = properties[name];
}
}
this.__type = type;
}
}
Sys._jsonp = 0;
Sys.Net.WebServiceProxy._xdomain = /^\s*([a-zA-Z0-9\+\-\.]+\:)\/\/([^?#\/]+)/;
Sys.Net.WebServiceError = function Sys$Net$WebServiceError(timedOut, message, stackTrace, exceptionType, errorObject) {
var e = Function._validateParams(arguments, [
{name: "timedOut", type: Boolean},
{name: "message", type: String, mayBeNull: true},
{name: "stackTrace", type: String, mayBeNull: true, optional: true},
{name: "exceptionType", type: String, mayBeNull: true, optional: true},
{name: "errorObject", type: Object, mayBeNull: true, optional: true}
]);
if (e) throw e;
this._timedOut = timedOut;
this._message = message;
this._stackTrace = stackTrace;
this._exceptionType = exceptionType;
this._errorObject = errorObject;
this._statusCode = -1;
}
function Sys$Net$WebServiceError$get_timedOut() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._timedOut;
}
function Sys$Net$WebServiceError$get_statusCode() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._statusCode;
}
function Sys$Net$WebServiceError$get_message() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._message;
}
function Sys$Net$WebServiceError$get_stackTrace() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._stackTrace || "";
}
function Sys$Net$WebServiceError$get_exceptionType() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._exceptionType || "";
}
function Sys$Net$WebServiceError$get_errorObject() {
if (arguments.length !== 0) throw Error.parameterCount();
return this._errorObject || null;
}
Sys.Net.WebServiceError.prototype = {
get_timedOut: Sys$Net$WebServiceError$get_timedOut,
get_statusCode: Sys$Net$WebServiceError$get_statusCode,
get_message: Sys$Net$WebServiceError$get_message,
get_stackTrace: Sys$Net$WebServiceError$get_stackTrace,
get_exceptionType: Sys$Net$WebServiceError$get_exceptionType,
get_errorObject: Sys$Net$WebServiceError$get_errorObject
}
Sys.Net.WebServiceError.registerClass('Sys.Net.WebServiceError');
Type.registerNamespace('Sys');
Sys.Res={
'urlMustBeLessThan1024chars':'The history state must be small enough to not make the url larger than 1024 characters.',
'argumentTypeName':'Value is not the name of an existing type.',
'cantBeCalledAfterDispose':'Can\'t be called after dispose.',
'componentCantSetIdAfterAddedToApp':'The id property of a component can\'t be set after it\'s been added to the Application object.',
'behaviorDuplicateName':'A behavior with name \'{0}\' already exists or it is the name of an existing property on the target element.',
'notATypeName':'Value is not a valid type name.',
'elementNotFound':'An element with id \'{0}\' could not be found.',
'stateMustBeStringDictionary':'The state object can only have null and string fields.',
'boolTrueOrFalse':'Value must be \'true\' or \'false\'.',
'scriptLoadFailedNoHead':'ScriptLoader requires pages to contain a <head> element.',
'stringFormatInvalid':'The format string is invalid.',
'referenceNotFound':'Component \'{0}\' was not found.',
'enumReservedName':'\'{0}\' is a reserved name that can\'t be used as an enum value name.',
'circularParentChain':'The chain of control parents can\'t have circular references.',
'namespaceContainsNonObject':'Object {0} already exists and is not an object.',
'undefinedEvent':'\'{0}\' is not an event.',
'propertyUndefined':'\'{0}\' is not a property or an existing field.',
'observableConflict':'Object already contains a member with the name \'{0}\'.',
'historyCannotEnableHistory':'Cannot set enableHistory after initialization.',
'eventHandlerInvalid':'Handler was not added through the Sys.UI.DomEvent.addHandler method.',
'scriptLoadFailedDebug':'The script \'{0}\' failed to load. Check for:\r\n Inaccessible path.\r\n Script errors. (IE) Enable \'Display a notification about every script error\' under advanced settings.',
'propertyNotWritable':'\'{0}\' is not a writable property.',
'enumInvalidValueName':'\'{0}\' is not a valid name for an enum value.',
'controlAlreadyDefined':'A control is already associated with the element.',
'addHandlerCantBeUsedForError':'Can\'t add a handler for the error event using this method. Please set the window.onerror property instead.',
'cantAddNonFunctionhandler':'Can\'t add a handler that is not a function.',
'invalidNameSpace':'Value is not a valid namespace identifier.',
'notAnInterface':'Value is not a valid interface.',
'eventHandlerNotFunction':'Handler must be a function.',
'propertyNotAnArray':'\'{0}\' is not an Array property.',
'namespaceContainsClass':'Object {0} already exists as a class, enum, or interface.',
'typeRegisteredTwice':'Type {0} has already been registered. The type may be defined multiple times or the script file that defines it may have already been loaded. A possible cause is a change of settings during a partial update.',
'cantSetNameAfterInit':'The name property can\'t be set on this object after initialization.',
'historyMissingFrame':'For the history feature to work in IE, the page must have an iFrame element with id \'__historyFrame\' pointed to a page that gets its title from the \'title\' query string parameter and calls Sys.Application._onIFrameLoad() on the parent window. This can be done by setting EnableHistory to true on ScriptManager.',
'appDuplicateComponent':'Two components with the same id \'{0}\' can\'t be added to the application.',
'historyCannotAddHistoryPointWithHistoryDisabled':'A history point can only be added if enableHistory is set to true.',
'baseNotAClass':'Value is not a class.',
'expectedElementOrId':'Value must be a DOM element or DOM element Id.',
'methodNotFound':'No method found with name \'{0}\'.',
'arrayParseBadFormat':'Value must be a valid string representation for an array. It must start with a \'[\' and end with a \']\'.',
'stateFieldNameInvalid':'State field names must not contain any \'=\' characters.',
'cantSetId':'The id property can\'t be set on this object.',
'stringFormatBraceMismatch':'The format string contains an unmatched opening or closing brace.',
'enumValueNotInteger':'An enumeration definition can only contain integer values.',
'propertyNullOrUndefined':'Cannot set the properties of \'{0}\' because it returned a null value.',
'argumentDomNode':'Value must be a DOM element or a text node.',
'componentCantSetIdTwice':'The id property of a component can\'t be set more than once.',
'createComponentOnDom':'Value must be null for Components that are not Controls or Behaviors.',
'createNotComponent':'{0} does not derive from Sys.Component.',
'createNoDom':'Value must not be null for Controls and Behaviors.',
'cantAddWithoutId':'Can\'t add a component that doesn\'t have an id.',
'notObservable':'Instances of type \'{0}\' cannot be observed.',
'badTypeName':'Value is not the name of the type being registered or the name is a reserved word.',
'argumentInteger':'Value must be an integer.',
'invokeCalledTwice':'Cannot call invoke more than once.',
'webServiceFailed':'The server method \'{0}\' failed with the following error: {1}',
'argumentType':'Object cannot be converted to the required type.',
'argumentNull':'Value cannot be null.',
'scriptAlreadyLoaded':'The script \'{0}\' has been referenced multiple times. If referencing Microsoft AJAX scripts explicitly, set the MicrosoftAjaxMode property of the ScriptManager to Explicit.',
'scriptDependencyNotFound':'The script \'{0}\' failed to load because it is dependent on script \'{1}\'.',
'formatBadFormatSpecifier':'Format specifier was invalid.',
'requiredScriptReferenceNotIncluded':'\'{0}\' requires that you have included a script reference to \'{1}\'.',
'webServiceFailedNoMsg':'The server method \'{0}\' failed.',
'argumentDomElement':'Value must be a DOM element.',
'invalidExecutorType':'Could not create a valid Sys.Net.WebRequestExecutor from: {0}.',
'cannotCallBeforeResponse':'Cannot call {0} when responseAvailable is false.',
'actualValue':'Actual value was {0}.',
'enumInvalidValue':'\'{0}\' is not a valid value for enum {1}.',
'scriptLoadFailed':'The script \'{0}\' could not be loaded.',
'parameterCount':'Parameter count mismatch.',
'cannotDeserializeEmptyString':'Cannot deserialize empty string.',
'formatInvalidString':'Input string was not in a correct format.',
'invalidTimeout':'Value must be greater than or equal to zero.',
'cannotAbortBeforeStart':'Cannot abort when executor has not started.',
'argument':'Value does not fall within the expected range.',
'cannotDeserializeInvalidJson':'Cannot deserialize. The data does not correspond to valid JSON.',
'invalidHttpVerb':'httpVerb cannot be set to an empty or null string.',
'nullWebRequest':'Cannot call executeRequest with a null webRequest.',
'eventHandlerInvalid':'Handler was not added through the Sys.UI.DomEvent.addHandler method.',
'cannotSerializeNonFiniteNumbers':'Cannot serialize non finite numbers.',
'argumentUndefined':'Value cannot be undefined.',
'webServiceInvalidReturnType':'The server method \'{0}\' returned an invalid type. Expected type: {1}',
'servicePathNotSet':'The path to the web service has not been set.',
'argumentTypeWithTypes':'Object of type \'{0}\' cannot be converted to type \'{1}\'.',
'cannotCallOnceStarted':'Cannot call {0} once started.',
'badBaseUrl1':'Base URL does not contain ://.',
'badBaseUrl2':'Base URL does not contain another /.',
'badBaseUrl3':'Cannot find last / in base URL.',
'setExecutorAfterActive':'Cannot set executor after it has become active.',
'paramName':'Parameter name: {0}',
'nullReferenceInPath':'Null reference while evaluating data path: \'{0}\'.',
'cannotCallOutsideHandler':'Cannot call {0} outside of a completed event handler.',
'cannotSerializeObjectWithCycle':'Cannot serialize object with cyclic reference within child properties.',
'format':'One of the identified items was in an invalid format.',
'assertFailedCaller':'Assertion Failed: {0}\r\nat {1}',
'argumentOutOfRange':'Specified argument was out of the range of valid values.',
'webServiceTimedOut':'The server method \'{0}\' timed out.',
'notImplemented':'The method or operation is not implemented.',
'assertFailed':'Assertion Failed: {0}',
'invalidOperation':'Operation is not valid due to the current state of the object.',
'breakIntoDebugger':'{0}\r\n\r\nBreak into debugger?'
};
var Atom = {
url: function (url, q) {
var finalUrl = url;
var index = finalUrl.indexOf('?');
if (index == -1) {
finalUrl += "?";
}else {
finalUrl += '&';
}
var plist = [];
for (var i in q) {
if (q.hasOwnProperty(i)) {
var val = q[i];
if (val === undefined)
continue;
if (val === null)
continue;
plist.push(i + '=' + encodeURIComponent(val) );
}
}
finalUrl += plist.join('&');
return finalUrl;
},
tableLayout: function (columns, cellWidth, cellHeight) {
return new NeuroSpeech.WebAtoms.AtomTableLayout(columns, cellWidth, cellHeight);
}
};
function log(s) {
if (typeof console!="undefined") {
console.log(s);
}
}
AtomBrowser = {
browserName: "",
version: "1.0",
majorVersion: 1,
isMobile: false,
detect: function () {
var nVer = navigator.appVersion;
var nAgt = navigator.userAgent;
var browserName = navigator.appName;
var fullVersion = '' + parseFloat(navigator.appVersion);
var majorVersion = parseInt(navigator.appVersion, 10);
var nameOffset, verOffset, ix;
if ((verOffset = nAgt.indexOf("Opera")) != -1) {
browserName = "Opera";
fullVersion = nAgt.substring(verOffset + 6);
if ((verOffset = nAgt.indexOf("Version")) != -1)
fullVersion = nAgt.substring(verOffset + 8);
}
else if ((verOffset = nAgt.indexOf("MSIE")) != -1) {
browserName = "Microsoft Internet Explorer";
fullVersion = nAgt.substring(verOffset + 5);
}
else if ((verOffset = nAgt.indexOf("Chrome")) != -1) {
browserName = "Chrome";
fullVersion = nAgt.substring(verOffset + 7);
}
else if ((verOffset = nAgt.indexOf("Safari")) != -1) {
browserName = "Safari";
this.isMobile = nAgt.indexOf("iOS") != -1;
fullVersion = nAgt.substring(verOffset + 7);
if ((verOffset = nAgt.indexOf("Version")) != -1)
fullVersion = nAgt.substring(verOffset + 8);
}
else if ((verOffset = nAgt.indexOf("Firefox")) != -1) {
browserName = "Firefox";
fullVersion = nAgt.substring(verOffset + 8);
}
else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) <
(verOffset = nAgt.lastIndexOf('/'))) {
browserName = nAgt.substring(nameOffset, verOffset);
fullVersion = nAgt.substring(verOffset + 1);
if (browserName.toLowerCase() == browserName.toUpperCase()) {
browserName = navigator.appName;
}
}
if ((ix = fullVersion.indexOf(";")) != -1)
fullVersion = fullVersion.substring(0, ix);
if ((ix = fullVersion.indexOf(" ")) != -1)
fullVersion = fullVersion.substring(0, ix);
majorVersion = parseInt('' + fullVersion, 10);
if (isNaN(majorVersion)) {
fullVersion = '' + parseFloat(navigator.appVersion);
majorVersion = parseInt(navigator.appVersion, 10);
}
this.browserName = browserName;
this.majorVersion = majorVersion;
},
isFF: false,
isChrome: false,
isIE: false,
isSafari:false,
initialize: function () {
switch (this.browserName) {
case "Firefox":
this.supportsUpload = this.majorVersion >= 4;
this.isFF = true;
break;
case "Chrome":
this.supportsUpload = this.majorVersion >= 6;
this.isChrome = true;
break;
case "Microsoft Internet Explorer":
this.supportsUpload = this.majorVersion >= 10;
this.isIE = true;
break;
case "Safari":
this.isSafari = true;
if(!this.isMobile)
this.supportsUpload = this.majorVersion >= 5;
break;
}
this.supportsFlash = !this.isMobile;
}
};
AtomBrowser.detect();
AtomBrowser.initialize();
AtomEnumerator = function (array) {
this._array = array;
this.n = array.length;
this.i = -1;
};
AtomEnumerator.prototype = {
next: function () {
this.i = this.i + 1;
return this.i < this.n;
},
current: function () {
return this._array[this.i];
},
currentIndex: function () {
return this.i;
},
isFirst: function () {
return this.i == 0;
},
isLast: function () {
return this.i == this.n - 1;
},
reset: function () {
this.i = -1;
}
};
AtomEnumerator.registerClass("AtomEnumerator");
AtomLogicContext = function () {
this._called = false;
};
AtomLogicContext.prototype = {
preventRecursive: function (f,thisArg) {
if (this._called)
return;
this._called = true;
try {
f.apply(thisArg);
} finally {
this._called = false;
}
}
};
AtomLogicContext.registerClass("AtomLogicContext");
Array.prototype.enumerator = function () {
return new AtomEnumerator(this);
};
if (!Array.prototype.indexOf) {
Array.prototype.indexOf = function (item) {
var i = 0;
for (i = 0; i < this.length; i++) {
if (item == this[i])
return i;
}
return -1;
}
}
AtomArray = {
split: function (text, sep) {
var ar = text.split(sep);
var r = [];
var ae = new AtomEnumerator(ar);
var item;
while (ae.next()) {
item = ae.current();
if (item && item.constructor == String) {
item = $.trim(item);
}
r.push(item);
}
return r;
},
getValues: function (array, path) {
var item;
var result = array;
if (path) {
result = [];
var ae = new AtomEnumerator(array);
while (ae.next()) {
item = ae.current();
result.push(item[path]);
}
}
return result;
},
intersect: function (array, path, value) {
var result = [];
var ae = new AtomEnumerator(value);
var item;
var match;
while (ae.next()) {
item = ae.current();
match = this.getMatch(array, path, item);
if (match != undefined)
result.push(match);
}
return result;
},
getMatch: function (array, path, value) {
var ae = new AtomEnumerator(array);
var dataItem;
var item;
while (ae.next()) {
dataItem = ae.current();
item = dataItem;
if (path)
item = dataItem[path];
if (item == value)
return dataItem;
}
},
remove: function (array, item) {
var ae = new AtomEnumerator(array);
while (ae.next()) {
var arrayItem = ae.current();
if (arrayItem == item) {
array.splice(ae.currentIndex(), 1);
return;
}
}
}
};
AtomRect = function () {
if (arguments) {
if (arguments.length == 1) {
var r = arguments[0];
this.copyFrom(r);
} else if (arguments.length == 4) {
this.left = arguments[0];
this.top = arguments[1];
this.width = arguments[2];
this.height = arguments[3];
}
}
};
AtomRect.prototype = {
copyFrom: function (r) {
this.left = r.left;
this.top = r.top;
this.width = r.width;
this.height = r.height;
},
clone: function () {
return new AtomRect(this);
},
load: function (e) {
this.copyFrom(AtomUI.getItemRect(e));
},
apply: function (e) {
AtomUI.setItemRect(e, this);
}
};
AtomRect.registerClass("AtomRect");
if (!Type.isNamespace("NeuroSpeech.WebAtoms"))
Type.registerNamespace("NeuroSpeech.WebAtoms");
AtomUI =
{
startsWith: function (text, part) {
return text.indexOf(part) == 0;
},
endsWith: function (text, part) {
return text.lastIndexOf(part) == (text.length - part.length);
},
isNode: function (o) {
if (o === window || o === document)
return true;
return (
typeof Node === "object" ? o instanceof Node :
typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string"
);
},
createDelegate: function (instance, methodName) {
return this.getDelegate(instance, methodName, true);
},
getDelegate: function (instance, methodName, create) {
if (methodName && methodName.constructor != String)
throw new Error("methodName has to be string");
var d = instance.__delegates;
if (!d) {
if (!create)
return null;
d = {};
instance.__delegates = d;
}
var m = d[methodName];
if (!m) {
if (!create)
return null;
var f = instance[methodName];
m = function () {
return f.apply(instance, arguments);
};
d[methodName] = m;
}
return m;
},
getNewIndex: function () {
if (this.__index == undefined || this.__index == null) {
this.__index = 1001;
}else {
this.__index = this.__index + 1;
}
return this.__index;
},
addCssAt: function (element, index, css) {
var child = $(element).children()[index];
Sys.UI.DomElement.addCssClass(child, css)
},
removeCssAt: function (element, index, css) {
var child = $(element).children()[index];
Sys.UI.DomElement.removeCssClass(child, css)
},
childIndexOf: function (parent, element) {
var n = parent.children.length;
for (var i = 0; i < n; i++) {
if (parent.children[i] == element)
return i;
}
return -1;
},
addClass: function (element, css) {
$(element).addClass(css);
AtomUI.updateCss(element);
},
removeClass: function (element, css) {
$(element).removeClass(css);
AtomUI.updateCss(element);
},
updateCss: function (element) {
var selected = $(element).hasClass("atom-selected");
var type = $(element).attr("atom-style");
if (type == undefined || type == null || type == "") {
return;
}
if (selected)
type = type + "Active";
var url = 'url("/Handlers/GetPNG.ashx?control=' + type;
url += "&width=" + $(element).outerWidth();
url += "&height=" + $(element).outerHeight();
url += '")';
var oldUrl = element.style.backgroundImage;
if (url != oldUrl) {
element.style.backgroundImage = url;
element.style.backgroundRepeat = "no-repeat";
}
},
setUI: function (element, type, css) {
if (type != null) {
$(element).attr("atom-style", function () {
return type;
});
}
if (css != undefined && css != null && css != "") {
if (!$(element).hasClass(css))
$(element).addClass(css);
}
AtomUI.updateCss(element);
},
contains: function (array, item) {
var n = array.length;
var i = 0;
for (i = 0; i < n; i++) {
if (array[i] == item)
return true;
}
return false;
},
removeAllChildren: function (element) {
while (element.hasChildNodes()) {
var lc = element.lastChild;
element.removeChild(lc);
if (lc.atomControl) {
lc.atomControl.dispose();
delete lc.atomControl;
}
delete lc;
}
},
parseStyleNumber: function (x) {
var n = parseFloat(x);
if (isNaN(n))
return 0;
return n;
},
parseStyleRect: function (e, key, addTo, pad) {
var r = {
left: 0,
top: 0,
right: 0,
bottom: 0
};
if (addTo) {
r.left += addTo.left;
r.right += addTo.right;
r.top += addTo.top;
r.bottom += addTo.bottom;
}
if (!pad)
pad = "";
r.left += this.parseStyleNumber(e[key + "Left" + pad]);
r.right += this.parseStyleNumber(e[key + "Right" + pad]);
r.top += this.parseStyleNumber(e[key + "Top" + pad]);
r.bottom += this.parseStyleNumber(e[key + "Bottom" + pad]);
return r;
},
camelize: function (s) {
return s.replace(/\-([a-z])/g, function (a, b) {
return b.toUpperCase();
});
},
ignoreStyleNames: {},
getComputedStyle: function (e) {
var style;
var returns = {};
if (window.getComputedStyle) {
style = window.getComputedStyle(e, null);
var ae = new AtomEnumerator(style);
while (ae.next()) {
var p = ae.current();
try {
returns[this.camelize(p)] = style.getPropertyValue(p);
} catch (error) {
this.ignoreStyleNames[p] = "ignore";
}
}
return returns;
}
if (e.currentStyle) {
style = e.currentStyle;
for (var p in style) {
returns[p] = style[p];
}
return returns;
}
return $(e).css();
},
getItemRect: function (e) {
var s = this.getComputedStyle(e);
if (s.display == "none")
return new AtomRect(0, 0, 0, 0);
var r = new AtomRect();
r.left = this.parseStyleNumber(s.left);
r.top = this.parseStyleNumber(s.top);
r.width = this.parseStyleNumber(s.width);
r.height = this.parseStyleNumber(s.height);
var pad = this.parseStyleRect(s, "margin");
if (this.isWebkit()) {
if (!this.isWeirdControl(e)) {
pad = this.parseStyleRect(s, "padding", pad);
pad = this.parseStyleRect(s, "border", pad, "Width");
}
}
else {
pad = this.parseStyleRect(s, "padding", pad);
pad = this.parseStyleRect(s, "border", pad, "Width");
}
r.left = 0;
r.top = 0;
r.width += pad.left + pad.right;
r.height += pad.top + pad.bottom;
return r;
},
isWebkit: function () {
if (window.navigator.userAgent.toLowerCase().indexOf("webkit") == -1)
return false;
return true;
},
isWeirdControl: function (e) {
return e.nodeName == "BUTTON" || e.nodeName == "SELECT" || (e.nodeName == "INPUT" && $(e).attr("type") == "submit");
},
setItemRect: function (e, r) {
var s = this.getComputedStyle(e);
var pad = this.parseStyleRect(s, "margin");
if (!this.isWeirdControl(e)) {
pad = this.parseStyleRect(s, "padding", pad);
pad = this.parseStyleRect(s, "border", pad, "Width");
}
if (r.width) {
r.width -= (pad.left + pad.right);
if (r.width < 0)
r.width = 0;
e.style.width = r.width + "px";
}
if (r.height) {
r.height -= (pad.top + pad.bottom);
if (r.height < 0)
r.height = 0;
e.style.height = r.height + "px";
}
if (r.left) {
e.style.left = r.left + "px";
}
if (r.top) {
e.style.top = r.top + "px";
}
},
isControl: function (element) {
if (element.atomControl)
return true;
var attr = $(element).attr("atom-type");
if (attr && attr == "Template")
return false;
return attr || element.atomControl;
},
isTemplate: function (element) {
var attr = $(element).attr("atom-type");
if (attr && attr == "Template")
return true;
return false;
},
isNotControl: function (element) {
return !(this.isControl(element) || this.isTemplate(element));
},
forEachChildren: function (element, action, filter) {
var ae = new AtomEnumerator($(element).children());
var child;
while (ae.next()) {
child = ae.current();
if (filter && !filter(child))
continue;
action(child);
this.forEachChildren(child,action,filter);
}
},
createControl: function (element, type, data, newScope) {
if (element.atomControl)
return;
var controlType = $(element).attr("atom-type");
if (controlType) {
type = NeuroSpeech.WebAtoms[controlType];
}
if (type) {
var ctrl = new type(element);
if (data) {
ctrl._data = data;
}
if (newScope) {
ctrl._scope = newScope;
}
ctrl.createChildren();
if (data) {
ctrl.initialize();
}
return ctrl;
}
return null;
}
}
AtomUI.isIE7 =  window.navigator.userAgent.indexOf("MSIE 7.0")!=-1;
AtomUI.isIE8 =  window.navigator.userAgent.indexOf("MSIE 8.0")!=-1;
NeuroSpeech.WebAtoms.AtomEvents = function () {
this.events = {};
};
NeuroSpeech.WebAtoms.AtomEvents.prototype = {
getHandler: function (name, create) {
if (create == undefined || create == null)
create = true;
var h = this.events[name];
if (h != undefined && h != null)
return h;
if (!create)
return null;
h = [];
this.events[name] = h;
return h;
},
addHandler: function (name, handler) {
var handlers = this.getHandler(name, true);
handlers.push(handler);
},
removeHandler: function (name, handler) {
var handlers = this.getHandler(name);
if (handlers == null)
return;
var index = handlers.indexOf(handler);
if (index != -1) {
handlers.splice(index, 1);
}
},
raise: function (name, args) {
var handlers = this.getHandler(name, false);
if (handlers == null)
return;
var ae = new AtomEnumerator(handlers);
while (ae.next()) {
var h = ae.current();
h.apply(null, args);
}
}
};
NeuroSpeech.WebAtoms.AtomEvents.registerClass("NeuroSpeech.WebAtoms.AtomEvents");
AtomBinder = {
getClone: function (dupeObj) {
var retObj = {};
if (typeof (dupeObj) == 'object') {
if (typeof (dupeObj.length) != 'undefined')
var retObj = new Array();
for (var objInd in dupeObj) {
var val = dupeObj[objInd];
if (val == undefined || val == null)
continue;
if (objInd == "_$_handlers")
continue;
var type = typeof (val);
if (type == 'object') {
if (val.constructor == Date) {
retObj[objInd] = val.toUTCString();
} else {
retObj[objInd] = this.getClone(val);
}
} else if (type == 'string') {
retObj[objInd] = val;
} else if (type == 'number') {
retObj[objInd] = val;
} else if (type == 'boolean') {
((val == true) ? retObj[objInd] = true : retObj[objInd] = false);
} else if (type == 'date') {
retObj[objInd] = val.getTime();
}
}
}
return retObj;
},
setValue: function (target, key, value) {
if (target == null && value == undefined)
return;
var oldValue = this.getValue(target, key);
if (oldValue === value)
return;
var f = target["set_" + key];
if (f == null)
target[key] = value;
else
f.apply(target, [value]);
this.refreshValue(target, key, oldValue, value);
},
refreshValue: function (target, key) {
var handlers = this.get_WatchHandler(target, key);
if (handlers == undefined || handlers == null)
return;
var ae = new AtomEnumerator(handlers);
while (ae.next()) {
var item = ae.current();
item(target, key);
}
},
getValue: function (target, key) {
if (target == null)
return null;
var f = target["get_" + key];
if (f == null)
return target[key];
return f.apply(target);
},
add_WatchHandler: function (target, key, handler) {
if (target == null)
return;
var handlers = this.get_WatchHandler(target, key);
handlers.push(handler);
},
get_WatchHandler: function (target, key) {
if (target == null)
return null;
var handlers = target["_$_handlers"];
if (!handlers) {
handlers = {};
target["_$_handlers"] = handlers;
}
var handlersForKey = handlers[key];
if (handlersForKey == undefined || handlersForKey == null) {
handlersForKey = [];
handlers[key] = handlersForKey;
}
return handlersForKey;
},
remove_WatchHandler: function (target, key, handler) {
if (target == null)
return;
if (target.handlers == undefined || target.handlers == null)
return;
var handlersForKey = target.handlers[key];
if (handlersForKey == undefined || handlersForKey == null)
return;
var ae = new AtomEnumerator(handlersForKey);
while (ae.next()) {
if (ae.current() == handler) {
handlersForKey.splice(ae.currentIndex(), 1);
return;
}
}
},
invokeItemsEvent: function (target, mode, index, item) {
var key = "_items";
var handlers = this.get_WatchHandler(target, key);
if (handlers == undefined || handlers == null)
return;
var ae = new AtomEnumerator(handlers);
while (ae.next()) {
var obj = ae.current();
obj(mode, index, item);
}
},
clear: function (ary) {
ary.length = 0;
this.invokeItemsEvent(ary, "refresh", 0, null);
},
addItem: function (ary, item) {
var l = ary.length;
ary.push(item);
this.invokeItemsEvent(ary, "add", l, item);
},
addItems: function (ary, items) {
var ae = new AtomEnumerator(items);
while (ae.next()) {
this.addItem(ary, ae.current());
}
},
removeItem: function (ary, item) {
var i = ary.indexOf(item);
if (i == -1)
return;
ary.splice(i, 1);
this.invokeItemsEvent(ary, "remove", i, item);
},
refreshItems: function (ary) {
this.invokeItemsEvent(ary, "refresh", -1, null);
},
add_CollectionChanged: function (target, handler) {
if (target == null)
return;
var key = "_items";
var handlers = this.get_WatchHandler(target, key);
handlers.push(handler);
},
remove_CollectionChanged: function (target, handler) {
if (target == null)
return;
if (target.handlers == undefined || target.handlers == null)
return;
var key = "_items";
var handlersForKey = target.handlers[key];
if (handlersForKey == undefined || handlersForKey == null)
return;
var ae = new AtomEnumerator(handlersForKey);
while (ae.next()) {
if (ae.current() == handler) {
handlersForKey.splice(ae.currentIndex(), 1);
return;
}
}
},
setError: function (target, key, message) {
var errors = this.getValue(target, "__errors");
if (!errors) {
this.setValue(target, "__errors", {});
}
AtomBinder.setValue(errors, key, message);
}
};
NeuroSpeech.WebAtoms.AtomComponent = function () {
this._eventHandlers = [];
};
NeuroSpeech.WebAtoms.AtomComponent.prototype = {
bindEvent: function (element, name, methodName, key) {
if (element == null)
return;
var method = AtomUI.createDelegate(this, methodName);
var be = {
element: element,
name: name,
methodName: methodName,
handler: method
};
if (key) {
be.key = key;
}
if (AtomUI.isNode(element)) {
$(element).bind(name, null, method);
} else {
var f = element["add_" + name];
if (f == null) {
f = AtomBinder["add_" + name];
if (key) {
f.apply(AtomBinder, [element, key, method]);
}
else {
f.apply(AtomBinder, [element, method]);
}
} else {
f.apply(element, [method]);
}
}
this._eventHandlers.push(be);
},
unbindEvent: function (element, name, methodName, key) {
var ae = new AtomEnumerator(this._eventHandlers);
var removed = [];
while (ae.next()) {
var be = ae.current();
if (element && element !== be.element)
continue;
if (name && name !== be.name)
continue;
if (methodName && methodName !== be.methodName)
continue;
if (key && key !== be.key)
continue;
if (AtomUI.isNode(be.element)) {
$(be.element).unbind(be.name, be.handler);
} else {
var f = be.element["remove_" + be.name];
if (f == null) {
f = AtomBinder["remove_" + be.name];
if (key) {
f.apply(AtomBinder, [be.element, be.handler, be.key]);
}
else {
f.apply(AtomBinder, [be.element, be.handler]);
}
} else {
f.apply(be.element, [be.handler]);
}
}
removed.push(be);
}
ae = new AtomEnumerator(removed);
while (ae.next()) {
var be = ae.current();
AtomArray.remove(this._eventHandlers, be);
}
},
initialize: function () {
},
dispose: function () {
this.unbindEvent(null, null, null);
if (this.__delegates)
this.__delegates = null;
}
};
NeuroSpeech.WebAtoms.AtomComponent.registerClass("NeuroSpeech.WebAtoms.AtomComponent");
NeuroSpeech.WebAtoms.AtomBinding = function (control, element, key, path, twoWays, jq, valueFunction, urlFunction) {
NeuroSpeech.WebAtoms.AtomBinding.initializeBase(this);
this.element = element;
this.control = control;
this.valueFunction = valueFunction;
this.urlFunction = urlFunction;
this.key = key;
if (path && path.constructor != String) {
this.pathList = [];
this.path = null;
var ae = new AtomEnumerator(path);
while (ae.next()) {
var pe = new AtomEnumerator(ae.current().split("."));
var p = [];
while (pe.next()) {
p.push({ path: pe.current(), value: null });
}
this.pathList.push(p);
}
}else {
var ae = new AtomEnumerator(path.split("."));
this.path = [];
while (ae.next()) {
this.path.push({ path: ae.current(), value: null });
}
}
this.twoWays = twoWays;
this.jq = jq;
this._isUpdating = false;
};
NeuroSpeech.WebAtoms.AtomBinding.prototype = {
onControlPropertyChanged: function (sender, key) {
if (this.path == null || this.path.length == 0)
return;
var ae = new AtomEnumerator(this.path);
var obj = this.control;
var objKey = null;
while (ae.next()) {
objKey = ae.current();
objKey.value = obj;
if (!obj)
return;
if (!ae.isLast())
obj = AtomBinder.getValue(obj, objKey.path);
}
var value = null;
if (this.jq) {
value = $(this.element).val();
} else {
value = AtomBinder.getValue(this.control, this.key);
}
AtomBinder.setValue(obj, objKey.path, value);
},
onDataChanged: function (sender, key) {
if (this._isUpdating)
return;
if (arguments === undefined || arguments.length == 0)
return;
var ae;
var target = this.control;
if (this.pathList) {
var newTarget = [];
ae = new AtomEnumerator(this.pathList);
while (ae.next()) {
newTarget.push( this.evaluate(target,ae.current()));
}
ae = new AtomEnumerator(newTarget);
while (ae.next()) {
if (ae.current() == undefined)
return;
}
this.setValue(newTarget);
}else {
var path = this.path;
var newTarget = this.evaluate(target, path);
if(newTarget !== undefined)
this.setValue(newTarget);
}
},
evaluate: function (target, path) {
var newTarget = null;
var property = null;
var ae = new AtomEnumerator(path);
var remove = false;
while (target && ae.next()) {
property = ae.current();
newTarget = AtomBinder.getValue(target, property.path);
if (!property.value){
this.bindEvent(target, "WatchHandler", "onDataChanged", property.path);
}else if(property.value != target){
this.unbindEvent(property.value, "WatchHandler", "onDataChanged", property.path);
this.bindEvent(target, "WatchHandler", "onDataChanged", property.path);
}
property.value = target;
target = newTarget;
}
return newTarget;
},
onControlChanged: function () {
this.onControlPropertyChanged(null, null);
},
setup: function () {
if (this.twoWays) {
if (this.jq) {
this.bindEvent(this.element, "change", "onControlChanged");
} else {
this.bindEvent(this.control, "WatchHandler", "onControlPropertyChanged", this.key);
}
}
this.onDataChanged(this, null);
},
setValue: function (value) {
if (!this.pathList && (this.valueFunction || this.urlFunction)) {
value = [value];
}
if (this.valueFunction) {
value = this.valueFunction.apply(this,value);
}
if (this.urlFunction) {
if (value) {
value = this.urlFunction.apply(this,value);
this.control.loadProperty(this.key, value);
}
return;
}
this._isUpdating = true;
if (this.jq) {
switch (this.key) {
case "isVisible":
if (value) {
$(this.element).show();
} else {
$(this.element).hide();
}
break;
case "isEnabled":
if (value) {
$(this.element).removeAttr("disabled");
} else {
$(this.element).attr("disabled", "disabled");
}
break;
case "value":
$(this.element).val(value);
break;
case "text":
$(this.element).text(value);
break;
case "src":
AtomBinder.setValue(this.element, this.key, value);
break;
default:
AtomBinder.setValue(this.element, this.key, value);
break;
}
} else {
AtomBinder.setValue(this.control, this.key, value);
}
this._isUpdating = false;
}
};
NeuroSpeech.WebAtoms.AtomBinding.registerClass("NeuroSpeech.WebAtoms.AtomBinding", NeuroSpeech.WebAtoms.AtomComponent);
var allControls = {
};
NeuroSpeech.WebAtoms.AtomDispatcher = function () {
this._paused = false;
this.queue = [];
this.onTimeout = function () {
if (this._paused)
return;
if (this.queue.length == 0) {
var app = $("#application")[0];
if (app.style.visibility == "hidden" || $(app).css("visibility")=="hidden") {
app.style.visibility = "visible";
}
return;
}
var item = this.queue.shift();
item();
delete item;
window.setTimeout(this._onTimeout, 1);
};
this._onTimeout = Function.createDelegate(this, this.onTimeout);
};
NeuroSpeech.WebAtoms.AtomDispatcher.prototype = {
pause: function () {
this._paused = true;
},
start: function () {
this._paused = false;
window.setTimeout(this._onTimeout, 1);
},
callLater: function (fn) {
this.queue.push(fn);
if (!this._paused)
this.start();
},
setupControls: function () {
$('[atom-type=AtomApplication]').each(
function () {
var element = this;
if (this.atomControl != undefined && this.atomControl != null)
return;
var ctrl = AtomUI.createControl(element);
ctrl.initialize();
});
}
};
NeuroSpeech.WebAtoms.AtomDispatcher.registerClass("NeuroSpeech.WebAtoms.AtomDispatcher");
NeuroSpeech.WebAtoms.dispatcher = new NeuroSpeech.WebAtoms.AtomDispatcher();
NeuroSpeech.WebAtoms.UndefinedData = { type: "Undefined" };
NeuroSpeech.WebAtoms.CachedData = {
getUrl: function (url) {
if (url) {
if (AtomUI.startsWith(url, "http://") || AtomUI.startsWith(url, "https://")) {
return url;
}
if (AtomUI.startsWith(url, "/")) {
return url;
}
if (AtomUI.startsWith(url, ".")) {
url = url.substr(1);
if (AtomUI.endsWith(location.href, "/") && AtomUI.startsWith(url, "/")) {
url = url.substr(1);
}
return location.href + url;
}
return location.href + url;
} else {
return location.href;
}
},
cachedItems: {
},
loadItems: function (url, f) {
url = this.getUrl(url);
var ci = this.cachedItems[url];
if (ci) {
if (ci.result) {
f(ci.result);
} else {
ci.onLoad.push(f);
}
return;
} else {
ci = { url: url, onLoad: [f] };
this.cachedItems[url] = ci;
}
$.ajax(url, {
url: url,
method: "GET",
success: function (r) {
ci.result = r;
var ae = new AtomEnumerator(ci.onLoad);
while (ae.next()) {
ae.current()(r);
}
ci.onLoad.length = 0;
}
});
}
};
NeuroSpeech.WebAtoms.AtomControl = function (element) {
NeuroSpeech.WebAtoms.AtomControl.initializeBase(this, [element]);
element.atomControl = this;
this._element = element;
this._events = new NeuroSpeech.WebAtoms.AtomEvents();
this.dispatcher = NeuroSpeech.WebAtoms.dispatcher;
this._data = NeuroSpeech.WebAtoms.UndefinedData;
this.bindings = [];
this._isVisible = true;
this._layout = null;
};
NeuroSpeech.WebAtoms.AtomControl.prototype = {
get_scope: function () {
if (this._scope === undefined) {
var ap = this.get_atomParent(this._element.parentNode);
if (ap)
return ap.get_scope();
}
return this._scope;
},
set_scope: function (v) {
this._scope = v;
},
get_layout: function () {
return this._layout;
},
set_layout: function (l) {
this._layout = l;
},
getUrl: function (url) {
if (url) {
if (AtomUI.startsWith(url, "http://") || AtomUI.startsWith(url, "https://")) {
return url;
}
if (AtomUI.startsWith(url, "/")) {
return url;
}
if (AtomUI.startsWith(url, ".")) {
url = url.substr(1);
if (AtomUI.endsWith(location.href, "/") && AtomUI.startsWith(url, "/")) {
url = url.substr(1);
}
return location.href + url;
}
return location.href + url;
} else {
return location.href;
}
},
loadComplete: function (result, property, path) {
if (path)
result = result[path];
AtomBinder.setValue(this, property, result);
},
loadProperty: function (property, url, method, path) {
if (!url)
return;
var control = this;
var    success= function (result) {
control.loadComplete(result, property, path);
};
this.invokeAjax(url, method, null, success);
},
onAjaxError: function (jqXHR, textStatus, errorThrown) {
var res = jqXHR.responseText;
if (!res || errorThrown != "Internal Server Error")
res = errorThrown;
alert(res);
},
onAjaxSuccess: function (data) {
},
invokeAjax: function (url, method, data, success, error) {
if (!method)
method = "GET";
var ajaxUrl = this.getUrl(url);
if (!success) {
var caller = this;
success = function (d) {
caller.onAjaxSuccess(d);
};
}
if (!error) {
var caller2 = this;
error = function (jqXHR, textStatus, errorThrown) {
caller2.onAjaxError(jqXHR, textStatus, errorThrown);
};
}
if (data) {
data = { formModel: JSON.stringify(data) };
}
$.ajax(
ajaxUrl,{
type: method,
data:data,
success: success,
error: error
});
},
invokeAction: function (action) {
if (action) {
if (action.constructor == String) {
location.href = action;
}
else {
var f = action;
if (f.atomControl) {
f = f.atomControl;
if (f.refresh) {
f.refresh();
}else {
alert("no default action defined");
}
}else {
if (f._element) {
f.refresh();
}else {
f();
}
}
}
}
},
refresh: function () {
},
get_isVisible: function () {
return this._isVisible;
},
set_isVisible: function (v) {
var element = this.get_element();
this._isVisible = v;
if (!this._isVisible) {
$(element).hide();
} else {
$(element).show();
}
},
get_isEnabled: function () {
return this._isEnabled;
},
set_isEnabled: function (v) {
var element = this.get_element();
this._isEnabled = v;
if (this._isEnabled) {
$(element).attr("disabled", "disabled");
} else {
$(element).removeAttr("disabled");
}
},
get_events: function () {
return this._events;
},
get_element: function () {
return this._element;
},
get_children: function () {
return $(this._element).children();
},
getChildAt: function (index) {
return $(this._element).children()[index];
},
clearBinding: function (element, key) {
var ae = new AtomEnumerator(this.bindings);
var item;
while (ae.next()) {
item = ae.current();
if (item.element == element && item.key == key) {
this.bindings.splice(ae.currentIndex(), 1);
item.dispose();
delete item;
return;
}
}
},
addBinding: function (target, element, key, path, twoWays, jq, valueFunction, urlFunction) {
this.clearBinding(element, key);
var ab = new NeuroSpeech.WebAtoms.AtomBinding(target, element, key, path, twoWays, jq, valueFunction, urlFunction);
this.bindings.push(ab);
ab.setup();
},
get_atomParent: function (element) {
if (element == null)
return null;
if (element.atomControl != undefined && element.atomControl != null) {
return element.atomControl;
}
if (element === document || element === window)
return null;
return this.get_atomParent(element.parentNode);
},
get_data: function () {
if (this._data === NeuroSpeech.WebAtoms.UndefinedData) {
var ap = this.get_atomParent(this._element.parentNode);
if(ap)
return ap.get_data();
}
return this._data;
},
set_data: function (d) {
this._data = d;
this.updateChildBindings(this._element);
},
updateChildBindings: function (element) {
var ae = new AtomEnumerator($(element).children());
while (ae.next()) {
var child = ae.current();
if (AtomUI.isTemplate(child))
continue;
if (child.atomControl && child.atomControl._created) {
var ctrl = child.atomControl;
if (ctrl._data !== NeuroSpeech.WebAtoms.UndefinedData)
continue;
AtomBinder.refreshValue(ctrl, "data");
}
this.updateChildBindings(child);
}
},
initializeProperties: function () {
var element = this.get_element();
var obj;
var key;
var value;
var fn;
var attrib = $(element).attr("atom-properties");
if (attrib != undefined && attrib != null) {
obj = eval("(" + attrib + ")");
for (key in obj) {
value = obj[key];
this.setValue(key, value, false, element);
}
}
attrib = $(element).attr("atom-events");
if (attrib != undefined && attrib != null) {
obj = eval("(" + attrib + ")");
for (key in obj) {
value = obj[key];
fn = this["add_" + key];
fn.apply(this, [value]);
}
}
this.setProperties(element);
this.onCreationComplete();
this._created = true;
this.onLoaded();
},
createChildren: function () {
this.onCreateChildren(this._element);
},
onCreateChildren: function (element) {
var ae = new AtomEnumerator($(element).children());
var child;
while (ae.next()) {
child = ae.current();
if (AtomUI.isTemplate(child))
continue;
if (AtomUI.isControl(child)) {
AtomUI.createControl(child);
}else {
this.onCreateChildren(child);
}
}
},
onLoaded: function () {
},
onUpdateUI: function () {
if (this._layout) {
this._layout.doLayout(this._element);
}else {
this.updateChildUI($(this.get_element()).children());
}
},
updateUI: function () {
var ctrl = this;
this.dispatcher.callLater(function () {
ctrl.onUpdateUI();
AtomUI.updateCss(ctrl._element);
});
},
updateChildUI: function (childArray) {
var ae = new AtomEnumerator(childArray);
while (ae.next()) {
var child = ae.current();
if (child.atomControl) {
child.atomControl.updateUI();
continue;
}
AtomUI.updateCss(child);
this.updateChildUI($(child).children());
}
},
onCreationComplete: function () {
this.updateUI();
},
convertToPropertyName: function (key) {
var items = key.split("-");
var e = new AtomEnumerator(items);
while (e.next()) {
var text = e.current();
if (e.isFirst()) {
key = text;
} else {
key += text.substr(0, 1).toUpperCase() + text.substr(1);
}
}
return key;
},
setProperties: function (element) {
var obj;
var key;
var value;
var fn;
var at;
var attr = element.attributes;
var ae = new AtomEnumerator(attr);
while (ae.next()) {
at = ae.current();
key = at.nodeName;
value = at.nodeValue;
if (key.indexOf("atom-") != 0)
continue;
if (key == "atom-properties" || key == "atom-events")
continue;
key = key.substr(5);
key = this.convertToPropertyName(key);
this.setValue(key, value, true, element);
}
var child = new AtomEnumerator($(element).children());
while (child.next()) {
var childItem = child.current();
if (childItem.nodeName == "TEMPLATE")
continue;
at = $(childItem).attr("atom-type");
if (at != undefined && at != null)
continue;
this.setProperties(childItem);
}
},
getBindingExpression: function(txt){
var regex = /(?:window|scope|data)(?:.[a-zA-Z_][a-zA-Z_0-9]*)*/gi;
var path = [];
var vars = [];
var ms = txt.replace(regex,
function (match) {
var nv = "v" + (path.length + 1);
path.push(match);
vars.push(nv);
return nv;
}
);
var method = "(function(" + vars.join(",") + ") { return " + ms + "; })";
method = eval(method);
return { length: vars.length, method: method, path:path, original: ms };
},
setValue: function (key, value, bind, element) {
if (value && value.constructor == String) {
if (value.indexOf("@@") == 0 || value.indexOf("##") == 0 || value.indexOf("[[") == 0) {
value = value.substr(1);
} else {
if (bind) {
if (value.indexOf("{") == 0) {
value = eval("(" + value + ")");
this.bind(element, key, value.path, false, value.valueFunction, value.urlFunction);
return;
}
if (value.indexOf("@[") == 0) {
value = value.substr(0, value.length - 1);
value = value.substr(2);
this.bind(element, key, value, true);
return;
}
if (value.indexOf("@URL[") == 0) {
value = value.substr(0, value.length - 1);
value = value.substr(5);
var be = this.getBindingExpression(value);
if (be.length == 0) {
value = value.substr(0, value.length - 1);
value = value.substr(1);
this.loadProperty(key, value);
}else {
this.bind(element, key, be.path, false, null, be.method);
}
return;
}
if (value.indexOf("[") == 0) {
value = value.substr(0, value.length - 1);
value = value.substr(1);
var be = this.getBindingExpression(value);
if (be.length == 1 && be.path[0]==be.original) {
this.bind(element, key, value, false);
}
else {
this.bind(element, key, be.path, false, be.method);
}
return;
}
}
if (value.indexOf("#") == 0) {
value = $(value)[0];
if (value != undefined && value != null)
value = value.atomControl;
}
}
}
var fn = this["set_" + key];
if (fn != null) {
fn.apply(this, [value]);
return;
}
if (key == "text") {
$(element).text(value);
}
},
bind: function (element, key, value, twoWays,vf,uf) {
if (value == null) {
this.clearBinding(element, key);
return;
}
var valueExp = "(function(data){ return " + value + ";})";
var target = this;
if (value && value.constructor==String && value.indexOf("window.") == 0) {
target = window;
}
var thisElement = this.get_element();
var jq = thisElement != element;
if (!jq) {
var f = this["get_" + key];
if (f == undefined || f == null) {
jq = true;
}
}
switch (key) {
case "value":
this.addBinding(target, element, "value", value, twoWays, jq,vf,uf);
break;
case "text":
this.addBinding(target, element, "text", value, false, true,vf,uf);
break;
default:
this.addBinding(target, element, key, value, twoWays, jq,vf,uf);
break;
}
},
initialize: function () {
NeuroSpeech.WebAtoms.AtomControl.callBaseMethod(this, "initialize");
var fn = Function.createDelegate(this, this.initializeProperties);
NeuroSpeech.WebAtoms.dispatcher.callLater(fn);
this.initializeChildren(this._element);
},
dispose: function () {
var ae = this.bindings.enumerator();
while (ae.next()) {
var b = ae.current();
b.dispose();
}
this.bindings.length = 0;
NeuroSpeech.WebAtoms.AtomControl.callBaseMethod(this, "dispose");
},
initializeChildren: function (e) {
var ae = new AtomEnumerator($(e).children());
var item;
var ctrl;
while (ae.next()) {
item = ae.current();
ctrl = item.atomControl;
if (ctrl) {
ctrl.initialize();
}else {
if(!AtomUI.isTemplate(item))
this.initializeChildren(item);
}
}
}
};
NeuroSpeech.WebAtoms.AtomControl.registerClass("NeuroSpeech.WebAtoms.AtomControl", NeuroSpeech.WebAtoms.AtomComponent);
NeuroSpeech.WebAtoms.AtomItemsControl = function (element) {
NeuroSpeech.WebAtoms.AtomItemsControl.initializeBase(this, [element]);
this._items = null;
this._template = null;
this._collectionChanged = null;
this.selectedIndex = -1;
this._selectedItems = [];
this._selectedElements = [];
this._selectedIndexSet = false;
this._allowMultipleSelection = false;
this._filter = null;
this._valuePath = null;
this._onUIChanged = false;
};
NeuroSpeech.WebAtoms.AtomItemsControl.prototype = {
refresh: function () {
var ae = new AtomEnumerator(this.bindings);
var item;
while (ae.next()) {
item = ae.current();
if (item.key == "items") {
item.onDataChanged(this, null);
return;
}
}
},
get_labelPath: function () {
return this._labelPath;
},
set_labelPath: function (l) {
this._labelPath = l;
},
get_valuePath: function () {
return this._valuePath;
},
set_valuePath: function (vp) {
this._valuePath = vp;
},
get_valueSeparator: function () {
return this._valueSeparator;
},
set_valueSeparator: function (v) {
this._valueSeparator = v;
},
get_value: function () {
if (this._allowMultipleSelection) {
var items = this._selectedItems;
if (items.length == 0) {
if (this._value != undefined)
return this._value;
return null;
}
items = AtomArray.getValues(items, this._valuePath);
if (this._valueSeparator)
items = items.join(this._valueSeparator);
return items;
}
var s = this.get_selectedItem();
if (!s) {
if (this._value != undefined)
return this._value;
return null;
}
if (this._valuePath) {
s = s[this._valuePath];
}
return s;
},
set_value: function (v) {
this._value = v;
if (v==undefined || v==null) {
AtomBinder.clear(this._selectedItems);
return;
}
var dataItems = this.get_dataItems();
if (this._allowMultipleSelection && this._valueSeparator) {
v = AtomArray.split(v,this._valueSeparator);
} else {
v = [v];
}
var items = AtomArray.intersect(dataItems, this._valuePath, v);
if (this._allowMultipleSelection) {
AtomBinder.addItems(this._selectedItems, items);
} else {
AtomBinder.clear(this._selectedItems);
AtomBinder.addItem(this._selectedItems, items[0]);
}
},
get_filter: function () {
return this._filter;
},
set_filter: function (f) {
this._filter = f;
this.applyFilter();
},
applyFilter: function () {
var f = this._filter;
if (f == undefined || f == null) {
return;
}
var ae = new AtomEnumerator(this.get_element().children);
while (ae.next()) {
var child = ae.current();
var dataItem = child;
if (this.hasItems()) {
dataItem = child.atomControl.get_data();
}
if (f(dataItem)) {
child.style.display = "block";
} else {
child.style.display = "none";
}
}
},
isSelected: function (item) {
var se = new AtomEnumerator(this._selectedItems);
var sitem = null;
while (se.next()) {
sitem = se.current();
if (sitem == item) {
return true;
}
}
return false;
},
get_dataItems: function () {
if (this.hasItems())
return this.get_items();
return $(this._element).children();
},
getIndexOfDataItem: function (item) {
if (item == null)
return -1;
var array = this.get_dataItems();
var ae = new AtomEnumerator(array);
while (ae.next()) {
if (ae.current() == item)
return ae.currentIndex();
}
return -1;
},
getDataItemAtIndex: function (index) {
if (index == -1)
return null;
return this.get_dataItems()[index];
},
get_selectedChild: function () {
var item = this.get_selectedItem();
if (!this.hasItems())
return item;
var ce = new AtomEnumerator($(this._element).children());
while (ce.next()) {
var child = ce.current();
if (child.atomControl.get_data() == item)
return child;
}
return null;
},
get_allowMultipleSelection: function () {
return this._allowMultipleSelection;
},
set_allowMultipleSelection: function (b) {
this._allowMultipleSelection = b;
},
get_allowSelectFirst: function () {
return this._allowSelectFirst;
},
set_allowSelectFirst: function (b) {
this._allowSelectFirst = b;
},
get_selectedItem: function () {
if (this._selectedItems.length > 0)
return this._selectedItems[0];
return null;
},
set_selectedItem: function (value) {
AtomBinder.clear(this._selectedItems);
AtomBinder.addItem(this._selectedItems, value);
},
get_selectedItems: function () {
return this._selectedItems;
},
set_selectedItems: function () {
throw new Error("Not yet implemented");
},
add_selectionChanged: function (handler) {
this.get_events().addHandler("selectionChanged", handler);
},
remove_selectionChanged: function (handler) {
this.get_events().removeHandler("selectionChanged", handler);
},
get_selectedIndex: function () {
var item = this.get_selectedItem();
return this.getIndexOfDataItem(item);
},
set_selectedIndex: function (value) {
AtomBinder.setValue(this, "selectedItem", this.getDataItemAtIndex(value));
},
onCreationComplete: function () {
var element = this.get_element();
var dataItems = this.get_dataItems();
if (this._allowSelectFirst && dataItems.length > 0) {
AtomBinder.setValue(this, "selectedItem", dataItems[0]);
}
this.updateUI();
},
updateChildSelections: function (type, index, item) {
},
onSelectedItemsChanged: function (type, index, item) {
if (!this._onUIChanged) {
this.updateChildSelections(type, index, item);
}
AtomBinder.refreshValue(this, "value");
AtomBinder.refreshValue(this, "selectedItem");
AtomBinder.refreshValue(this, "selectedItems");
AtomBinder.refreshValue(this, "selectedIndex");
this.get_events().raise("selectionChanged", [this, Sys.EventArgs.Empty]);
this.updateUI();
},
hasItems: function () {
return this._items != undefined && this._items != null;
},
get_items: function () {
return this._items;
},
set_items: function (v) {
if (this._items) {
this.unbindEvent(this._items, "CollectionChanged", "onCollectionChangedInternal");
}
this._items = v;
if (v != null && this._created) {
this.bindEvent(this._items, "CollectionChanged", "onCollectionChangedInternal");
this.onCollectionChangedInternal("refresh", -1, null);
}
},
onCollectionChangedInternal: function (mode, index, item) {
var value = this.get_value();
if(this.hasItems())
this.onCollectionChanged(mode, index, item);
if (value != null) {
this.set_value(value);
}else {
this.selectDefault();
}
},
selectDefault: function () {
if (this._allowSelectFirst) {
if (this.get_dataItems().length > 0)
this.set_selectedIndex(0);
}
},
onCollectionChanged: function (mode, index, item) {
var element = this.get_element();
var dataItems = this.get_dataItems();
var children = $(element).children();
if (mode == "refresh" && dataItems.length == children.length) {
var ce = new AtomEnumerator(children);
while (ce.next()) {
var childItem = ce.current();
childItem = childItem.atomControl;
AtomBinder.setValue(childItem, "data", dataItems[ce.currentIndex()]);
}
this.applyFilter();
this.updateUI();
return;
}
AtomUI.removeAllChildren(element);
NeuroSpeech.WebAtoms.dispatcher.pause();
var ae = new AtomEnumerator(this._items);
while (ae.next()) {
var data = ae.current();
var elementChild = this.createChildElement(element, data, ae);
}
var caller = this;
NeuroSpeech.WebAtoms.dispatcher.callLater(function () {
caller.applyFilter();
if (caller._element.parentNode && caller._element.parentNode.atomControl && caller._element.parentNode.atomControl instanceof NeuroSpeech.WebAtoms.AtomFormField) {
caller._element.parentNode.atomControl.updateUI();
} else {
caller.updateUI();
}
});
NeuroSpeech.WebAtoms.dispatcher.start();
},
createChildElement: function (parentElement, data, ae) {
var child = document.createElement("div");
child.innerHTML = this._template;
var elementChild = $(child.children).filter("*")[0];
child.removeChild(elementChild);
parentElement.appendChild(elementChild);
var childType = NeuroSpeech.WebAtoms.AtomControl;
var scope = { parentScope: this.get_scope() };
if (ae) {
scope.item_isFirst = ae.isFirst();
scope.item_isLast = ae.isLast();
scope.item_index = ae.currentIndex();
}
var ac = AtomUI.createControl(elementChild, NeuroSpeech.WebAtoms.AtomControl, data, scope);
return elementChild;
},
onCreationComplete: function () {
this.onCollectionChangedInternal("refresh", -1, null);
},
initialize: function () {
var element = this.get_element();
this.bindEvent(this._selectedItems, "CollectionChanged", "onSelectedItemsChanged");
var caller = this;
var ae = new AtomEnumerator($(element).children());
if(ae.next() && ae.isLast() && ae.isFirst()) {
var t = ae.current();
if (AtomUI.isTemplate(t)) {
this._template = t.innerHTML;
if (this._template == null || this._template == "")
throw new Error("How come we have no template?");
element.removeChild(t);
}
}
NeuroSpeech.WebAtoms.AtomItemsControl.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomItemsControl.registerClass("NeuroSpeech.WebAtoms.AtomItemsControl", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomListBox = function (element) {
NeuroSpeech.WebAtoms.AtomListBox.initializeBase(this, [element]);
}
NeuroSpeech.WebAtoms.AtomListBox.prototype = {
onClick: function (event) {
var target = event.target;
var element = this.get_element();
var childElement = target;
while (childElement.parentNode != null && childElement.parentNode != element)
childElement = childElement.parentNode;
if (childElement == document)
return;
var dataItem = childElement;
if (this.hasItems()) {
dataItem = childElement.atomControl.get_data();
}
var oldSelectedItem = this.get_selectedItem();
if (oldSelectedItem == dataItem)
return;
this._onUIChanged = true;
while (!this._allowMultipleSelection && this._selectedItems.length > 0) {
AtomBinder.removeItem(this._selectedItems, this._selectedItems[0]);
}
if (this._allowMultipleSelection && AtomUI.contains(this._selectedItems, dataItem)) {
AtomBinder.removeItem(this._selectedItems, dataItem);
} else {
AtomBinder.addItem(this._selectedItems, dataItem);
}
this._onUIChanged = false;
},
onUpdateUI: function () {
var element = this.get_element();
var ae = new AtomEnumerator($(element).children());
while (ae.next()) {
var i = ae.currentIndex();
var item = ae.current();
var dataItem = item;
if (this.hasItems()) {
dataItem = this.getDataItemAtIndex(i);
}
if (this.isSelected(dataItem)) {
$(item).addClass("atom-selected");
} else {
$(item).removeClass("atom-selected");
}
AtomUI.setUI(item, "AtomListItem");
}
AtomUI.setUI(element, "AtomListBox", "atom-list-box");
},
dispose: function () {
NeuroSpeech.WebAtoms.AtomListBox.callBaseMethod(this, "dispose");
},
initialize: function () {
var element = this.get_element();
this.bindEvent(element, "click", "onClick");
NeuroSpeech.WebAtoms.AtomListBox.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomListBox.registerClass("NeuroSpeech.WebAtoms.AtomListBox", NeuroSpeech.WebAtoms.AtomItemsControl);
NeuroSpeech.WebAtoms.AtomButton = function (element) {
NeuroSpeech.WebAtoms.AtomButton.initializeBase(this, [element]);
};
NeuroSpeech.WebAtoms.AtomButton.prototype = {
add_click: function (handler) {
this.get_events().addHandler("click", handler);
},
remove_click: function (handler) {
this.get_events().removeHandler("click", handler);
},
onUpdateUI: function () {
var element = this.get_element();
var uiType = $(element).attr("atom-style");
if (uiType == null || uiType == undefined)
AtomUI.setUI(element, "AtomButton", "atom-button");
},
onClickHandler: function () {
this.get_events().raise("click", [this, Sys.EventArgs.Empty]);
},
initialize: function () {
var element = this.get_element();
this.updateUI();
this.bindEvent(element, "click", "onClickHandler");
NeuroSpeech.WebAtoms.AtomButton.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomButton.registerClass("NeuroSpeech.WebAtoms.AtomButton", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomCheckBoxList = function (element) {
NeuroSpeech.WebAtoms.AtomCheckBoxList.initializeBase(this, [element]);
this._allowMultipleSelection = true;
this._valueSeparator = ",";
this._dataElements = [];
};
NeuroSpeech.WebAtoms.AtomCheckBoxList.prototype = {
updateChildSelections: function () {
var dataItems = this.get_dataItems();
var ae = new AtomEnumerator(dataItems);
var children = this._dataElements;
while (ae.next()) {
var dataItem = ae.current();
var item = children[ae.currentIndex()];
if (this.isSelected(dataItem)) {
$(item).attr("checked", "true");
} else {
$(item).removeAttr("checked");
}
}
},
onDataChange: function (event) {
this._onUIChanged = true;
var item = event.target;
var dataItem = item;
if (this.hasItems())
dataItem = $(item).data("atom-data-item");
var checked = $(item).attr("checked");
if (this.isSelected(dataItem)) {
if (!checked) {
AtomBinder.removeItem(this._selectedItems, dataItem);
}
}
else {
if (checked) {
AtomBinder.addItem(this._selectedItems, dataItem);
}
}
this._onUIChanged = false;
},
createChildElement: function (parentElement, data) {
var span = document.createElement("SPAN");
var cb = document.createElement("INPUT");
$(cb).attr("type", "checkbox");
var lp = this.get_labelPath();
var vp = this.get_valuePath();
l = data;
v = data;
if (lp)
l = data[lp];
if (vp)
v = data[vp];
$(cb).data("atom-data-item", data);
$(cb).data("atom-data", v);
$(cb).val(l);
span.appendChild(cb);
var txt = document.createTextNode(l);
span.appendChild(txt);
parentElement.appendChild(span);
this.bindEvent(cb, "change", "onDataChange");
this._dataElements.push(cb);
return cb;
}
};
NeuroSpeech.WebAtoms.AtomCheckBoxList.registerClass("NeuroSpeech.WebAtoms.AtomCheckBoxList", NeuroSpeech.WebAtoms.AtomItemsControl);
NeuroSpeech.WebAtoms.AtomComboBox = function (element) {
NeuroSpeech.WebAtoms.AtomComboBox.initializeBase(this, [element]);
};
NeuroSpeech.WebAtoms.AtomComboBox.prototype = {
onSelectionChanged: function () {
this._onUIChanged = true;
var element = this.get_element();
this.set_selectedIndex(element.selectedIndex);
this._onUIChanged = false;
},
updateChildSelections: function () {
var element = this._element;
element.selectedIndex = this.get_selectedIndex();
},
onCollectionChanged: function (mode, index, item) {
var element = this.get_element();
var dataItems = this.get_dataItems();
element.options.length = dataItems.length;
var ae = new AtomEnumerator(dataItems);
var lp = this._labelPath;
var vp = this._valuePath;
var label = null;
var value = null;
var selectedValue = this.get_value();
while (ae.next()) {
var data = ae.current();
label = data;
value = data;
if (lp)
label = label[lp];
if (vp)
value = value[vp];
element.options[ae.currentIndex()] = new Option(label, value, false, value == selectedValue);
}
this.setDefaultValue();
},
setDefaultValue: function () {
if (this._value)
return;
if (this.get_selectedItem())
return;
this.onSelectionChanged();
},
onCreationComplete: function () {
NeuroSpeech.WebAtoms.AtomComboBox.callBaseMethod(this, "onCreationComplete");
this.setDefaultValue();
},
initialize: function () {
var element = this.get_element();
this.bindEvent(element, "change", "onSelectionChanged");
NeuroSpeech.WebAtoms.AtomComboBox.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomComboBox.registerClass("NeuroSpeech.WebAtoms.AtomComboBox", NeuroSpeech.WebAtoms.AtomItemsControl);
NeuroSpeech.WebAtoms.AtomDockPanel = function (element) {
NeuroSpeech.WebAtoms.AtomDockPanel.initializeBase(this, [element]);
this._resizeOnChildResized = false;
};
NeuroSpeech.WebAtoms.AtomDockPanel.prototype = {
resizeChild: function (item) {
if (item.atomControl) {
item.atomControl.updateUI();
}
else {
AtomUI.updateCss(item);
}
},
calculateSize: function () {
var element = this.get_element();
var size;
if (AtomBrowser.isIE && AtomBrowser.majorVersion < 10) {
size = { width: element.offsetWidth, height: element.offsetHeight };
}else {
var s = AtomUI.getComputedStyle(element);
size = { width: AtomUI.parseStyleNumber(s.width), height: AtomUI.parseStyleNumber(s.height) };
}
if (!this._resizeOnChildResized)
return size;
var desiredHeight = 0;
var ae = new AtomEnumerator($(element).children());
while (ae.next()) {
var child = ae.current();
var dock = $(child).attr("atom-dock");
switch (dock) {
case "Bottom":
case "Fill":
case "Top":
var h;
if (AtomBrowser.isIE && AtomBrowser.majorVersion<10) {
h = child.offsetHeight;
} else {
h = $(child).outerHeight(true);
}
desiredHeight += h;
break;
}
}
if (size.height < desiredHeight) {
size.height = desiredHeight;
$(element).height(size.height);
}
return size;
},
onUpdateUI: function () {
var element = this.get_element();
var i;
var left = 0;
var top = 0;
var s = this.calculateSize();
var height = s.height;
var width = s.width;
var children = [];
var en;
var item;
var itemRect;
var clientRect;
var itemHeight;
var itemWidth;
en = new AtomEnumerator($(element).children("[atom-dock='Top']"));
while (en.next()) {
item = en.current();
$(item).addClass("atom-position-absolute");
itemHeight = $(item).outerHeight(true);
AtomUI.setItemRect(item, { top: top, left: left, width: width });
top += itemHeight;
height -= itemHeight;
this.resizeChild(item);
}
en = new AtomEnumerator($(element).children("[atom-dock='Bottom']"));
while (en.next()) {
item = en.current();
$(item).addClass("atom-position-absolute");
itemHeight = $(item).outerHeight(true);
height -= itemHeight;
AtomUI.setItemRect(item, { top: (top + height), width: width });
this.resizeChild(item);
}
en = new AtomEnumerator($(element).children("[atom-dock='Left']"));
while (en.next()) {
item = en.current();
$(item).addClass("atom-position-absolute");
var itemWidth = $(item).outerWidth(true);
width -= itemWidth;
AtomUI.setItemRect(item, { top: top, left: left, height: height });
left += itemWidth;
this.resizeChild(item);
}
en = new AtomEnumerator($(element).children("[atom-dock='Right']"));
while (en.next()) {
item = en.current();
$(item).addClass("atom-position-absolute");
if (item.style.display != "none")
width -= $(item).outerWidth(true);
AtomUI.setItemRect(item, { left: (width + left), top: top, height: height });
this.resizeChild(item);
}
en = new AtomEnumerator($(element).children("[atom-dock='Fill']"));
while (en.next()) {
item = en.current();
$(item).addClass("atom-position-absolute");
itemWidth = $(item).css("max-width");
if (itemWidth) {
itemWidth = AtomUI.parseStyleNumber(itemWidth);
if (itemWidth > 0) {
width = itemWidth;
}
}
AtomUI.setItemRect(item, { left: left, top: top, width: width, height: height });
this.resizeChild(item);
}
},
initialize: function () {
var element = this.get_element();
element.style.overflow = "hidden";
NeuroSpeech.WebAtoms.AtomDockPanel.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomDockPanel.registerClass("NeuroSpeech.WebAtoms.AtomDockPanel", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomPostButton = function (element) {
NeuroSpeech.WebAtoms.AtomPostButton.initializeBase(this, [element]);
};
NeuroSpeech.WebAtoms.AtomPostButton.prototype = {
get_postUrl: function () {
return this._postUrl;
},
set_postUrl: function (v) {
this._postUrl = v;
},
get_next: function () {
return this._next;
},
set_next: function (v) {
this._next = v;
},
get_confirm: function () {
return this._confirm;
},
set_confirm: function (v) {
this._confirm = v;
},
get_confirmMessage: function () {
return this._confirmMessage;
},
set_confirmMessage: function (v) {
this._confirmMessage = v;
},
onClick: function () {
if (this._confirm) {
if (!confirm(this._confirmMessage))
return;
}
var data = this.get_data();
if(data===null || data===undefined)
return;
data = AtomBinder.getClone(data);
var caller = this;
var invokeNext = function () {
caller.invokeAction(caller._next);
};
this.invokeAjax(this._postUrl, "POST", data, invokeNext);
},
initialize: function () {
NeuroSpeech.WebAtoms.AtomPostButton.callBaseMethod(this, "initialize");
this.bindEvent(this._element, "click", "onClick");
}
};
NeuroSpeech.WebAtoms.AtomPostButton.registerClass("NeuroSpeech.WebAtoms.AtomPostButton", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomRichControl = function (element) {
NeuroSpeech.WebAtoms.AtomRichControl.initializeBase(this, [element]);
this._flashPlayerFile = "";
this._useFlash = false;
};
NeuroSpeech.WebAtoms.AtomRichControl.prototype = {
get_player: function () {
var appName = this._fpID;
if (navigator.appName.indexOf("Microsoft") != -1) {
return window[appName];
} else {
return document[appName];
}
},
isFlashSupported: function () {
return true;
},
createPlayer: function (url, p) {
var element = this.get_element();
var childDiv = document.createElement("div");
childDiv.id = this._divID;
$(element).append(childDiv);
this._fpID = this._divID + "_Flash";
createFlashPlayer(element.id, this._divID, this._fpID,url,p);
this._isFlash = true;
},
initialize: function () {
NeuroSpeech.WebAtoms.AtomRichControl.callBaseMethod(this, "initialize");
var element = this.get_element();
if (element.id == undefined || element.id == null || element.id == "") {
element.id = "__uniqueID" + AtomUI.getNewIndex();
allControls[element.id] = this;
}
this._divID = element.id + "_Player";
}
};
NeuroSpeech.WebAtoms.AtomRichControl.registerClass("NeuroSpeech.WebAtoms.AtomRichControl", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomToggleButtonBar = function (element) {
NeuroSpeech.WebAtoms.AtomToggleButtonBar.initializeBase(this, [element]);
this._allowSelectFirst = true;
this._allowMultipleSelection = false;
};
NeuroSpeech.WebAtoms.AtomToggleButtonBar.prototype = {
onUpdateUI: function () {
var element = this.get_element();
var ae = new AtomEnumerator($(element).children());
while (ae.next()) {
var i = ae.currentIndex();
var item = ae.current();
var dataItem = item;
if (this.hasItems()) {
dataItem = this.getDataItemAtIndex(i);
}
if (this.isSelected(dataItem)) {
$(item).addClass("atom-selected");
} else {
$(item).removeClass("atom-selected");
}
if (ae.isFirst() && ae.isLast()) {
AtomUI.setUI(item, "AtomButton");
} else {
if (ae.isFirst()) {
AtomUI.setUI(item, "AtomFirstButton");
} else if (ae.isLast()) {
AtomUI.setUI(item, "AtomLastButton");
} else {
AtomUI.setUI(item, "AtomMiddleButton");
}
}
}
$(element).addClass("atom-toggle-button-bar");
}
};
NeuroSpeech.WebAtoms.AtomToggleButtonBar.registerClass("NeuroSpeech.WebAtoms.AtomToggleButtonBar", NeuroSpeech.WebAtoms.AtomListBox);
NeuroSpeech.WebAtoms.AtomFormLayout = function (element) {
NeuroSpeech.WebAtoms.AtomFormLayout.initializeBase(this, [element]);
this._useTable = true;
this._fields = [];
this._errorItems = [];
};
NeuroSpeech.WebAtoms.AtomFormLayout.prototype = {
initialize: function () {
NeuroSpeech.WebAtoms.AtomFormLayout.callBaseMethod(this, "initialize");
var ae = new AtomEnumerator(this._fields);
var field = null;
while (ae.next()) {
field = ae.current();
if ((/input|select/i).test(field.nodeName)) {
this.bindEvent(field,"blur", "validateField");
}
}
},
isValid: function () {
var element = this.get_element();
var ae = new AtomEnumerator($(element).children());
var formValid = true;
while (ae.next()) {
var field = ae.current();
if (field.atomControl && field.atomControl instanceof NeuroSpeech.WebAtoms.AtomFormLayout) {
if (!field.atomControl.isValid())
formValid = false;
}else {
if (!this.validate(field))
formValid = false;
}
}
return formValid;
},
validateField: function (e) {
var target = e.target;
this.validate(target);
},
validate: function (e,ef) {
if (!ef)
ef = $(e).data("field-error");
var ctrl = e.atomControl;
var val = null;
if (!ctrl) {
if ((/input|select/i).test(e.nodeName)) {
val = $(e).val();
}else {
var ae = new AtomEnumerator($(e).children());
var isValid = true;
while (ae.next()) {
if (!this.validate(ae.current(),ef)) {
isValid = false;
}
}
return isValid;
}
}else {
val = AtomBinder.getValue(ctrl, "value");
}
var req = $(e).attr("atom-required");
if (req && !val) {
$(ef).text("Required");
$(e).addClass("atom-data-error");
return false;
}
var re = $(e).attr("atom-regex");
if (!re) {
var dt = $(e).attr("atom-data-type");
if (dt) {
switch (dt) {
case "email":
re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
break;
}
}
} else {
re = eval("(" + re + ")");
}
if (re) {
if (!re.test(val)) {
$(ef).text("Invalid");
$(e).addClass("atom-data-error");
return false;
}
}
$(ef).text("");
$(e).removeClass("atom-data-error");
return true;
},
prepareTable: function () {
var element = this._element;
$(element).addClass("atom-form");
var ae = new AtomEnumerator($(element).children());
var table = document.createElement("TABLE");
var tbody = document.createElement("TBODY");
AtomUI.removeAllChildren(element);
table.appendChild(tbody);
var child;
var tr;
var td;
var text;
while (ae.next()) {
child = ae.current();
this._fields.push(child);
this.addRow(tbody, ["", null, $(child).attr("atom-title"), "",""]);
var required = $(child).attr("atom-required");
var req = null;
if (required) {
req = document.createElement("SPAN");
req.style.color = "red";
$(req).text("*");
}
var fieldError = document.createElement("SPAN");
$(fieldError).addClass("atom-error-span");
$(child).data("field-error", fieldError);
this.addRow(tbody, [$(child).attr("atom-label"), req, child, "", fieldError]);
this.addRow(tbody, ["",null, $(child).attr("atom-description"), "",""]);
}
element.appendChild(table);
},
addRow: function (tbody, cells) {
var tr = document.createElement("TR");
var ae = new AtomEnumerator(cells);
var item;
var cell;
var text;
while (ae.next()) {
item = ae.current();
cell = document.createElement("TD");
if (ae.isFirst()) {
$(cell).attr("nowrap", "nowrap");
$(cell).css("text-align", "right");
}
if (item) {
if (item && AtomUI.isNode(item)) {
cell.appendChild(item);
}else {
text = document.createElement("SPAN");
$(text).attr("atom-text", item);
cell.appendChild(text);
}
}
tr.appendChild(cell);
}
tbody.appendChild(tr);
return tr;
},
createChildren: function () {
if (this._useTable) {
this.prepareTable();
}else {
var element = this.get_element();
var ae = new AtomEnumerator($(element).children());
var child;
var replacements = [];
while (ae.next()) {
child = ae.current();
var at = $(child).attr("atom-type");
if (at != undefined && at == "AtomFormField") {
continue;
}
var fieldElement = document.createElement("DIV");
var field = new NeuroSpeech.WebAtoms.AtomFormField(fieldElement);
replacements.push({ editor: child, field: fieldElement });
}
ae = new AtomEnumerator(replacements);
while (ae.next()) {
var item = ae.current();
$(item.editor).replaceWith(item.field);
}
ae = new AtomEnumerator(replacements);
while (ae.next()) {
var item = ae.current();
item.field.atomControl.setChild(item.editor);
item.field.atomControl.initialize();
}
}
NeuroSpeech.WebAtoms.AtomFormLayout.callBaseMethod(this, "createChildren");
}
};
NeuroSpeech.WebAtoms.AtomFormLayout.registerClass("NeuroSpeech.WebAtoms.AtomFormLayout", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomLayout = function () {
};
NeuroSpeech.WebAtoms.AtomLayout.prototype = {
doLayout: function (element) {
}
};
NeuroSpeech.WebAtoms.AtomLayout.registerClass("NeuroSpeech.WebAtoms.AtomLayout");
function __flashPlayerReady(id) {
if (allControls.hasOwnProperty(id)) {
var ctrl = allControls[id];
if (ctrl.set_playerReady) {
ctrl.set_playerReady(true);
}
}
}
NeuroSpeech.WebAtoms.AtomPlayer = function (element) {
NeuroSpeech.WebAtoms.AtomPlayer.initializeBase(this, [element]);
this._source = null;
this._onSourceIndexChanged = null;
this._url;
};
NeuroSpeech.WebAtoms.AtomPlayer.prototype = {
get_url: function () {
return this._url;
},
set_url: function (url) {
this._url = url;
if(url!=undefined && url!=null)
this.play(url);
},
onSourceIndexChanged: function (sender, args) {
var item = this._source.get_selectedItem();
if (item == null)
return;
var data = $(item).attr("atom-data");
this.play(data);
},
get_source: function () {
return this._source;
},
set_source: function (src) {
if (this._source) {
this._source.remove_selectionChanged(this._onSourceIndexChanged);
}
this._source = src;
if (this._source) {
this._source.add_selectionChanged(this._onSourceIndexChanged);
this.onSourceIndexChanged(this._source, null);
}
},
play: function (url) {
},
stop: function () {
},
initialize: function () {
this._onSourceIndexChanged = Function.createDelegate(this, this.onSourceIndexChanged);
NeuroSpeech.WebAtoms.AtomPlayer.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomPlayer.registerClass("NeuroSpeech.WebAtoms.AtomPlayer", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomCheckBox = function (element) {
NeuroSpeech.WebAtoms.AtomCheckBox.initializeBase(this, [element]);
};
NeuroSpeech.WebAtoms.AtomCheckBox.prototype = {
get_isChecked: function () {
var element = this._element;
var attr = $(element).attr("checked");
if (attr)
return true;
return false;
},
set_isChecked: function (v) {
var element = this._element;
if (v) {
$(element).attr("checked", "checked");
} else {
$(element).removeAttr("checked");
}
},
onChange: function () {
AtomBinder.refreshValue(this, "isChecked");
},
initialize: function () {
this.bindEvent(this._element, "change", "onChange");
NeuroSpeech.WebAtoms.AtomCheckBox.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomCheckBox.registerClass("NeuroSpeech.WebAtoms.AtomCheckBox", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomDataGrid = function () {
};
NeuroSpeech.WebAtoms.AtomDataGrid.prototype = {
};
NeuroSpeech.WebAtoms.AtomDataGrid.registerClass("NeuroSpeech.WebAtoms.AtomDataGrid", NeuroSpeech.WebAtoms.AtomItemsControl);
NeuroSpeech.WebAtoms.AtomDataPager = function (element) {
NeuroSpeech.WebAtoms.AtomDataPager.initializeBase(this, [element]);
this._itemsPath = "items";
this._totalPath = "total";
this._pageSize = 25;
};
NeuroSpeech.WebAtoms.AtomDataPager.prototype = {
preparePages: function (l,t) {
var count = Math.ceil(t / this._pageSize);
var ps = this._pageSize;
var pages = [];
var i;
for (i = 0; i < count; i++) {
pages.push({
index: i + 1,
start: i * ps,
stop: (i + 1) * ps,
value: i * ps,
label: (i*ps+1) + '-' + ((i+1)*ps-1)
});
}
AtomBinder.setValue(this, "pages", pages);
},
set_items: function (v) {
this._items = v;
if (v.length === undefined) {
AtomBinder.setValue(this, "total", v[this._totalPath]);
var val = v[this._itemsPath];
AtomBinder.setValue(this, "value", val);
this.preparePages(v.length, this._total);
}else {
AtomBinder.setValue(this, "value", v);
}
},
get_items: function () {
return this._items;
},
get_pageSize: function () {
return this._pageSize;
},
set_pageSize: function (v) {
this._pageSize = v;
},
get_pages: function () {
return this._pages;
},
set_pages: function (v) {
this._pages = v;
},
get_itemsPath: function () {
return this._itemsPath;
},
set_itemsPath: function (v) {
this._itemsPath = v;
},
get_total: function () {
return this._total;
},
set_total: function (v) {
this._total = v;
},
get_totalPath: function () {
return this._totalPath;
},
set_totalPath: function (v) {
this._totalPath = v;
}
};
NeuroSpeech.WebAtoms.AtomDataPager.registerClass("NeuroSpeech.WebAtoms.AtomDataPager", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomDateControl = function (element) {
NeuroSpeech.WebAtoms.AtomDateControl.initializeBase(this, [element]);
this._startYear = -1;
this._endYear = +10;
this._value = null;
};
NeuroSpeech.WebAtoms.AtomDateControl.prototype = {
resetYears: function () {
var years = this._year;
var dt = new Date();
var start = dt.getFullYear();
start += this._startYear;
var end = dt.getFullYear() + this._endYear;
var val = this._value;
if (!val)
val = dt;
years.options.length = 0;
var j = 1;
years.options[0] = new Option("SELECT", "", false, false);
for (var i = start; i <= end; i++) {
years.options[j] = new Option(i, i, false, false);
j++;
}
},
get_value: function () {
return this._value;
},
set_value: function (v) {
if (v && v.constructor == String) {
v = new Date(parseInt(v.substr(6)));
}
this._value = v;
this.setDate();
},
setDate: function () {
if (!this._value)
return;
var dt = this._value;
var m = dt.getMonth() + 1;
var d = dt.getDate();
var y = dt.getFullYear();
this.setComboValue(this._month, m);
this.setComboValue(this._year, y);
this.setComboValue(this._date, d);
},
setComboValue: function (cb, v) {
var ae = new AtomEnumerator(cb.options);
while (ae.next()) {
if (ae.current().value == v) {
cb.selectedIndex = ae.currentIndex();
break;
}
}
},
get_startYear: function () {
return this._startYar;
},
set_startYear: function (v) {
this._startYear = v;
this.resetYears();
},
get_endYear: function () {
return this._endYear;
},
set_endYear: function (v) {
this._endYear = v;
this.resetYears();
},
onDataChange: function () {
var year = $(this._year).val();
var month = $(this._month).val();
var date = $(this._date).val();
try {
var dt = new Date(year, month - 1, date);
this._value = dt;
} catch (error) {
alert(error);
}
AtomBinder.refreshValue(this, "value");
},
setMonths: function (r) {
var options = this._month.options;
options.length = 0;
var ae = new AtomEnumerator(r);
options[0] = new Option("SELECT", "", false, false);
while (ae.next()) {
var item = ae.current();
options[ae.currentIndex() + 1] = new Option(item.ConfigName, item.ConfigValue, false, false);
}
this.setDate();
AtomBinder.refreshValue(this, "value");
},
initialize: function () {
var element = this._element;
this._date = document.createElement("SELECT");
this._month = document.createElement("SELECT");
this._year = document.createElement("SELECT");
element.style.height = "25px";
element.appendChild(this._date);
element.appendChild(this._month);
element.appendChild(this._year);
var options = this._date.options;
var i;
options[0] = new Option("SELECT", "", false, false);
for (i = 1; i < 32; i++) {
options[i] = new Option(i, i, false, false);
}
this.resetYears();
this.bindEvent(this._date, "change", "onDataChange");
this.bindEvent(this._month, "change", "onDataChange");
this.bindEvent(this._year, "change", "onDataChange");
var dt = this;
NeuroSpeech.WebAtoms.CachedData.loadItems("/Config/Months", function (r) {
dt.setMonths(r);
});
NeuroSpeech.WebAtoms.AtomDateControl.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomDateControl.registerClass("NeuroSpeech.WebAtoms.AtomDateControl", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomDeleteButton = function (element) {
NeuroSpeech.WebAtoms.AtomDeleteButton.initializeBase(this, [element]);
this._confirm = true;
this._confirmMessage = "Are you sure you want to delete this item?";
};
NeuroSpeech.WebAtoms.AtomDeleteButton.registerClass("NeuroSpeech.WebAtoms.AtomDeleteButton", NeuroSpeech.WebAtoms.AtomPostButton);
NeuroSpeech.WebAtoms.AtomFileUploader = function (element) {
NeuroSpeech.WebAtoms.AtomFileUploader.initializeBase(this, [element]);
this._url = null;
this._filters = null;
this._value = null;
this._uploadOnUrlSet = false;
};
NeuroSpeech.WebAtoms.AtomFileUploader.prototype = {
get_nextUploader: function () {
return this._nextUploader;
},
set_nextUploader: function (v) {
this._nextUploader = v;
},
get_value: function () {
return this._value;
},
set_value: function (v) {
this._value = v;
},
get_uploadOnUrlSet: function () {
return this._uploadOnUrlSet;
},
set_uploadOnUrlSet: function (v) {
this._uploadOnUrlSet = v;
},
get_url: function () {
return this._url;
},
set_url: function (v) {
this._url = v;
if (!v)
return;
if (this._playerReady) {
var fp = this.get_player();
fp.setProperty("url", JSON.stringify(v));
if (this._uploadOnUrlSet) {
fp.invoke("upload");
}
}
},
get_filters: function () {
return this._filters;
},
set_filters: function (v) {
this._filters = v;
},
set_playerReady: function (v) {
if (v) {
this._playerReady = true;
var fp = this.get_player();
fp.setProperty("filters", JSON.stringify(this._filters));
fp.setProperty("url", JSON.stringify(this._url));
if (this._uploadOnUrlSet && this._url) {
fp.invoke("upload", JSON.stringify(this._url));
}
}
},
isFlashSupported: function () {
return AtomBrowser.supportsFlash && !AtomBrowser.supportsUpload;
},
onFileSelected: function () {
},
uploadFile: function () {
if (this._isFlash) {
var fp = this.get_player();
fp.setProperty("url", JSON.stringify(this._url));
fp.invoke("upload");
}else {
var input = this._input;
input.style.display = "none";
if (!this._progress) {
this._progress = document.createElement("DIV");
this._progress.style.backgroundColor = "Green";
this._element.appendChild(this._progress);
}
var xhr = new XMLHttpRequest();
this.bindEvent(xhr, "progress", "onProgress");
this.bindEvent(xhr, "load", "onComplete");
this.bindEvent(xhr, "error", "onError");
this.bindEvent(xhr, "abort", "onError");
var fd = new FormData();
fd.append("fileToUpload", this._input.files[0]);
xhr.open("POST", this._url);
xhr.send(fd);
}
},
onError: function () {
},
onProgress: function (evt) {
if (evt.lengthComputable) {
var percentComplete = Math.round(evt.loaded * 100 / evt.total);
var width = $(this._element).width();
width = Math.round(percentComplete * width / 100);
$(this._progress).width(width);
}
},
onComplete: function (evt) {
var result = null;
if (evt.target) {
result = evt.target.responseText;
}else {
result = evt.result;
}
if (this._nextUploader) {
this._nextUploader.uploadFile();
}
},
initialize: function () {
NeuroSpeech.WebAtoms.AtomFileUploader.callBaseMethod(this, "initialize");
this._element.style.height = "25px";
if (this.isFlashSupported()) {
this.createPlayer("/resources/NeuroSpeech.WebAtoms/NeuroSpeech.WebAtoms.Content.Flash.SingleFileUploader.swf", {});
} else {
this._input = document.createElement("INPUT");
$(this._input).attr("type", "file");
this._element.appendChild(this._input);
this.bindEvent(this._input, "change", "onFileSelected");
}
}
};
NeuroSpeech.WebAtoms.AtomFileUploader.registerClass("NeuroSpeech.WebAtoms.AtomFileUploader", NeuroSpeech.WebAtoms.AtomRichControl);
NeuroSpeech.WebAtoms.AtomHBox = function (element) {
NeuroSpeech.WebAtoms.AtomHBox.initializeBase(this, [element]);
};
NeuroSpeech.WebAtoms.AtomHBox.prototype = {
updateUI: function () {
var element = this.get_element();
AtomUI.setUI(element, null, "atom-hbox");
},
initialize: function () {
var element = this.get_element();
this.updateUI();
NeuroSpeech.WebAtoms.AtomHBox.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomHBox.registerClass("NeuroSpeech.WebAtoms.AtomHBox", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomLinkBar = function (element) {
NeuroSpeech.WebAtoms.AtomLinkBar.initializeBase(this, [element]);
this._allowSelectFirst = false;
};
NeuroSpeech.WebAtoms.AtomLinkBar.prototype = {
initialize: function () {
NeuroSpeech.WebAtoms.AtomLinkBar.callBaseMethod(this, "initialize");
},
onClick: function (event) {
NeuroSpeech.WebAtoms.AtomLinkBar.callBaseMethod(this, "onClick", [event]);
window.location = this.get_value();
},
onCollectionChanged: function (mode, index, item) {
NeuroSpeech.WebAtoms.AtomLinkBar.callBaseMethod(this,"onCollectionChanged",[mode, index, item]);
if (!this._items)
return;
AtomBinder.setValue(this, "value", location.pathname);
if (this.get_selectedIndex() != -1)
return;
var ae = new AtomEnumerator(this._items);
var link;
var val;
while (ae.next()) {
link = ae.current();
val = link;
if (this._valuePath) {
val = link[this._valuePath];
}
if (location.pathname.indexOf(val) == 0) {
var caller = this;
AtomBinder.setValue(caller, "selectedItem", link);
return;
}
}
}
};
NeuroSpeech.WebAtoms.AtomLinkBar.registerClass("NeuroSpeech.WebAtoms.AtomLinkBar", NeuroSpeech.WebAtoms.AtomToggleButtonBar);
NeuroSpeech.WebAtoms.AtomMultiButtonList = function (element) {
NeuroSpeech.WebAtoms.AtomMultiButtonList.initializeBase(this, [element]);
this._dataElements = [];
this._labelPath = "label";
this._valuePath = "value";
};
NeuroSpeech.WebAtoms.AtomMultiButtonList.prototype = {
get_options: function () {
return this._options;
},
set_options: function (v) {
this._options = v;
if (v) {
this.onCollectionChangedInternal("refresh", -1, null);
}
},
get_labelPath: function () {
return this._labelPath;
},
set_labelPath: function (lp) {
this._labelPath = lp;
},
get_valuePath: function () {
return this._valuePath;
},
set_valuePath: function (vp) {
this._valuePath = vp;
},
get_value: function () {
return this._value;
},
set_value: function (v) {
this._value = v;
this.updateSelections();
},
get_isRadio: function () {
return this._isRadio;
},
set_isRadio: function (v) {
this._isRadio = v;
},
get_items: function () {
return this._items;
},
set_items: function (v) {
if (this._items) {
this.unbindEvent(this._items, "CollectionChanged", "onCollectionChangedInternal");
}
this._items = v;
if (v != null) {
this.bindEvent(this._items, "CollectionChanged", "onCollectionChangedInternal");
this.onCollectionChangedInternal("refresh", -1, null);
}
},
onCollectionChangedInternal: function (mode, index, item) {
var value = this.get_value();
this.onCollectionChanged(mode, index, item);
this.set_value(value);
},
onCollectionChanged: function (mode, index, item) {
if (!this._items || !this._options)
return;
this._dataElements = [];
this.unbindEvent(null, "change", "onDataChange");
var ae = new AtomEnumerator(this._items);
while (ae.next()) {
var data = ae.current();
this.createChildElement(this._element, data);
}
this.updateUI();
},
updateSelections: function () {
if (!this._dataElements || this._dataElements.length == 0)
return;
if (!this._value)
return;
var ae;
var ace;
var item;
var selections = this._value.split(",");
ace = new AtomEnumerator(this._dataElements);
var cb;
while (ace.next()) {
cb = ace.current();
$(cb).removeAttr("checked");
ae = new AtomEnumerator(selections);
while (ae.next()) {
item = ae.current();
item = $.trim(item);
if ($(cb).val() == item) {
$(cb).attr("checked", "true");
}
}
}
},
onDataChange: function () {
var ae = new AtomEnumerator(this._dataElements);
var add = [];
while (ae.next()) {
var item = ae.current();
var dataItem = $(item).val();
var checked = $(item).attr("checked");
if (checked) {
add.push(dataItem);
}
}
this._value = add.join(", ");
AtomBinder.refreshValue(this, "value");
},
createChildElement: function (parentElement, data) {
var span = document.createElement("SPAN");
parentElement.appendChild(span);
parentElement = span;
span = document.createElement("SPAN");
var lp = this.get_labelPath();
var vp = this.get_valuePath();
l = data;
v = data;
if (lp)
l = data[lp];
if (vp)
v = data[vp];
var gpName = null;
if (this._isRadio) {
gpName = "_g" + AtomUI.getNewIndex();
}
parentElement.appendChild(span);
var options = new AtomEnumerator(this._options);
while (options.next()) {
var op = options.current();
if (vp) {
op = op[vp];
}
var val = v + "." + op;
var cb = document.createElement("INPUT");
if (this._isRadio) {
$(cb).attr("type", "radio");
$(cb).attr("name", gpName);
}else {
$(cb).attr("type", "checkbox");
}
$(cb).val(val);
span.appendChild(cb);
this.bindEvent(cb, "change", "onDataChange");
this._dataElements.push(cb);
}
span = document.createElement("SPAN");
parentElement.appendChild(span);
var txt = document.createTextNode(l);
span.appendChild(txt);
},
initialize: function () {
NeuroSpeech.WebAtoms.AtomMultiButtonList.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomMultiButtonList.registerClass("NeuroSpeech.WebAtoms.AtomMultiButtonList", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomNumberComboBox = function (element) {
NeuroSpeech.WebAtoms.AtomNumberComboBox.initializeBase(this, [element]);
this._labelPath = "label";
this._valuePath = "value";
this._step = 1;
};
NeuroSpeech.WebAtoms.AtomNumberComboBox.prototype = {
get_startNumber: function () {
return this._startNumber;
},
set_startNumber: function (v) {
this._startNumber = v;
this.resetNumbers();
},
get_endNumber: function () {
return this._endNumber;
},
set_endNumber: function (v) {
this._endNumber = v;
this.resetNumbers();
},
get_step: function () {
return this._step;
},
set_step: function (v) {
this._step = v;
this.resetNumbers();
},
onLoaded: function () {
this.resetNumbers();
},
resetNumbers: function () {
if (!this._created)
return;
if (!this._startNumber || !this._endNumber)
return;
var sn = this._startNumber;
var en = this._endNumber;
var numbers = [];
for (; sn <= en; sn+=this._step) {
numbers.push({ label: sn, value: sn } );
}
this.set_items(numbers);
},
initialize: function () {
NeuroSpeech.WebAtoms.AtomNumberComboBox.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomNumberComboBox.registerClass("NeuroSpeech.WebAtoms.AtomNumberComboBox", NeuroSpeech.WebAtoms.AtomComboBox);
NeuroSpeech.WebAtoms.AtomPhoneControl = function (element) {
NeuroSpeech.WebAtoms.AtomPhoneControl.initializeBase(this, [element]);
this._value = "";
};
NeuroSpeech.WebAtoms.AtomPhoneControl.prototype = {
get_value: function () {
return this._value;
},
set_value: function (v) {
this._value = v;
if (this._countries) {
this.setupValues();
}
},
setupValues: function () {
if (!this._value) {
$(this.num1).val("");
$(this.num2).val("");
$(this.num3).val("");
$(this.ext).val("");
$(this.msg).val("");
return;
}
var tokens = this._value.split(":", 6);
var cc = tokens[1];
var ae = new AtomEnumerator(this._countries);
while (ae.next()) {
var ci = ae.current();
if (ci.country == cc) {
this.cs.selectedIndex = ae.currentIndex();
break;
}
}
var num = tokens[3];
var nums = num.split(".", 3);
$(this.num1).val(nums[0]);
$(this.num2).val(nums[1]);
$(this.num3).val(nums[2]);
$(this.ext).val(tokens[4]);
$(this.msg).val(tokens[5]);
this.onFormat();
},
onDataChange: function () {
var value = "v2:";
var si = this.cs.selectedIndex;
var ci = this._countries[si];
value += ci.country + ":" + ci.code;
value += ":" + $(this.num1).val();
value += "." + $(this.num2).val();
value += "." + $(this.num3).val();
value += ":" + $(this.ext).val();
value += ":" + $(this.msg).val();
this._value = value;
AtomBinder.refreshValue(this, "value");
},
setCountries: function (r) {
this._countries = r;
var options = this.cs.options;
options.length = 0;
var ae = new AtomEnumerator(r);
while (ae.next()) {
var ci = ae.current();
if (!ci.value) {
ci.label = ci.ConfigName;
ci.value = ae.currentIndex();
var obj = eval("(" + ci.ConfigValue + ")");
ci.country = obj.country;
ci.code = obj.code;
ci.format = obj.format;
}
options[ae.currentIndex()] = new Option(ci.label, ci.value, false, false);
}
this.setupValues();
this.onFormat();
},
updateUI: function () {
this._element.style.height = "25px";
},
onCountryChange: function () {
this.onDataChange();
this.onFormat();
},
onFormat: function () {
var cs = this.cs;
if (cs.selectedIndex == -1)
return;
var ci = this._countries[cs.selectedIndex];
if (ci.format && ci.format.length && ci.format.length > 0) {
var ae = new AtomEnumerator(ci.format);
while (ae.next()) {
var length = ae.current();
var index = ae.currentIndex();
var t = this.num[index];
$(t).attr("atom-max-char", length);
}
}
},
onKeyUp: function (eventObject) {
var target = eventObject.target;
var max = $(target).attr("atom-max-char");
if (!max)
return;
var val = $(target).val();
if (val.length >= max) {
var ae = new AtomEnumerator(this.num);
while (ae.next()) {
var item = ae.current();
if (item == target) {
if (ae.next()) {
item = ae.current();
$(item).focus();
this.onDataChange();
return;
}
}
}
}
},
initialize: function () {
this.cs = document.createElement("SELECT");
this.cs.style.float = "left";
this.num1 = document.createElement("INPUT");
this.num1.type = "text";
this.num1.style.width = "50px";
this.num1.style.float = "left";
this.num2 = document.createElement("INPUT");
this.num2.type = "text";
this.num2.style.width = "50px";
this.num2.style.float = "left";
this.num3 = document.createElement("INPUT");
this.num3.type = "text";
this.num3.style.width = "50px";
this.num3.style.float = "left";
this.ext = document.createElement("INPUT");
this.num = [this.num1, this.num2, this.num3, this.ext];
this.ext.type = "text";
this.ext.style.width = "30px";
this.ext.style.float = "left";
this.msg = document.createElement("INPUT");
this.msg.type = "text";
this.msg.style.width = "100px";
this.msg.style.float = "left";
var element = this.get_element();
element.style.width = "400px";
element.appendChild(this.cs);
element.appendChild(this.num1);
element.appendChild(this.num2);
element.appendChild(this.num3);
element.appendChild(this.ext);
element.appendChild(this.msg);
this.bindEvent(this.cs, "change", "onCountryChange");
this.bindEvent(this.num1, "change", "onDataChange");
this.bindEvent(this.num1, "keyup", "onKeyUp");
this.bindEvent(this.num2, "change", "onDataChange");
this.bindEvent(this.num2, "keyup", "onKeyUp");
this.bindEvent(this.num3, "change", "onDataChange");
this.bindEvent(this.num3, "keyup", "onKeyUp");
this.bindEvent(this.ext, "change", "onDataChange");
this.bindEvent(this.msg, "change", "onDataChange");
var phone = this;
NeuroSpeech.WebAtoms.CachedData.loadItems("/Config/PhoneCountries", function (r) {
phone.setCountries(r);
});
NeuroSpeech.WebAtoms.AtomPhoneControl.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomPhoneControl.registerClass("NeuroSpeech.WebAtoms.AtomPhoneControl", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomRadioButtonList = function (element) {
NeuroSpeech.WebAtoms.AtomRadioButtonList.initializeBase(this, [element]);
this._allowMultipleSelection = false;
};
NeuroSpeech.WebAtoms.AtomRadioButtonList.prototype = {
updateChildSelections: function () {
var dataItems = this.get_dataItems();
var ae = new AtomEnumerator(dataItems);
var children = this._dataElements;
while (ae.next()) {
var dataItem = ae.current();
var item = children[ae.currentIndex()];
if (this.isSelected(dataItem)) {
$(item).attr("checked", "true");
} else {
$(item).removeAttr("checked");
}
}
},
onDataChange: function (event) {
this._onUIChanged = true;
var item = event.target;
var dataItem = item;
if (this.hasItems())
dataItem = $(item).data("atom-data-item");
var checked = $(item).attr("checked");
AtomBinder.clear(this._selectedItems);
if (this.isSelected(dataItem)) {
if (!checked) {
AtomBinder.removeItem(this._selectedItems, dataItem);
}
}
else {
if (checked) {
AtomBinder.addItem(this._selectedItems, dataItem);
}
}
this._onUIChanged = false;
},
createChildElement: function (parentElement, data) {
var span = document.createElement("SPAN");
var cb = document.createElement("INPUT");
$(cb).attr("type", "radio");
$(cb).attr("name", this._groupName);
var lp = this.get_labelPath();
var vp = this.get_valuePath();
l = data;
v = data;
if (lp)
l = data[lp];
if (vp)
v = data[vp];
$(cb).data("atom-data", v);
$(cb).data("atom-data-item",data);
$(cb).val(l);
span.appendChild(cb);
var txt = document.createTextNode(l);
span.appendChild(txt);
parentElement.appendChild(span);
this.bindEvent(cb, "change", "onDataChange");
return cb;
},
initialize: function () {
this._groupName = "__g" + AtomUI.getNewIndex();
NeuroSpeech.WebAtoms.AtomRadioButtonList.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomRadioButtonList.registerClass("NeuroSpeech.WebAtoms.AtomRadioButtonList", NeuroSpeech.WebAtoms.AtomCheckBoxList);
NeuroSpeech.WebAtoms.AtomVideoButtonBar = function (element) {
NeuroSpeech.WebAtoms.AtomVideoButtonBar.initializeBase(this, [element]);
this._allowSelectFirst = false;
this._allowMultipleSelection = false;
};
NeuroSpeech.WebAtoms.AtomVideoButtonBar.registerClass("NeuroSpeech.WebAtoms.AtomVideoButtonBar", NeuroSpeech.WebAtoms.AtomToggleButtonBar);
NeuroSpeech.WebAtoms.AtomViewStack = function (element) {
NeuroSpeech.WebAtoms.AtomViewStack.initializeBase(this, [element]);
this._source = null;
this._indexChangedHandler = null;
};
NeuroSpeech.WebAtoms.AtomViewStack.prototype = {
get_source: function () {
return this._source;
},
set_source: function (src) {
var old = this._source;
if (old != null) {
old.remove_selectionChanged(this._indexChangedHandler);
}
this._source = src;
if (src != null) {
src.add_selectionChanged(this._indexChangedHandler);
}
this.onSourceIndexChanged(src, null);
},
onSourceIndexChanged: function (sender, args) {
if (!this._source)
return;
if (this.hasItems() && this._source.hasItems()) {
AtomBinder.setValue(this, "selectedItem", AtomBinder.getValue(this._source, "selectedItem"));
} else {
AtomBinder.setValue(this, "selectedIndex", AtomBinder.getValue(this._source, "selectedIndex"));
}
},
onUpdateUI: function () {
var element = this.get_element();
var children = $(element).children();
var childEn = new AtomEnumerator(children);
var selectedChild = this.get_selectedChild();
while (childEn.next()) {
var item = childEn.current();
if (item == selectedChild) {
item.style.visibility = "inherit";
item.style.width = element.style.width;
item.style.height = element.style.height;
if (item.atomControl) {
item.atomControl.updateUI();
}
} else {
if (item.style.visibility != "hidden") {
item.style.visibility = "hidden";
$(item).find("[atom-type=AtomVideoPlayer]").each(function () {
var ctrl = this.atomControl;
if (ctrl != null && ctrl != undefined) {
ctrl.stop();
}
});
}
}
}
},
initialize: function () {
var element = this.get_element();
$(element).addClass("atom-view-stack");
this._indexChangedHandler = Function.createDelegate(this, this.onSourceIndexChanged);
NeuroSpeech.WebAtoms.AtomViewStack.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomViewStack.registerClass("NeuroSpeech.WebAtoms.AtomViewStack", NeuroSpeech.WebAtoms.AtomItemsControl);
NeuroSpeech.WebAtoms.AtomYesNoControl = function (element) {
NeuroSpeech.WebAtoms.AtomYesNoControl.initializeBase(this, [element]);
this._allowSelectFirst = false;
};
NeuroSpeech.WebAtoms.AtomYesNoControl.prototype = {
initialize: function () {
this._labelPath = "ConfigName";
this._valuePath = "ConfigValue";
this._template = "<li atom-text='[data.ConfigName]'></li>";
this._element.style.height = "26px";
NeuroSpeech.WebAtoms.AtomYesNoControl.callBaseMethod(this, "initialize");
this.loadProperty("items", "/Config/YesNo");
}
};
NeuroSpeech.WebAtoms.AtomYesNoControl.registerClass("NeuroSpeech.WebAtoms.AtomYesNoControl", NeuroSpeech.WebAtoms.AtomToggleButtonBar);
NeuroSpeech.WebAtoms.AtomYesNoCustom = function (element) {
NeuroSpeech.WebAtoms.AtomYesNoCustom.initializeBase(this, [element]);
};
NeuroSpeech.WebAtoms.AtomYesNoCustom.prototype = {
get_value: function () {
return this._value;
},
set_value: function (v) {
this._value = v;
if (this._onUIChanged)
return;
if (this._value) {
AtomBinder.setValue(this._yesNo, "value", true);
$(this._input).val(this._value);
}else {
AtomBinder.setValue(this._yesNo, "value", false);
}
},
onSelectionChanged: function () {
var val = this._yesNo.get_value();
if (val) {
$(this._input).removeAttr("disabled");
$(this._input).focus();
}else {
$(this._input).attr("disabled","disabled");
}
},
onValueChange: function () {
this._onUIChanged = true;
var val = $(this._input).val();
AtomBinder.setValue(this, "value", val);
this._onUIChanged = false;
},
initialize: function () {
var element = this._element;
var ul = document.createElement("UL");
$(ul).attr("atom-type", "AtomYesNoControl");
var t = AtomUI.createControl(ul);
this._yesNo = t;
var input = document.createElement("INPUT");
this._input = input;
$(input).attr("disabled", "disabled");
$(input).attr("type", "text");
element.appendChild(ul);
element.appendChild(input);
this.bindEvent(input, "change", "onValueChange");
NeuroSpeech.WebAtoms.AtomYesNoCustom.callBaseMethod(this, "initialize");
this.bindEvent(t, "selectionChanged", "onSelectionChanged");
}
};
NeuroSpeech.WebAtoms.AtomYesNoCustom.registerClass("NeuroSpeech.WebAtoms.AtomYesNoCustom", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomApplication = function (element) {
NeuroSpeech.WebAtoms.AtomApplication.initializeBase(this, [element]);
this._scope = { __application: this };
};
NeuroSpeech.WebAtoms.AtomApplication.prototype = {
updateUI: function () {
var element = this.get_element();
var ep = element.parentNode;
var pw = $(ep).outerWidth();
var left = (pw - $(element).width()) / 2;
element.style.left = left + "px";
element.style.position = "relative";
NeuroSpeech.WebAtoms.AtomApplication.callBaseMethod(this, "updateUI");
},
invokeUpdateUI: function () {
var container = this;
var f = this.updateUI;
window.setTimeout(function () {
return f.apply(container, arguments);
}, 5);
},
initialize: function () {
this.bindEvent(window, "resize", "invokeUpdateUI");
NeuroSpeech.WebAtoms.AtomApplication.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomApplication.registerClass("NeuroSpeech.WebAtoms.AtomApplication", NeuroSpeech.WebAtoms.AtomDockPanel);
NeuroSpeech.WebAtoms.AtomForm = function (element) {
NeuroSpeech.WebAtoms.AtomForm.initializeBase(this, [element]);
this._url = null;
this._appendUrl = null;
this._successMessage = null;
this._success = null;
this._submit = null;
this._error = null;
this._mergeResult = true;
this._next = null;
}
NeuroSpeech.WebAtoms.AtomForm.prototype = {
updateUI: function () {
NeuroSpeech.WebAtoms.AtomForm.callBaseMethod(this, "updateUI");
this.resetLabelWidth();
},
resetLabelWidth: function () {
var labelWidth = 0;
var element = this.get_element();
var ae = new AtomEnumerator($(element).find(":not(template)"));
while (ae.next()) {
var field = ae.current().atomControl;
if (field && field instanceof NeuroSpeech.WebAtoms.AtomFormField) {
var lw = field.get_labelWidth();
if (lw > labelWidth)
labelWidth = lw;
}
}
ae.reset();
while (ae.next()) {
var field = ae.current().atomControl;
if (field && field instanceof NeuroSpeech.WebAtoms.AtomFormField) {
field.set_labelWidth(labelWidth);
}
}
return;
},
get_result: function () {
return this._result;
},
set_result: function (r) {
this._result = r;
},
get_next: function () {
return this._next;
},
set_next: function (n) {
this._next = n;
},
get_mergeResult: function () {
return this._mergeResult;
},
set_mergeResult: function (r) {
this._mergeResult = r;
},
get_appendUrl: function () {
return this._appendUrl;
},
set_appendUrl: function (url) {
this._appendUrl = url;
},
get_loadUrl: function () {
return this._loadUrl;
},
set_loadUrl: function (url) {
this._loadUrl = url;
},
get_postUrl: function () {
return this._postUrl;
},
set_postUrl: function (url) {
this._postUrl = url;
},
get_successMessage: function () {
return this._successMessage;
},
set_successMessage: function (msg) {
this._successMessage = msg;
},
onSubmit: function () {
if (!this.isValid()) {
return;
}
var element = this.get_element();
var data = {};
if (this.get_data() == null) {
var ae = new AtomEnumerator($(element).find("input,textarea"));
var item;
var key;
while (ae.next()) {
item = ae.current();
key = item.id;
if (key == undefined || key == null || key == "") {
key = item.name ? item.name : item.type;
}
data[key] = item.value;
}
} else {
data = this.get_data();
}
var self = this;
var url = this.getUrl(this._postUrl);
data = AtomBinder.getClone(data);
this.invokeAjax(url, "POST", data, self._success);
},
onSuccess: function (result) {
AtomBinder.setValue(this, "result", result);
if (this._mergeResult) {
var data = this.get_data();
for (var index in result) {
AtomBinder.setValue(data, index, result[index]);
}
}
if (this._successMessage) {
alert(this._successMessage);
}
this.invokeAction(this._next);
},
initialize: function () {
NeuroSpeech.WebAtoms.AtomForm.callBaseMethod(this, "initialize");
this._success = Function.createDelegate(this, this.onSuccess);
this._submit = Function.createDelegate(this, this.onSubmit);
var element = this.get_element();
$(element).find("input[type=submit]").bind("click", null, this._submit);
}
};
NeuroSpeech.WebAtoms.AtomForm.registerClass("NeuroSpeech.WebAtoms.AtomForm", NeuroSpeech.WebAtoms.AtomFormLayout);
NeuroSpeech.WebAtoms.Label = {
getSizeDiv: function () {
var div = null;
if (this.div) {
div = this.div;
} else {
div = document.createElement("DIV");
div.style.position = "absolute";
div.style.width = "800px";
div.style.height = "500px";
div.style.left = "-1000px";
document.body.appendChild(div);
this.div = div;
}
return div;
},
getWidth: function (text) {
var label = null;
if (this.label) {
label = this.label;
} else {
label = document.createElement("LABEL");
var div = this.getSizeDiv();
div.appendChild(label);
this.label = label;
}
$(label).text(text);
return label.offsetWidth;
}
};
NeuroSpeech.WebAtoms.AtomFormField = function (element) {
if (element == undefined || element == null) {
element = document.createElement("DIV");
}
NeuroSpeech.WebAtoms.AtomFormField.initializeBase(this, [element]);
this._label = null;
this._labelWidth = "75px";
this._required = false;
this._description = null;
this._title = null;
this._error = "";
this._container = {};
this._resizeOnChildResized = true;
};
NeuroSpeech.WebAtoms.AtomFormField.prototype = {
setItem: function (type, dock, content, elementType) {
var child = null;
var e;
if (!this._container.hasOwnProperty(type)) {
if (elementType == undefined || elementType == null)
elementType = "DIV";
child = document.createElement(elementType);
this._container[type] = child;
e = this.get_element();
$(e).append(child);
} else {
child = this._container[type];
}
$(child).attr("atom-dock", dock);
$(child).text(content);
if (type == "error") {
if (content) {
child.style.display = "block";
} else {
child.style.display = "none";
}
}
this.updateUI();
return child;
},
updateLabelWidth: function (width) {
var form = this.getForm(this.get_element());
form.resetLabelWidth();
},
getForm: function (element) {
if (element.atomControl && element.atomControl instanceof NeuroSpeech.WebAtoms.AtomForm) {
return element.atomControl;
}
var p = element.parentNode;
if (p == document || p == window)
return null;
return this.getForm(p);
},
get_error: function () {
return this._error;
},
set_error: function (e) {
this._error = e;
this.setItem("error", "Right", e);
},
get_labelWidth: function () {
return NeuroSpeech.WebAtoms.Label.getWidth(this.get_label());
},
set_labelWidth: function (lw) {
var l = this._container.label;
$(l).width(lw);
var lwn = ($(l).width() + 8) + "px";
if (this._container.description) {
this._container.description.style.marginLeft = lwn;
}
if (this._container.title) {
this._container.title.style.marginLeft = lwn;
}
this.updateUI();
},
get_label: function () {
return this._label;
},
set_label: function (l) {
this._label = l;
this.setItem("label", "Left", l);
},
get_required: function () {
return this._required;
},
set_required: function (r) {
this._required = r;
this.setItem("required", "Left", r ? "*" : "");
},
get_field: function () {
return this._field;
},
set_field: function (f) {
this._field = f;
},
get_regex: function () {
return this._regex;
},
set_regex: function (r) {
this._regex = r;
},
get_description: function () {
return this._description;
},
set_description: function (d) {
this._description = d;
this.setItem("description", "Bottom", d);
},
get_dataType: function () {
return this._dataType;
},
set_dataType: function (v) {
this._dataType = v;
},
get_title: function () {
return this._title;
},
set_title: function (t) {
this._title = t;
this.setItem("title", "Top", t);
},
setChild: function (c) {
var e = this.get_element();
$(c).attr("atom-dock", "Fill");
$(e).append(c);
this.copyAttribute(c, e, "label");
this.copyAttribute(c, e, "description");
this.copyAttribute(c, e, "title");
this.copyAttribute(c, e, "required");
this.copyAttribute(c, e, "field");
this.copyAttribute(c, e, "regex");
this.copyAttribute(c, e, "data-type");
if (!($(c).attr("id"))) {
c.id = "__id_" + AtomUI.getNewIndex();
}
this.controlElementID = c.id;
this.bindEvent(c, "blur", "validate");
this.editor = c;
},
validate: function () {
if (!this.editor)
return;
var data = this.get_data();
if (!data)
return;
var value = null;
var field = this._field;
if (field) {
value = data[this._field];
}
else {
if (this.editor.atomControl) {
value = AtomBinder.getValue(this.editor.atomControl, "value");
} else {
value = $(this.editor).val();
}
}
if (this._required && !value) {
if (field) {
AtomBinder.setError(data, field, "Required");
} else {
this.set_error("Required");
}
return;
}
var re = this._regex;
if (!re) {
if (this._dataType) {
switch (this._dataType) {
case "email":
re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
break;
}
}
} else {
re = eval("(" + re + ")");
}
if (re) {
if (!re.test(value)) {
if (field) {
AtomBinder.setError(data, field, "Invalid");
} else {
this.set_error("Invalid");
}
return;
}
}
if (field) {
AtomBinder.setError(data, field, "");
} else {
this.set_error("");
}
},
copyAttribute: function (from, e, name) {
var at = $(from).attr("atom-" + name);
if (at == undefined || at == null)
return;
$(e).attr("atom-" + name, at);
},
initialize: function () {
var element = this.get_element();
var l = this.setItem("label", "Left", "", "LABEL");
$(l).addClass("atom-form-label");
l.htmlFor = this.controlElementID;
var r = this.setItem("required", "Left", "");
r.style.color = "red";
r.style.width = "8px";
var e = this.setItem("error", "Right", "");
e.style.color = "red";
e.style.overflow = "hidden";
e.style.width = "90px";
e.style.marginLeft = "5px";
e.style.marginRight = "5px";
e.style.display = "none";
NeuroSpeech.WebAtoms.AtomFormField.callBaseMethod(this, "initialize");
element.style.overflow = "hidden";
element.style.display = "block";
element.style.position = "relative";
element.style.margin = "2px";
}
};
NeuroSpeech.WebAtoms.AtomFormField.registerClass("NeuroSpeech.WebAtoms.AtomFormField", NeuroSpeech.WebAtoms.AtomDockPanel);
NeuroSpeech.WebAtoms.AtomTableLayout = function (columns,cellWidth,cellHeight) {
NeuroSpeech.WebAtoms.AtomTableLayout.initializeBase(this);
this._cellWidth = cellWidth;
this._cellHeight = cellHeight;
this._columns = columns;
};
NeuroSpeech.WebAtoms.AtomTableLayout.prototype = {
doLayout: function (element) {
var ae = new AtomEnumerator($(element).children());
var item;
var left = 0;
var top = 0;
var maxRows = Math.ceil(ae._array.length / this._columns) - 1;
var rows = maxRows;
var width = this._columns * this._cellWidth;
var height = this._cellHeight * ( maxRows + 1);
element.style.position = "relative";
element.style.width = width + "px";
element.style.height = height + "px";
element.maxRows = maxRows;
while (ae.next()) {
item = ae.current();
item.style.position = "absolute";
item.style.left = left + "px";
item.style.top = top + "px";
item.style.width = this._cellWidth + "px";
if (rows<=0) {
rows = maxRows;
left += this._cellWidth + 10;
top = 0;
}else {
rows--;
top += this._cellHeight;
}
}
}
};
NeuroSpeech.WebAtoms.AtomTableLayout.registerClass("NeuroSpeech.WebAtoms.AtomTableLayout", NeuroSpeech.WebAtoms.AtomLayout);
NeuroSpeech.WebAtoms.AtomPhotoPlayer = function (element) {
NeuroSpeech.WebAtoms.AtomPhotoPlayer.initializeBase(this, [element]);
this._img = null;
};
NeuroSpeech.WebAtoms.AtomPhotoPlayer.prototype = {
play: function (url) {
this._img.src = url;
},
stop: function () {
},
initialize: function () {
var element = this.get_element();
element.style.textAlign = "center";
var img = document.createElement("img");
img.style.maxWidth = "100%";
img.style.maxHeight = "100%";
img.style.verticalAlign = "middle";
element.appendChild(img);
NeuroSpeech.WebAtoms.AtomPhotoPlayer.callBaseMethod(this, "initialize");
this._img = img;
}
};
NeuroSpeech.WebAtoms.AtomPhotoPlayer.registerClass("NeuroSpeech.WebAtoms.AtomPhotoPlayer", NeuroSpeech.WebAtoms.AtomPlayer);
NeuroSpeech.WebAtoms.AtomVideoPlayer = function (element) {
NeuroSpeech.WebAtoms.AtomVideoPlayer.initializeBase(this, [element]);
this._isFlash = false;
this._fpID = null;
this._divID = null;
this._playerReady = false;
this._timeoutCallback = null;
this._playerID = null;
this._srcID = null;
this._video = null;
this._src = null;
this._errorHandler = null;
this._autoCreate = false;
this._playerCreated = false;
};
NeuroSpeech.WebAtoms.AtomVideoPlayer.prototype = {
get_autoCreate: function () {
return this._autoCreate;
},
set_autoCreate: function (v) {
this._autoCreate = v;
},
onError: function () {
alert("something went wrong with video");
},
get_player: function (appName) {
if (navigator.appName.indexOf("Microsoft") != -1) {
return window[appName];
} else {
return document[appName];
}
},
get_playerReady: function () {
return this._playerReady;
},
set_playerReady: function (b) {
this._playerReady = b;
},
play: function (url) {
this._url = url;
var element = this.get_element();
this.create();
if (this._isFlash) {
this.onTimeout();
return;
} else {
if (this._src) {
this._video.pause();
this._video.removeChild(this._src);
}
this._src = document.createElement("source");
this._src.type = "video/mp4";
this._src.src = url;
$(this._video).attr("controls", function () {
return "controls";
});
this._video.appendChild(this._src);
this._video.play();
}
},
stop: function () {
if (!this._playerCreated)
return;
var element = this.get_element();
if (this._isFlash) {
if (this._playerReady) {
var vpc = this.get_player(this._fpID);
vpc.pauseVideo();
} else {
}
} else {
if (this._video) {
this._video.pause();
}
}
},
onTimeout: function () {
var element = this.get_element();
if (element.style.visibility == "hidden") {
return;
}
if (this._playerReady) {
var vpc = this.get_player(this._fpID);
vpc.playVideo(this._url);
} else {
window.setTimeout(this._timeoutCallback, 100);
}
},
supportsMP4: function () {
var ua = window.navigator.userAgent.toLowerCase();
if (ua.indexOf("ios") != -1)
return true;
if (ua.indexOf("safari") != -1)
return true;
if (ua.indexOf("android") != -1)
return true;
return false;
},
create: function () {
if (this._playerCreated)
return;
this._playerCreated = true;
this._timeoutCallback = Function.createDelegate(this, this.onTimeout);
var element = this.get_element();
if (element.id == undefined || element.id == null || element.id == "") {
element.id = "__uniqueID" + AtomUI.getNewIndex();
allControls[element.id] = this;
}
this._divID = element.id + "_Player";
var childDiv = document.createElement("div");
childDiv.id = this._divID;
$(element).append(childDiv);
if (!this.supportsMP4()) {
this._fpID = this._divID + "_Flash";
createVideoPlayer(element.id, this._divID, this._fpID);
this._isFlash = true;
} else {
this._video = document.createElement("video");
this._playerID = this._divID + "_Video";
this._video.id = this._playerID;
$("#" + this._divID).append(this._video);
this._video.style.width = "100%";
this._video.style.height = "100%";
this._video.autobuffer = true;
this._video.autoplay = true;
this._video.allowfullscreen = true;
}
},
initialize: function () {
var element = this.get_element();
$(element).addClass("atom-video-player");
if (this._autoCreate) {
this.create();
}
NeuroSpeech.WebAtoms.AtomVideoPlayer.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomVideoPlayer.registerClass("NeuroSpeech.WebAtoms.AtomVideoPlayer", NeuroSpeech.WebAtoms.AtomPlayer);
NeuroSpeech.WebAtoms.AtomWindow = function (element) {
NeuroSpeech.WebAtoms.AtomWindow.initializeBase(this, [element]);
this._opener = null;
};
NeuroSpeech.WebAtoms.AtomWindow.prototype = {
add_open: function () {
this.get_events().addHandler("open", handler);
},
remove_open: function () {
this.get_events().removeHandler("open", handler);
},
get_opener: function () {
return this._opener;
},
set_opener: function (value) {
this._opener = value;
},
close: function () {
var element = this.get_element();
$(element).removeClass("atom-visible");
$(element).addClass("atom-hidden");
},
show: function (opener) {
if (opener != null && opener != undefined) {
this._opener = opener;
}
var element = this.get_element();
var width = $(window).width();
var height = $(window).height();
var ew = $(element).innerWidth();
var eh = $(element).innerHeight();
var left = (width - ew) / 2;
var top = (height - eh) / 2;
element.style.top = top + "px";
element.style.left = left + "px";
$(element).removeClass("atom-hidden");
$(element).addClass("atom-visible");
element.style.zIndex = 0;
var h = this.get_events().getHandler("open");
if (h) h(this, Sys.EventArgs.Empty);
AtomUI.setUI(element, "AtomWindow", "atom-window");
},
initialize: function () {
var element = this.get_element();
NeuroSpeech.WebAtoms.AtomWindow.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomWindow.registerClass("NeuroSpeech.WebAtoms.AtomWindow", NeuroSpeech.WebAtoms.AtomControl);
NeuroSpeech.WebAtoms.AtomWindowButton = function (element) {
NeuroSpeech.WebAtoms.AtomWindowButton.initializeBase(this, [element]);
this._source = null;
this._mode = "close";
};
NeuroSpeech.WebAtoms.AtomWindowButton.prototype = {
updateUI: function () {
},
get_mode: function () {
return this._mode;
},
set_mode: function (s) {
this._mode = s;
},
get_source: function () {
return this._source;
},
set_source: function (s) {
this._source = s;
},
onClickHandler: function () {
NeuroSpeech.WebAtoms.AtomWindowButton.callBaseMethod(this, "onClickHandler");
var s = this._source;
if (s == null)
return;
if (this._mode == "close") {
s.close();
} else if (this._mode == "show") {
s.show();
}
},
initialize: function () {
var element = this.get_element();
NeuroSpeech.WebAtoms.AtomWindowButton.callBaseMethod(this, "initialize");
}
};
NeuroSpeech.WebAtoms.AtomWindowButton.registerClass("NeuroSpeech.WebAtoms.AtomWindowButton", NeuroSpeech.WebAtoms.AtomButton);
/*!
* Touch enabled jQuery.event.drag
* http://www.shamasis.net/projects/jquery-drag-touch/
* @license Open Source MIT
* @author Shamasis Bhattacharya <http://www.shamasis.net/>
* @release 2.0.1
*
* @original-license
* jquery.event.drag - v 2.0.0
* Copyright (c) 2010 Three Dub Media - http://threedubmedia.com
* Open Source MIT License - http://threedubmedia.com/code/license
*/
(function ($) {
$.fn.drag = function (str, arg, opts) {
var type = typeof str == "string" ? str : "",
fn = $.isFunction(str) ? str : $.isFunction(arg) ? arg : null;
if (type.indexOf("drag") !== 0)
type = "drag" + type;
opts = (str == fn ? arg : opts) || {};
return fn ? this.bind(type, opts, fn) : this.trigger(type);
};
var $event = $.event,
hasTouch = 'ontouchstart' in document.documentElement,
initBindings = hasTouch ? 'touchstart' : 'mousedown',
dragBindings = hasTouch ? 'touchmove touchend' : 'mousemove mouseup',
touchEventXY = function (event, dd) {
if (!dd.touchXY || !event.originalEvent) {
return event;
}
var touches = event.originalEvent.changedTouches ||
event.originalEvent.touches;
if (touches && touches.length) {
$.extend(event, touches[0]);
}
return event;
},
$special = $event.special,
drag = $special.drag = {
defaults: {
which: 1, // mouse button pressed to start drag sequence
distance: 0, // distance dragged before dragstart
not: ':input', // selector to suppress dragging on target elements
handle: null, // selector to match handle target elements
relative: false, // true to use "position", false to use "offset"
drop: false, // false to suppress drop events, true or selector to allow
click: false, // false to suppress click events after dragend (no proxy)
touchXY: true // Make touch XY match event XY
},
datakey: "dragdata",
livekey: "livedrag",
add: function (obj) {
var data = $.data(this, drag.datakey),
opts = obj.data || {};
data.related += 1;
if (!data.live && obj.selector) {
data.live = true;
$event.add(this, "draginit." + drag.livekey, drag.delegate);
}
$.each(drag.defaults, function (key, def) {
if (opts[key] !== undefined)
data[key] = opts[key];
});
},
remove: function () {
$.data(this, drag.datakey).related -= 1;
},
setup: function () {
if ($.data(this, drag.datakey))
return;
var data = $.extend({
related: 0
}, drag.defaults);
$.data(this, drag.datakey, data);
$event.add(this, initBindings, drag.init, data);
if (this.attachEvent)
this.attachEvent("ondragstart", drag.dontstart);
},
teardown: function () {
if ($.data(this, drag.datakey).related)
return;
$.removeData(this, drag.datakey);
$event.remove(this, initBindings, drag.init);
$event.remove(this, "draginit", drag.delegate);
drag.textselect(true);
if (this.detachEvent)
this.detachEvent("ondragstart", drag.dontstart);
},
init: function (event) {
var dd = event.data, results,
touches = event.originalEvent ? event.originalEvent.changedTouches ||
event.originalEvent.touches : [];
if (touches && touches.length) {
if (touches.length > 1) {
return;
}
}
else {
if (dd.which > 0 && event.which != dd.which) {
return;
}
}
if ($(event.target).is(dd.not))
return;
if (dd.handle && !$(event.target).closest(dd.handle, event.currentTarget).length)
return;
dd.propagates = 1;
dd.interactions = [drag.interaction(this, dd)];
dd.target = event.target;
dd.pageX = event.pageX;
dd.pageY = event.pageY;
dd.dragging = null;
results = drag.hijack(event, "draginit", dd);
if (!dd.propagates)
return;
results = drag.flatten(results);
if (results && results.length) {
dd.interactions = [];
$.each(results, function () {
dd.interactions.push(drag.interaction(this, dd));
});
}
dd.propagates = dd.interactions.length;
if (dd.drop !== false && $special.drop)
$special.drop.handler(event, dd);
drag.textselect(false);
$event.add(document, dragBindings, drag.handler, dd);
if (!hasTouch) {
return false;
}
},
interaction: function (elem, dd) {
return {
drag: elem,
callback: new drag.callback(),
droppable: [],
offset: $(elem)[dd.relative ? "position" : "offset"]() || {
top: 0,
left: 0
}
};
},
handler: function (event) {
var dd = event.data;
if (!dd.dragging && (event.type === 'mousemove' || event.type === 'touchmove')) {
if (Math.pow(event.pageX - dd.pageX, 2) + Math.pow(event.pageY - dd.pageY, 2) < Math.pow(dd.distance, 2))
return; // distance tolerance not reached
event.target = dd.target; // force target from "mousedown" event (fix distance issue)
drag.hijack(event, "dragstart", dd); // trigger "dragstart"
if (dd.propagates) // "dragstart" not rejected
dd.dragging = true; // activate interaction
}
switch (event.type) {
case 'touchmove':
if (dd.dragging) {
event.preventDefault();
touchEventXY(event, dd);
}
case 'mousemove':
if (dd.dragging) {
drag.hijack(event, "drag", dd);
if (dd.propagates) {
if (dd.drop !== false && $special.drop)
$special.drop.handler(event, dd); // "dropstart", "dropend"
break; // "drag" not rejected, stop
}
event.type = "mouseup"; // helps "drop" handler behave
}
case 'mouseup':
case 'touchend':
$event.remove(document, dragBindings, drag.handler); // remove page events
if (dd.dragging) {
if (dd.drop !== false && $special.drop)
$special.drop.handler(event, dd); // "drop"
drag.hijack(event, "dragend", dd); // trigger "dragend"
}
drag.textselect(true); // enable text selection
if (dd.click === false && dd.dragging) {
jQuery.event.triggered = true;
setTimeout(function () {
jQuery.event.triggered = false;
}, 20);
dd.dragging = false; // deactivate element
}
break;
}
},
delegate: function (event) {
var elems = [], target,
events = $.data(this, "events") || {};
$.each(events.live || [], function (i, obj) {
if (obj.preType.indexOf("drag") !== 0)
return;
target = $(event.target).closest(obj.selector, event.currentTarget)[0];
if (!target)
return;
$event.add(target, obj.origType + '.' + drag.livekey, obj.origHandler, obj.data);
if ($.inArray(target, elems) < 0)
elems.push(target);
});
if (!elems.length)
return false;
return $(elems).bind("dragend." + drag.livekey, function () {
$event.remove(this, "." + drag.livekey); // cleanup delegation
});
},
hijack: function (event, type, dd, x, elem) {
if (!dd)
return;
var orig = {
event: event.originalEvent,
type: event.type
},
mode = type.indexOf("drop") ? "drag" : "drop",
result, i = x || 0, ia, $elems, callback,
len = !isNaN(x) ? x : dd.interactions.length;
event.type = type;
event.sourceEvent = orig.event;
event.originalEvent = null;
dd.results = [];
do if (ia = dd.interactions[i]) {
if (type !== "dragend" && ia.cancelled)
continue;
callback = drag.properties(event, dd, ia);
ia.results = [];
$(elem || ia[mode] || dd.droppable).each(function (p, subject) {
callback.target = subject;
result = subject ? $event.handle.call(subject, event, callback) : null;
if (result === false) {
if (mode == "drag") {
ia.cancelled = true;
dd.propagates -= 1;
}
if (type == "drop") {
ia[mode][p] = null;
}
}
else if (type == "dropinit")
ia.droppable.push(drag.element(result) || subject);
if (type == "dragstart")
ia.proxy = $(drag.element(result) || ia.drag)[0];
ia.results.push(result);
delete event.result;
if (type !== "dropinit")
return result;
});
dd.results[i] = drag.flatten(ia.results);
if (type == "dropinit")
ia.droppable = drag.flatten(ia.droppable);
if (type == "dragstart" && !ia.cancelled)
callback.update();
}
while (++i < len)
event.type = orig.type;
event.originalEvent = orig.event;
return drag.flatten(dd.results);
},
properties: function (event, dd, ia) {
var obj = ia.callback;
obj.drag = ia.drag;
obj.proxy = ia.proxy || ia.drag;
obj.startX = dd.pageX;
obj.startY = dd.pageY;
obj.deltaX = event.pageX - dd.pageX;
obj.deltaY = event.pageY - dd.pageY;
obj.originalX = ia.offset.left;
obj.originalY = ia.offset.top;
obj.offsetX = event.pageX - (dd.pageX - obj.originalX);
obj.offsetY = event.pageY - (dd.pageY - obj.originalY);
obj.drop = drag.flatten((ia.drop || []).slice());
obj.available = drag.flatten((ia.droppable || []).slice());
return obj;
},
element: function (arg) {
if (arg && (arg.jquery || arg.nodeType == 1))
return arg;
},
flatten: function (arr) {
return $.map(arr, function (member) {
return member && member.jquery ? $.makeArray(member) :
member && member.length ? drag.flatten(member) : member;
});
},
textselect: function (bool) {
$(document)[bool ? "unbind" : "bind"]("selectstart", drag.dontstart)
.attr("unselectable", bool ? "off" : "on")
.css("MozUserSelect", bool ? "" : "none");
},
dontstart: function () {
return false;
},
callback: function (){ }
};
drag.callback.prototype = {
update: function () {
if ($special.drop && this.available.length)
$.each(this.available, function (i) {
$special.drop.locate(this, i);
});
}
};
$special.draginit = $special.dragstart = $special.dragend = drag;
})(jQuery);
$(document).ready(function () {
NeuroSpeech.WebAtoms.dispatcher.setupControls();
NeuroSpeech.WebAtoms.dispatcher.start();
$(window).error(function () {
alert("something went wrong");
});
});
